{"ast":null,"code":"import { reduce } from './reduce';\nfunction toArrayReducer(arr, item, index) {\n  if (index === 0) {\n    return [item];\n  }\n  arr.push(item);\n  return arr;\n}\nexport function toArray() {\n  return reduce(toArrayReducer, []);\n}","map":{"version":3,"names":["reduce","toArrayReducer","arr","item","index","push","toArray"],"sources":["C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\node_modules\\rxjs\\src\\internal\\operators\\toArray.ts"],"sourcesContent":["import { reduce } from './reduce';\nimport { OperatorFunction } from '../types';\n\nfunction toArrayReducer<T>(arr: T[], item: T, index: number) {\n  if (index === 0) {\n    return [item];\n  }\n  arr.push(item);\n  return arr;\n}\n\n/**\n * Collects all source emissions and emits them as an array when the source completes.\n *\n * <span class=\"informal\">Get all values inside an array when the source completes</span>\n *\n * ![](toArray.png)\n *\n * `toArray` will wait until the source Observable completes before emitting\n * the array containing all emissions. When the source Observable errors no\n * array will be emitted.\n *\n *  ## Example\n * ```ts\n * import { interval } from 'rxjs';\n * import { toArray, take } from 'rxjs/operators';\n *\n * const source = interval(1000);\n * const example = source.pipe(\n *   take(10),\n *   toArray()\n * );\n *\n * const subscribe = example.subscribe(val => console.log(val));\n *\n * // output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n *\n * ```\n* @return An array from an observable sequence.\n* @method toArray\n* @owner Observable\n*/\nexport function toArray<T>(): OperatorFunction<T, T[]> {\n  return reduce(toArrayReducer, [] as T[]);\n}\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,UAAU;AAGjC,SAASC,cAAcA,CAAIC,GAAQ,EAAEC,IAAO,EAAEC,KAAa;EACzD,IAAIA,KAAK,KAAK,CAAC,EAAE;IACf,OAAO,CAACD,IAAI,CAAC;;EAEfD,GAAG,CAACG,IAAI,CAACF,IAAI,CAAC;EACd,OAAOD,GAAG;AACZ;AAiCA,OAAM,SAAUI,OAAOA,CAAA;EACrB,OAAON,MAAM,CAACC,cAAc,EAAE,EAAS,CAAC;AAC1C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}