{"ast":null,"code":"import { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function debounce(durationSelector) {\n  return source => source.lift(new DebounceOperator(durationSelector));\n}\nclass DebounceOperator {\n  constructor(durationSelector) {\n    this.durationSelector = durationSelector;\n  }\n  call(subscriber, source) {\n    return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\n  }\n}\nclass DebounceSubscriber extends SimpleOuterSubscriber {\n  constructor(destination, durationSelector) {\n    super(destination);\n    this.durationSelector = durationSelector;\n    this.hasValue = false;\n  }\n  _next(value) {\n    try {\n      const result = this.durationSelector.call(this, value);\n      if (result) {\n        this._tryNext(value, result);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n  _complete() {\n    this.emitValue();\n    this.destination.complete();\n  }\n  _tryNext(value, duration) {\n    let subscription = this.durationSubscription;\n    this.value = value;\n    this.hasValue = true;\n    if (subscription) {\n      subscription.unsubscribe();\n      this.remove(subscription);\n    }\n    subscription = innerSubscribe(duration, new SimpleInnerSubscriber(this));\n    if (subscription && !subscription.closed) {\n      this.add(this.durationSubscription = subscription);\n    }\n  }\n  notifyNext() {\n    this.emitValue();\n  }\n  notifyComplete() {\n    this.emitValue();\n  }\n  emitValue() {\n    if (this.hasValue) {\n      const value = this.value;\n      const subscription = this.durationSubscription;\n      if (subscription) {\n        this.durationSubscription = undefined;\n        subscription.unsubscribe();\n        this.remove(subscription);\n      }\n      this.value = undefined;\n      this.hasValue = false;\n      super._next(value);\n    }\n  }\n}","map":{"version":3,"names":["SimpleOuterSubscriber","innerSubscribe","SimpleInnerSubscriber","debounce","durationSelector","source","lift","DebounceOperator","constructor","call","subscriber","subscribe","DebounceSubscriber","destination","hasValue","_next","value","result","_tryNext","err","error","_complete","emitValue","complete","duration","subscription","durationSubscription","unsubscribe","remove","closed","add","notifyNext","notifyComplete","undefined"],"sources":["C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\node_modules\\rxjs\\src\\internal\\operators\\debounce.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { MonoTypeOperatorFunction, SubscribableOrPromise, TeardownLogic } from '../types';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * ![](debounce.png)\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * ## Example\n * Emit the most recent click after a burst of clicks\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { debounce } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(debounce(() => interval(1000)));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nexport function debounce<T>(durationSelector: (value: T) => SubscribableOrPromise<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DebounceOperator(durationSelector));\n}\n\nclass DebounceOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceSubscriber<T, R> extends SimpleOuterSubscriber<T, R> {\n  private value?: T;\n  private hasValue = false;\n  private durationSubscription?: Subscription;\n\n  constructor(destination: Subscriber<R>,\n              private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    try {\n      const result = this.durationSelector.call(this, value);\n\n      if (result) {\n        this._tryNext(value, result);\n      }\n    } catch (err) {\n      this.destination.error!(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.emitValue();\n    this.destination.complete!();\n  }\n\n  private _tryNext(value: T, duration: SubscribableOrPromise<any>): void {\n    let subscription = this.durationSubscription;\n    this.value = value;\n    this.hasValue = true;\n    if (subscription) {\n      subscription.unsubscribe();\n      this.remove(subscription);\n    }\n\n    subscription = innerSubscribe(duration, new SimpleInnerSubscriber(this));\n    if (subscription && !subscription.closed) {\n      this.add(this.durationSubscription = subscription);\n    }\n  }\n\n  notifyNext(): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue(): void {\n    if (this.hasValue) {\n      const value = this.value;\n      const subscription = this.durationSubscription;\n      if (subscription) {\n        this.durationSubscription = undefined;\n        subscription.unsubscribe();\n        this.remove(subscription);\n      }\n      // This must be done *before* passing the value\n      // along to the destination because it's possible for\n      // the value to synchronously re-enter this operator\n      // recursively if the duration selector Observable\n      // emits synchronously\n      this.value = undefined;\n      this.hasValue = false;\n      super._next(value!);\n    }\n  }\n}\n"],"mappings":"AAKA,SAASA,qBAAqB,EAAEC,cAAc,EAAEC,qBAAqB,QAAQ,mBAAmB;AAkDhG,OAAM,SAAUC,QAAQA,CAAIC,gBAA0D;EACpF,OAAQC,MAAqB,IAAKA,MAAM,CAACC,IAAI,CAAC,IAAIC,gBAAgB,CAACH,gBAAgB,CAAC,CAAC;AACvF;AAEA,MAAMG,gBAAgB;EACpBC,YAAoBJ,gBAA0D;IAA1D,KAAAA,gBAAgB,GAAhBA,gBAAgB;EACpC;EAEAK,IAAIA,CAACC,UAAyB,EAAEL,MAAW;IACzC,OAAOA,MAAM,CAACM,SAAS,CAAC,IAAIC,kBAAkB,CAACF,UAAU,EAAE,IAAI,CAACN,gBAAgB,CAAC,CAAC;EACpF;;AAQF,MAAMQ,kBAAyB,SAAQZ,qBAA2B;EAKhEQ,YAAYK,WAA0B,EAClBT,gBAA0D;IAC5E,KAAK,CAACS,WAAW,CAAC;IADA,KAAAT,gBAAgB,GAAhBA,gBAAgB;IAJ5B,KAAAU,QAAQ,GAAG,KAAK;EAMxB;EAEUC,KAAKA,CAACC,KAAQ;IACtB,IAAI;MACF,MAAMC,MAAM,GAAG,IAAI,CAACb,gBAAgB,CAACK,IAAI,CAAC,IAAI,EAAEO,KAAK,CAAC;MAEtD,IAAIC,MAAM,EAAE;QACV,IAAI,CAACC,QAAQ,CAACF,KAAK,EAAEC,MAAM,CAAC;;KAE/B,CAAC,OAAOE,GAAG,EAAE;MACZ,IAAI,CAACN,WAAW,CAACO,KAAM,CAACD,GAAG,CAAC;;EAEhC;EAEUE,SAASA,CAAA;IACjB,IAAI,CAACC,SAAS,EAAE;IAChB,IAAI,CAACT,WAAW,CAACU,QAAS,EAAE;EAC9B;EAEQL,QAAQA,CAACF,KAAQ,EAAEQ,QAAoC;IAC7D,IAAIC,YAAY,GAAG,IAAI,CAACC,oBAAoB;IAC5C,IAAI,CAACV,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACF,QAAQ,GAAG,IAAI;IACpB,IAAIW,YAAY,EAAE;MAChBA,YAAY,CAACE,WAAW,EAAE;MAC1B,IAAI,CAACC,MAAM,CAACH,YAAY,CAAC;;IAG3BA,YAAY,GAAGxB,cAAc,CAACuB,QAAQ,EAAE,IAAItB,qBAAqB,CAAC,IAAI,CAAC,CAAC;IACxE,IAAIuB,YAAY,IAAI,CAACA,YAAY,CAACI,MAAM,EAAE;MACxC,IAAI,CAACC,GAAG,CAAC,IAAI,CAACJ,oBAAoB,GAAGD,YAAY,CAAC;;EAEtD;EAEAM,UAAUA,CAAA;IACR,IAAI,CAACT,SAAS,EAAE;EAClB;EAEAU,cAAcA,CAAA;IACZ,IAAI,CAACV,SAAS,EAAE;EAClB;EAEAA,SAASA,CAAA;IACP,IAAI,IAAI,CAACR,QAAQ,EAAE;MACjB,MAAME,KAAK,GAAG,IAAI,CAACA,KAAK;MACxB,MAAMS,YAAY,GAAG,IAAI,CAACC,oBAAoB;MAC9C,IAAID,YAAY,EAAE;QAChB,IAAI,CAACC,oBAAoB,GAAGO,SAAS;QACrCR,YAAY,CAACE,WAAW,EAAE;QAC1B,IAAI,CAACC,MAAM,CAACH,YAAY,CAAC;;MAO3B,IAAI,CAACT,KAAK,GAAGiB,SAAS;MACtB,IAAI,CAACnB,QAAQ,GAAG,KAAK;MACrB,KAAK,CAACC,KAAK,CAACC,KAAM,CAAC;;EAEvB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}