{"ast":null,"code":"import { isArray } from '../util/isArray';\nimport { fromArray } from './fromArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function race(...observables) {\n  if (observables.length === 1) {\n    if (isArray(observables[0])) {\n      observables = observables[0];\n    } else {\n      return observables[0];\n    }\n  }\n  return fromArray(observables, undefined).lift(new RaceOperator());\n}\nexport class RaceOperator {\n  call(subscriber, source) {\n    return source.subscribe(new RaceSubscriber(subscriber));\n  }\n}\nexport class RaceSubscriber extends OuterSubscriber {\n  constructor(destination) {\n    super(destination);\n    this.hasFirst = false;\n    this.observables = [];\n    this.subscriptions = [];\n  }\n  _next(observable) {\n    this.observables.push(observable);\n  }\n  _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      for (let i = 0; i < len && !this.hasFirst; i++) {\n        const observable = observables[i];\n        const subscription = subscribeToResult(this, observable, undefined, i);\n        if (this.subscriptions) {\n          this.subscriptions.push(subscription);\n        }\n        this.add(subscription);\n      }\n      this.observables = null;\n    }\n  }\n  notifyNext(_outerValue, innerValue, outerIndex) {\n    if (!this.hasFirst) {\n      this.hasFirst = true;\n      for (let i = 0; i < this.subscriptions.length; i++) {\n        if (i !== outerIndex) {\n          let subscription = this.subscriptions[i];\n          subscription.unsubscribe();\n          this.remove(subscription);\n        }\n      }\n      this.subscriptions = null;\n    }\n    this.destination.next(innerValue);\n  }\n}","map":{"version":3,"names":["isArray","fromArray","OuterSubscriber","subscribeToResult","race","observables","length","undefined","lift","RaceOperator","call","subscriber","source","subscribe","RaceSubscriber","constructor","destination","hasFirst","subscriptions","_next","observable","push","_complete","len","complete","i","subscription","add","notifyNext","_outerValue","innerValue","outerIndex","unsubscribe","remove","next"],"sources":["C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\node_modules\\rxjs\\src\\internal\\observable\\race.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { fromArray } from './fromArray';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { TeardownLogic, ObservableInput } from '../types';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n// tslint:disable:max-line-length\nexport function race<A>(arg: [ObservableInput<A>]): Observable<A>;\nexport function race<A, B>(arg: [ObservableInput<A>, ObservableInput<B>]): Observable<A | B>;\nexport function race<A, B, C>(arg: [ObservableInput<A>, ObservableInput<B>, ObservableInput<C>]): Observable<A | B | C>;\nexport function race<A, B, C, D>(arg: [ObservableInput<A>, ObservableInput<B>, ObservableInput<C>, ObservableInput<D>]): Observable<A | B | C | D>;\nexport function race<A, B, C, D, E>(arg: [ObservableInput<A>, ObservableInput<B>, ObservableInput<C>, ObservableInput<D>, ObservableInput<E>]): Observable<A | B | C | D | E>;\nexport function race<T>(arg: ObservableInput<T>[]): Observable<T>;\nexport function race(arg: ObservableInput<any>[]): Observable<{}>;\n\nexport function race<A>(a: ObservableInput<A>): Observable<A>;\nexport function race<A, B>(a: ObservableInput<A>, b: ObservableInput<B>): Observable<A | B>;\nexport function race<A, B, C>(a: ObservableInput<A>, b: ObservableInput<B>, c: ObservableInput<C>): Observable<A | B | C>;\nexport function race<A, B, C, D>(a: ObservableInput<A>, b: ObservableInput<B>, c: ObservableInput<C>, d: ObservableInput<D>): Observable<A | B | C | D>;\nexport function race<A, B, C, D, E>(a: ObservableInput<A>, b: ObservableInput<B>, c: ObservableInput<C>, d: ObservableInput<D>, e: ObservableInput<E>): Observable<A | B | C | D | E>;\n// tslint:enable:max-line-length\n\nexport function race<T>(observables: ObservableInput<T>[]): Observable<T>;\nexport function race(observables: ObservableInput<any>[]): Observable<{}>;\nexport function race<T>(...observables: ObservableInput<T>[]): Observable<T>;\nexport function race(...observables: ObservableInput<any>[]): Observable<{}>;\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item.\n *\n * ## Example\n * ### Subscribes to the observable that was the first to start emitting.\n *\n * ```ts\n * import { race, interval } from 'rxjs';\n * import { mapTo } from 'rxjs/operators';\n *\n * const obs1 = interval(1000).pipe(mapTo('fast one'));\n * const obs2 = interval(3000).pipe(mapTo('medium one'));\n * const obs3 = interval(5000).pipe(mapTo('slow one'));\n *\n * race(obs3, obs1, obs2)\n * .subscribe(\n *   winner => console.log(winner)\n * );\n *\n * // result:\n * // a series of 'fast one'\n * ```\n *\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n * @static true\n * @name race\n * @owner Observable\n */\nexport function race<T>(...observables: ObservableInput<any>[]): Observable<T> {\n  // if the only argument is an array, it was most likely called with\n  // `race([obs1, obs2, ...])`\n  if (observables.length === 1) {\n    if (isArray(observables[0])) {\n      observables = observables[0] as Observable<any>[];\n    } else {\n      return observables[0] as Observable<T>;\n    }\n  }\n\n  return fromArray(observables, undefined).lift(new RaceOperator<T>());\n}\n\nexport class RaceOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RaceSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class RaceSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasFirst: boolean = false;\n  private observables: Observable<any>[] = [];\n  private subscriptions: Subscription[] = [];\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(observable: any): void {\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n\n    if (len === 0) {\n      this.destination.complete!();\n    } else {\n      for (let i = 0; i < len && !this.hasFirst; i++) {\n        const observable = observables[i];\n        const subscription = subscribeToResult(this, observable, undefined, i)!;\n\n        if (this.subscriptions) {\n          this.subscriptions.push(subscription);\n        }\n        this.add(subscription);\n      }\n      this.observables = null!;\n    }\n  }\n\n  notifyNext(_outerValue: T, innerValue: T,\n             outerIndex: number): void {\n    if (!this.hasFirst) {\n      this.hasFirst = true;\n\n      for (let i = 0; i < this.subscriptions.length; i++) {\n        if (i !== outerIndex) {\n          let subscription = this.subscriptions[i];\n\n          subscription.unsubscribe();\n          this.remove(subscription);\n        }\n      }\n\n      this.subscriptions = null!;\n    }\n\n    this.destination.next!(innerValue);\n  }\n}\n"],"mappings":"AACA,SAASA,OAAO,QAAQ,iBAAiB;AACzC,SAASC,SAAS,QAAQ,aAAa;AAKvC,SAASC,eAAe,QAAQ,oBAAoB;AAEpD,SAASC,iBAAiB,QAAQ,2BAA2B;AAoD7D,OAAM,SAAUC,IAAIA,CAAI,GAAGC,WAAmC;EAG5D,IAAIA,WAAW,CAACC,MAAM,KAAK,CAAC,EAAE;IAC5B,IAAIN,OAAO,CAACK,WAAW,CAAC,CAAC,CAAC,CAAC,EAAE;MAC3BA,WAAW,GAAGA,WAAW,CAAC,CAAC,CAAsB;KAClD,MAAM;MACL,OAAOA,WAAW,CAAC,CAAC,CAAkB;;;EAI1C,OAAOJ,SAAS,CAACI,WAAW,EAAEE,SAAS,CAAC,CAACC,IAAI,CAAC,IAAIC,YAAY,EAAK,CAAC;AACtE;AAEA,OAAM,MAAOA,YAAY;EACvBC,IAAIA,CAACC,UAAyB,EAAEC,MAAW;IACzC,OAAOA,MAAM,CAACC,SAAS,CAAC,IAAIC,cAAc,CAACH,UAAU,CAAC,CAAC;EACzD;;AAQF,OAAM,MAAOG,cAAkB,SAAQZ,eAAqB;EAK1Da,YAAYC,WAA0B;IACpC,KAAK,CAACA,WAAW,CAAC;IALZ,KAAAC,QAAQ,GAAY,KAAK;IACzB,KAAAZ,WAAW,GAAsB,EAAE;IACnC,KAAAa,aAAa,GAAmB,EAAE;EAI1C;EAEUC,KAAKA,CAACC,UAAe;IAC7B,IAAI,CAACf,WAAW,CAACgB,IAAI,CAACD,UAAU,CAAC;EACnC;EAEUE,SAASA,CAAA;IACjB,MAAMjB,WAAW,GAAG,IAAI,CAACA,WAAW;IACpC,MAAMkB,GAAG,GAAGlB,WAAW,CAACC,MAAM;IAE9B,IAAIiB,GAAG,KAAK,CAAC,EAAE;MACb,IAAI,CAACP,WAAW,CAACQ,QAAS,EAAE;KAC7B,MAAM;MACL,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,GAAG,IAAI,CAAC,IAAI,CAACN,QAAQ,EAAEQ,CAAC,EAAE,EAAE;QAC9C,MAAML,UAAU,GAAGf,WAAW,CAACoB,CAAC,CAAC;QACjC,MAAMC,YAAY,GAAGvB,iBAAiB,CAAC,IAAI,EAAEiB,UAAU,EAAEb,SAAS,EAAEkB,CAAC,CAAE;QAEvE,IAAI,IAAI,CAACP,aAAa,EAAE;UACtB,IAAI,CAACA,aAAa,CAACG,IAAI,CAACK,YAAY,CAAC;;QAEvC,IAAI,CAACC,GAAG,CAACD,YAAY,CAAC;;MAExB,IAAI,CAACrB,WAAW,GAAG,IAAK;;EAE5B;EAEAuB,UAAUA,CAACC,WAAc,EAAEC,UAAa,EAC7BC,UAAkB;IAC3B,IAAI,CAAC,IAAI,CAACd,QAAQ,EAAE;MAClB,IAAI,CAACA,QAAQ,GAAG,IAAI;MAEpB,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACP,aAAa,CAACZ,MAAM,EAAEmB,CAAC,EAAE,EAAE;QAClD,IAAIA,CAAC,KAAKM,UAAU,EAAE;UACpB,IAAIL,YAAY,GAAG,IAAI,CAACR,aAAa,CAACO,CAAC,CAAC;UAExCC,YAAY,CAACM,WAAW,EAAE;UAC1B,IAAI,CAACC,MAAM,CAACP,YAAY,CAAC;;;MAI7B,IAAI,CAACR,aAAa,GAAG,IAAK;;IAG5B,IAAI,CAACF,WAAW,CAACkB,IAAK,CAACJ,UAAU,CAAC;EACpC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}