{"ast":null,"code":"import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\nexport class Subscription {\n  constructor(unsubscribe) {\n    this.closed = false;\n    this._parentOrParents = null;\n    this._subscriptions = null;\n    if (unsubscribe) {\n      this._ctorUnsubscribe = true;\n      this._unsubscribe = unsubscribe;\n    }\n  }\n  unsubscribe() {\n    let errors;\n    if (this.closed) {\n      return;\n    }\n    let {\n      _parentOrParents,\n      _ctorUnsubscribe,\n      _unsubscribe,\n      _subscriptions\n    } = this;\n    this.closed = true;\n    this._parentOrParents = null;\n    this._subscriptions = null;\n    if (_parentOrParents instanceof Subscription) {\n      _parentOrParents.remove(this);\n    } else if (_parentOrParents !== null) {\n      for (let index = 0; index < _parentOrParents.length; ++index) {\n        const parent = _parentOrParents[index];\n        parent.remove(this);\n      }\n    }\n    if (isFunction(_unsubscribe)) {\n      if (_ctorUnsubscribe) {\n        this._unsubscribe = undefined;\n      }\n      try {\n        _unsubscribe.call(this);\n      } catch (e) {\n        errors = e instanceof UnsubscriptionError ? flattenUnsubscriptionErrors(e.errors) : [e];\n      }\n    }\n    if (isArray(_subscriptions)) {\n      let index = -1;\n      let len = _subscriptions.length;\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          try {\n            sub.unsubscribe();\n          } catch (e) {\n            errors = errors || [];\n            if (e instanceof UnsubscriptionError) {\n              errors = errors.concat(flattenUnsubscriptionErrors(e.errors));\n            } else {\n              errors.push(e);\n            }\n          }\n        }\n      }\n    }\n    if (errors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n  add(teardown) {\n    let subscription = teardown;\n    if (!teardown) {\n      return Subscription.EMPTY;\n    }\n    switch (typeof teardown) {\n      case 'function':\n        subscription = new Subscription(teardown);\n      case 'object':\n        if (subscription === this || subscription.closed || typeof subscription.unsubscribe !== 'function') {\n          return subscription;\n        } else if (this.closed) {\n          subscription.unsubscribe();\n          return subscription;\n        } else if (!(subscription instanceof Subscription)) {\n          const tmp = subscription;\n          subscription = new Subscription();\n          subscription._subscriptions = [tmp];\n        }\n        break;\n      default:\n        {\n          throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n        }\n    }\n    let {\n      _parentOrParents\n    } = subscription;\n    if (_parentOrParents === null) {\n      subscription._parentOrParents = this;\n    } else if (_parentOrParents instanceof Subscription) {\n      if (_parentOrParents === this) {\n        return subscription;\n      }\n      subscription._parentOrParents = [_parentOrParents, this];\n    } else if (_parentOrParents.indexOf(this) === -1) {\n      _parentOrParents.push(this);\n    } else {\n      return subscription;\n    }\n    const subscriptions = this._subscriptions;\n    if (subscriptions === null) {\n      this._subscriptions = [subscription];\n    } else {\n      subscriptions.push(subscription);\n    }\n    return subscription;\n  }\n  remove(subscription) {\n    const subscriptions = this._subscriptions;\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n}\nSubscription.EMPTY = function (empty) {\n  empty.closed = true;\n  return empty;\n}(new Subscription());\nfunction flattenUnsubscriptionErrors(errors) {\n  return errors.reduce((errs, err) => errs.concat(err instanceof UnsubscriptionError ? err.errors : err), []);\n}","map":{"version":3,"names":["isArray","isObject","isFunction","UnsubscriptionError","Subscription","constructor","unsubscribe","closed","_parentOrParents","_subscriptions","_ctorUnsubscribe","_unsubscribe","errors","remove","index","length","parent","undefined","call","e","flattenUnsubscriptionErrors","len","sub","concat","push","add","teardown","subscription","EMPTY","tmp","Error","indexOf","subscriptions","subscriptionIndex","splice","empty","reduce","errs","err"],"sources":["C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\node_modules\\rxjs\\src\\internal\\Subscription.ts"],"sourcesContent":["import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\nimport { SubscriptionLike, TeardownLogic } from './types';\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements SubscriptionLike {\n  /** @nocollapse */\n  public static EMPTY: Subscription = (function(empty: any) {\n    empty.closed = true;\n    return empty;\n  }(new Subscription()));\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   * @type {boolean}\n   */\n  public closed: boolean = false;\n\n  /** @internal */\n  protected _parentOrParents: Subscription | Subscription[] = null;\n  /** @internal */\n  private _subscriptions: SubscriptionLike[] = null;\n\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  constructor(unsubscribe?: () => void) {\n    if (unsubscribe) {\n      (this as any)._ctorUnsubscribe = true;\n      (this as any)._unsubscribe = unsubscribe;\n    }\n  }\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let errors: any[];\n\n    if (this.closed) {\n      return;\n    }\n\n    let { _parentOrParents, _ctorUnsubscribe, _unsubscribe, _subscriptions } = (this as any);\n\n    this.closed = true;\n    this._parentOrParents = null;\n    // null out _subscriptions first so any child subscriptions that attempt\n    // to remove themselves from this subscription will noop\n    this._subscriptions = null;\n\n    if (_parentOrParents instanceof Subscription) {\n      _parentOrParents.remove(this);\n    } else if (_parentOrParents !== null) {\n      for (let index = 0; index < _parentOrParents.length; ++index) {\n        const parent = _parentOrParents[index];\n        parent.remove(this);\n      }\n    }\n\n    if (isFunction(_unsubscribe)) {\n      // It's only possible to null _unsubscribe - to release the reference to\n      // any teardown function passed in the constructor - if the property was\n      // actually assigned in the constructor, as there are some classes that\n      // are derived from Subscriber (which derives from Subscription) that\n      // implement an _unsubscribe method as a mechanism for obtaining\n      // unsubscription notifications and some of those subscribers are\n      // recycled. Also, in some of those subscribers, _unsubscribe switches\n      // from a prototype method to an instance property - see notifyNext in\n      // RetryWhenSubscriber.\n      if (_ctorUnsubscribe) {\n        (this as any)._unsubscribe = undefined;\n      }\n      try {\n        _unsubscribe.call(this);\n      } catch (e) {\n        errors = e instanceof UnsubscriptionError ? flattenUnsubscriptionErrors(e.errors) : [e];\n      }\n    }\n\n    if (isArray(_subscriptions)) {\n      let index = -1;\n      let len = _subscriptions.length;\n\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          try {\n            sub.unsubscribe();\n          } catch (e) {\n            errors = errors || [];\n            if (e instanceof UnsubscriptionError) {\n              errors = errors.concat(flattenUnsubscriptionErrors(e.errors));\n            } else {\n              errors.push(e);\n            }\n          }\n        }\n      }\n    }\n\n    if (errors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription. Can also be used to add a child subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * When a parent subscription is unsubscribed, any child subscriptions that were added to it are also unsubscribed.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n  add(teardown: TeardownLogic): Subscription {\n    let subscription = (<Subscription>teardown);\n\n    if (!teardown) {\n      return Subscription.EMPTY;\n    }\n\n    switch (typeof teardown) {\n      case 'function':\n        subscription = new Subscription(<(() => void)>teardown);\n      case 'object':\n        if (subscription === this || subscription.closed || typeof subscription.unsubscribe !== 'function') {\n          // This also covers the case where `subscription` is `Subscription.EMPTY`, which is always in `closed` state.\n          return subscription;\n        } else if (this.closed) {\n          subscription.unsubscribe();\n          return subscription;\n        } else if (!(subscription instanceof Subscription)) {\n          const tmp = subscription;\n          subscription = new Subscription();\n          subscription._subscriptions = [tmp];\n        }\n        break;\n      default: {\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n      }\n    }\n\n    // Add `this` as parent of `subscription` if that's not already the case.\n    let { _parentOrParents } = subscription;\n    if (_parentOrParents === null) {\n      // If we don't have a parent, then set `subscription._parents` to\n      // the `this`, which is the common case that we optimize for.\n      subscription._parentOrParents = this;\n    } else if (_parentOrParents instanceof Subscription) {\n      if (_parentOrParents === this) {\n        // The `subscription` already has `this` as a parent.\n        return subscription;\n      }\n      // If there's already one parent, but not multiple, allocate an\n      // Array to store the rest of the parent Subscriptions.\n      subscription._parentOrParents = [_parentOrParents, this];\n    } else if (_parentOrParents.indexOf(this) === -1) {\n      // Only add `this` to the _parentOrParents list if it's not already there.\n      _parentOrParents.push(this);\n    } else {\n      // The `subscription` already has `this` as a parent.\n      return subscription;\n    }\n\n    // Optimize for the common case when adding the first subscription.\n    const subscriptions = this._subscriptions;\n    if (subscriptions === null) {\n      this._subscriptions = [subscription];\n    } else {\n      subscriptions.push(subscription);\n    }\n\n    return subscription;\n  }\n\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n  remove(subscription: Subscription): void {\n    const subscriptions = this._subscriptions;\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n}\n\nfunction flattenUnsubscriptionErrors(errors: any[]) {\n return errors.reduce((errs, err) => errs.concat((err instanceof UnsubscriptionError) ? err.errors : err), []);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}