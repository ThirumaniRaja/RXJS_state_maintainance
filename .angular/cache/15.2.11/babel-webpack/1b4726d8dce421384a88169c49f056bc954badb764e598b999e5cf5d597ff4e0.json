{"ast":null,"code":"import { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nexport function bufferToggle(openings, closingSelector) {\n  return function bufferToggleOperatorFunction(source) {\n    return source.lift(new BufferToggleOperator(openings, closingSelector));\n  };\n}\nclass BufferToggleOperator {\n  constructor(openings, closingSelector) {\n    this.openings = openings;\n    this.closingSelector = closingSelector;\n  }\n  call(subscriber, source) {\n    return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n  }\n}\nclass BufferToggleSubscriber extends OuterSubscriber {\n  constructor(destination, openings, closingSelector) {\n    super(destination);\n    this.closingSelector = closingSelector;\n    this.contexts = [];\n    this.add(subscribeToResult(this, openings));\n  }\n  _next(value) {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    for (let i = 0; i < len; i++) {\n      contexts[i].buffer.push(value);\n    }\n  }\n  _error(err) {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._error(err);\n  }\n  _complete() {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      this.destination.next(context.buffer);\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._complete();\n  }\n  notifyNext(outerValue, innerValue) {\n    outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n  }\n  notifyComplete(innerSub) {\n    this.closeBuffer(innerSub.context);\n  }\n  openBuffer(value) {\n    try {\n      const closingSelector = this.closingSelector;\n      const closingNotifier = closingSelector.call(this, value);\n      if (closingNotifier) {\n        this.trySubscribe(closingNotifier);\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n  closeBuffer(context) {\n    const contexts = this.contexts;\n    if (contexts && context) {\n      const {\n        buffer,\n        subscription\n      } = context;\n      this.destination.next(buffer);\n      contexts.splice(contexts.indexOf(context), 1);\n      this.remove(subscription);\n      subscription.unsubscribe();\n    }\n  }\n  trySubscribe(closingNotifier) {\n    const contexts = this.contexts;\n    const buffer = [];\n    const subscription = new Subscription();\n    const context = {\n      buffer,\n      subscription\n    };\n    contexts.push(context);\n    const innerSubscription = subscribeToResult(this, closingNotifier, context);\n    if (!innerSubscription || innerSubscription.closed) {\n      this.closeBuffer(context);\n    } else {\n      innerSubscription.context = context;\n      this.add(innerSubscription);\n      subscription.add(innerSubscription);\n    }\n  }\n}","map":{"version":3,"names":["Subscription","subscribeToResult","OuterSubscriber","bufferToggle","openings","closingSelector","bufferToggleOperatorFunction","source","lift","BufferToggleOperator","constructor","call","subscriber","subscribe","BufferToggleSubscriber","destination","contexts","add","_next","value","len","length","i","buffer","push","_error","err","context","shift","subscription","unsubscribe","_complete","next","notifyNext","outerValue","innerValue","closeBuffer","openBuffer","notifyComplete","innerSub","closingNotifier","trySubscribe","splice","indexOf","remove","innerSubscription","closed"],"sources":["C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\node_modules\\rxjs\\src\\internal\\operators\\bufferToggle.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction, SubscribableOrPromise } from '../types';\n\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * ![](bufferToggle.png)\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * ## Example\n *\n * Every other second, emit the click events from the next 500ms\n *\n * ```ts\n * import { fromEvent, interval, EMPTY } from 'rxjs';\n * import { bufferToggle } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const openings = interval(1000);\n * const buffered = clicks.pipe(bufferToggle(openings, i =>\n *   i % 2 ? interval(500) : EMPTY\n * ));\n * buffered.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nexport function bufferToggle<T, O>(\n  openings: SubscribableOrPromise<O>,\n  closingSelector: (value: O) => SubscribableOrPromise<any>\n): OperatorFunction<T, T[]> {\n  return function bufferToggleOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferToggleOperator<T, O>(openings, closingSelector));\n  };\n}\n\nclass BufferToggleOperator<T, O> implements Operator<T, T[]> {\n\n  constructor(private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n  }\n}\n\ninterface BufferContext<T> {\n  buffer: T[];\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferToggleSubscriber<T, O> extends OuterSubscriber<T, O> {\n  private contexts: Array<BufferContext<T>> = [];\n\n  constructor(destination: Subscriber<T[]>,\n              openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any> | void) {\n    super(destination);\n    this.add(subscribeToResult(this, openings));\n  }\n\n  protected _next(value: T): void {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    for (let i = 0; i < len; i++) {\n      contexts[i].buffer.push(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift()!;\n      context.subscription.unsubscribe();\n      context.buffer = null!;\n      context.subscription = null!;\n    }\n    this.contexts = null!;\n    super._error(err);\n  }\n\n  protected _complete(): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift()!;\n      this.destination.next!(context.buffer);\n      context.subscription.unsubscribe();\n      context.buffer = null!;\n      context.subscription = null!;\n    }\n    this.contexts = null!;\n    super._complete();\n  }\n\n  notifyNext(outerValue: any, innerValue: O): void {\n    outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, O>): void {\n    this.closeBuffer((<any> innerSub).context);\n  }\n\n  private openBuffer(value: O): void {\n    try {\n      const closingSelector = this.closingSelector;\n      const closingNotifier = closingSelector.call(this, value);\n      if (closingNotifier) {\n        this.trySubscribe(closingNotifier);\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private closeBuffer(context: BufferContext<T>): void {\n    const contexts = this.contexts;\n\n    if (contexts && context) {\n      const { buffer, subscription } = context;\n      this.destination.next!(buffer);\n      contexts.splice(contexts.indexOf(context), 1);\n      this.remove(subscription);\n      subscription.unsubscribe();\n    }\n  }\n\n  private trySubscribe(closingNotifier: any): void {\n    const contexts = this.contexts;\n\n    const buffer: Array<T> = [];\n    const subscription = new Subscription();\n    const context = { buffer, subscription };\n    contexts.push(context);\n\n    const innerSubscription = subscribeToResult(this, closingNotifier, context as any);\n\n    if (!innerSubscription || innerSubscription.closed) {\n      this.closeBuffer(context);\n    } else {\n      (innerSubscription as any).context = context;\n\n      this.add(innerSubscription);\n      subscription.add(innerSubscription);\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}