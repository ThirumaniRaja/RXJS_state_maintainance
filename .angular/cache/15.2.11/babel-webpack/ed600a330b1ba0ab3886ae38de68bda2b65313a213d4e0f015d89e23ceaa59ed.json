{"ast":null,"code":"import { Subscriber } from '../Subscriber';\nexport function filter(predicate, thisArg) {\n  return function filterOperatorFunction(source) {\n    return source.lift(new FilterOperator(predicate, thisArg));\n  };\n}\nclass FilterOperator {\n  constructor(predicate, thisArg) {\n    this.predicate = predicate;\n    this.thisArg = thisArg;\n  }\n  call(subscriber, source) {\n    return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n  }\n}\nclass FilterSubscriber extends Subscriber {\n  constructor(destination, predicate, thisArg) {\n    super(destination);\n    this.predicate = predicate;\n    this.thisArg = thisArg;\n    this.count = 0;\n  }\n  _next(value) {\n    let result;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this.destination.next(value);\n    }\n  }\n}","map":{"version":3,"names":["Subscriber","filter","predicate","thisArg","filterOperatorFunction","source","lift","FilterOperator","constructor","call","subscriber","subscribe","FilterSubscriber","destination","count","_next","value","result","err","error","next"],"sources":["C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\node_modules\\rxjs\\src\\internal\\operators\\filter.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction, MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function filter<T, S extends T>(predicate: (value: T, index: number) => value is S,\n                                       thisArg?: any): OperatorFunction<T, S>;\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * ![](filter.png)\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * ## Example\n * Emit only click events whose target was a DIV element\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { filter } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const clicksOnDivs = clicks.pipe(filter(ev => ev.target.tagName === 'DIV'));\n * clicksOnDivs.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): MonoTypeOperatorFunction<T> {\n  return function filterOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new FilterOperator(predicate, thisArg));\n  };\n}\n\nclass FilterOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean,\n              private thisArg?: any) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FilterSubscriber<T> extends Subscriber<T> {\n\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean,\n              private thisArg: any) {\n    super(destination);\n  }\n\n  // the try catch block below is left specifically for\n  // optimization and perf reasons. a tryCatcher is not necessary here.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this.destination.next(value);\n    }\n  }\n}\n"],"mappings":"AACA,SAASA,UAAU,QAAQ,eAAe;AAwD1C,OAAM,SAAUC,MAAMA,CAAIC,SAA+C,EAC/CC,OAAa;EACrC,OAAO,SAASC,sBAAsBA,CAACC,MAAqB;IAC1D,OAAOA,MAAM,CAACC,IAAI,CAAC,IAAIC,cAAc,CAACL,SAAS,EAAEC,OAAO,CAAC,CAAC;EAC5D,CAAC;AACH;AAEA,MAAMI,cAAc;EAClBC,YAAoBN,SAA+C,EAC/CC,OAAa;IADb,KAAAD,SAAS,GAATA,SAAS;IACT,KAAAC,OAAO,GAAPA,OAAO;EAC3B;EAEAM,IAAIA,CAACC,UAAyB,EAAEL,MAAW;IACzC,OAAOA,MAAM,CAACM,SAAS,CAAC,IAAIC,gBAAgB,CAACF,UAAU,EAAE,IAAI,CAACR,SAAS,EAAE,IAAI,CAACC,OAAO,CAAC,CAAC;EACzF;;AAQF,MAAMS,gBAAoB,SAAQZ,UAAa;EAI7CQ,YAAYK,WAA0B,EAClBX,SAA+C,EAC/CC,OAAY;IAC9B,KAAK,CAACU,WAAW,CAAC;IAFA,KAAAX,SAAS,GAATA,SAAS;IACT,KAAAC,OAAO,GAAPA,OAAO;IAJ3B,KAAAW,KAAK,GAAW,CAAC;EAMjB;EAIUC,KAAKA,CAACC,KAAQ;IACtB,IAAIC,MAAW;IACf,IAAI;MACFA,MAAM,GAAG,IAAI,CAACf,SAAS,CAACO,IAAI,CAAC,IAAI,CAACN,OAAO,EAAEa,KAAK,EAAE,IAAI,CAACF,KAAK,EAAE,CAAC;KAChE,CAAC,OAAOI,GAAG,EAAE;MACZ,IAAI,CAACL,WAAW,CAACM,KAAK,CAACD,GAAG,CAAC;MAC3B;;IAEF,IAAID,MAAM,EAAE;MACV,IAAI,CAACJ,WAAW,CAACO,IAAI,CAACJ,KAAK,CAAC;;EAEhC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}