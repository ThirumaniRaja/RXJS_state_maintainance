{"ast":null,"code":"import { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nexport function groupBy(keySelector, elementSelector, durationSelector, subjectSelector) {\n  return source => source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\n}\nclass GroupByOperator {\n  constructor(keySelector, elementSelector, durationSelector, subjectSelector) {\n    this.keySelector = keySelector;\n    this.elementSelector = elementSelector;\n    this.durationSelector = durationSelector;\n    this.subjectSelector = subjectSelector;\n  }\n  call(subscriber, source) {\n    return source.subscribe(new GroupBySubscriber(subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector));\n  }\n}\nclass GroupBySubscriber extends Subscriber {\n  constructor(destination, keySelector, elementSelector, durationSelector, subjectSelector) {\n    super(destination);\n    this.keySelector = keySelector;\n    this.elementSelector = elementSelector;\n    this.durationSelector = durationSelector;\n    this.subjectSelector = subjectSelector;\n    this.groups = null;\n    this.attemptedToUnsubscribe = false;\n    this.count = 0;\n  }\n  _next(value) {\n    let key;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      this.error(err);\n      return;\n    }\n    this._group(value, key);\n  }\n  _group(value, key) {\n    let groups = this.groups;\n    if (!groups) {\n      groups = this.groups = new Map();\n    }\n    let group = groups.get(key);\n    let element;\n    if (this.elementSelector) {\n      try {\n        element = this.elementSelector(value);\n      } catch (err) {\n        this.error(err);\n      }\n    } else {\n      element = value;\n    }\n    if (!group) {\n      group = this.subjectSelector ? this.subjectSelector() : new Subject();\n      groups.set(key, group);\n      const groupedObservable = new GroupedObservable(key, group, this);\n      this.destination.next(groupedObservable);\n      if (this.durationSelector) {\n        let duration;\n        try {\n          duration = this.durationSelector(new GroupedObservable(key, group));\n        } catch (err) {\n          this.error(err);\n          return;\n        }\n        this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n      }\n    }\n    if (!group.closed) {\n      group.next(element);\n    }\n  }\n  _error(err) {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.error(err);\n      });\n      groups.clear();\n    }\n    this.destination.error(err);\n  }\n  _complete() {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.complete();\n      });\n      groups.clear();\n    }\n    this.destination.complete();\n  }\n  removeGroup(key) {\n    this.groups.delete(key);\n  }\n  unsubscribe() {\n    if (!this.closed) {\n      this.attemptedToUnsubscribe = true;\n      if (this.count === 0) {\n        super.unsubscribe();\n      }\n    }\n  }\n}\nclass GroupDurationSubscriber extends Subscriber {\n  constructor(key, group, parent) {\n    super(group);\n    this.key = key;\n    this.group = group;\n    this.parent = parent;\n  }\n  _next(value) {\n    this.complete();\n  }\n  _unsubscribe() {\n    const {\n      parent,\n      key\n    } = this;\n    this.key = this.parent = null;\n    if (parent) {\n      parent.removeGroup(key);\n    }\n  }\n}\nexport class GroupedObservable extends Observable {\n  constructor(key, groupSubject, refCountSubscription) {\n    super();\n    this.key = key;\n    this.groupSubject = groupSubject;\n    this.refCountSubscription = refCountSubscription;\n  }\n  _subscribe(subscriber) {\n    const subscription = new Subscription();\n    const {\n      refCountSubscription,\n      groupSubject\n    } = this;\n    if (refCountSubscription && !refCountSubscription.closed) {\n      subscription.add(new InnerRefCountSubscription(refCountSubscription));\n    }\n    subscription.add(groupSubject.subscribe(subscriber));\n    return subscription;\n  }\n}\nclass InnerRefCountSubscription extends Subscription {\n  constructor(parent) {\n    super();\n    this.parent = parent;\n    parent.count++;\n  }\n  unsubscribe() {\n    const parent = this.parent;\n    if (!parent.closed && !this.closed) {\n      super.unsubscribe();\n      parent.count -= 1;\n      if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n        parent.unsubscribe();\n      }\n    }\n  }\n}","map":{"version":3,"names":["Subscriber","Subscription","Observable","Subject","groupBy","keySelector","elementSelector","durationSelector","subjectSelector","source","lift","GroupByOperator","constructor","call","subscriber","subscribe","GroupBySubscriber","destination","groups","attemptedToUnsubscribe","count","_next","value","key","err","error","_group","Map","group","get","element","set","groupedObservable","GroupedObservable","next","duration","add","GroupDurationSubscriber","closed","_error","forEach","clear","_complete","complete","removeGroup","delete","unsubscribe","parent","_unsubscribe","groupSubject","refCountSubscription","_subscribe","subscription","InnerRefCountSubscription"],"sources":["C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\node_modules\\rxjs\\src\\internal\\operators\\groupBy.ts"],"sourcesContent":["import { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subject } from '../Subject';\nimport { OperatorFunction } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function groupBy<T, K>(keySelector: (value: T) => K): OperatorFunction<T, GroupedObservable<K, T>>;\nexport function groupBy<T, K>(keySelector: (value: T) => K, elementSelector: void, durationSelector: (grouped: GroupedObservable<K, T>) => Observable<any>): OperatorFunction<T, GroupedObservable<K, T>>;\nexport function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): OperatorFunction<T, GroupedObservable<K, R>>;\nexport function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>, subjectSelector?: () => Subject<R>): OperatorFunction<T, GroupedObservable<K, R>>;\n/* tslint:enable:max-line-length */\n\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * ![](groupBy.png)\n *\n * When the Observable emits an item, a key is computed for this item with the keySelector function.\n *\n * If a {@link GroupedObservable} for this key exists, this {@link GroupedObservable} emits. Elsewhere, a new\n * {@link GroupedObservable} for this key is created and emits.\n *\n * A {@link GroupedObservable} represents values belonging to the same group represented by a common key. The common\n * key is available as the key field of a {@link GroupedObservable} instance.\n *\n * The elements emitted by {@link GroupedObservable}s are by default the items emitted by the Observable, or elements\n * returned by the elementSelector function.\n *\n * ## Examples\n *\n * ### Group objects by id and return as array\n *\n * ```ts\n * import { of } from 'rxjs';\n * import { mergeMap, groupBy, reduce } from 'rxjs/operators';\n *\n * of(\n *   {id: 1, name: 'JavaScript'},\n *   {id: 2, name: 'Parcel'},\n *   {id: 2, name: 'webpack'},\n *   {id: 1, name: 'TypeScript'},\n *   {id: 3, name: 'TSLint'}\n * ).pipe(\n *   groupBy(p => p.id),\n *   mergeMap((group$) => group$.pipe(reduce((acc, cur) => [...acc, cur], []))),\n * )\n * .subscribe(p => console.log(p));\n *\n * // displays:\n * // [ { id: 1, name: 'JavaScript'},\n * //   { id: 1, name: 'TypeScript'} ]\n * //\n * // [ { id: 2, name: 'Parcel'},\n * //   { id: 2, name: 'webpack'} ]\n * //\n * // [ { id: 3, name: 'TSLint'} ]\n * ```\n *\n * ### Pivot data on the id field\n *\n * ```ts\n * import { of } from 'rxjs';\n * import { groupBy, map, mergeMap, reduce } from 'rxjs/operators';\n *\n * of(\n *   { id: 1, name: 'JavaScript' },\n *   { id: 2, name: 'Parcel' },\n *   { id: 2, name: 'webpack' },\n *   { id: 1, name: 'TypeScript' },\n *   { id: 3, name: 'TSLint' }\n * )\n *   .pipe(\n *     groupBy(p => p.id, p => p.name),\n *     mergeMap(group$ =>\n *       group$.pipe(reduce((acc, cur) => [...acc, cur], [`${group$.key}`]))\n *     ),\n *     map(arr => ({ id: parseInt(arr[0], 10), values: arr.slice(1) }))\n *  )\n *  .subscribe(p => console.log(p));\n *\n * // displays:\n * // { id: 1, values: [ 'JavaScript', 'TypeScript' ] }\n * // { id: 2, values: [ 'Parcel', 'webpack' ] }\n * // { id: 3, values: [ 'TSLint' ] }\n * ```\n *\n * @param {function(value: T): K} keySelector A function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] A function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * A function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} An Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nexport function groupBy<T, K, R>(keySelector: (value: T) => K,\n                                 elementSelector?: ((value: T) => R) | void,\n                                 durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n                                 subjectSelector?: () => Subject<R>): OperatorFunction<T, GroupedObservable<K, R>> {\n  return (source: Observable<T>) =>\n    source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\n}\n\nexport interface RefCountSubscription {\n  count: number;\n  unsubscribe: () => void;\n  closed: boolean;\n  attemptedToUnsubscribe: boolean;\n}\n\nclass GroupByOperator<T, K, R> implements Operator<T, GroupedObservable<K, R>> {\n  constructor(private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n  }\n\n  call(subscriber: Subscriber<GroupedObservable<K, R>>, source: any): any {\n    return source.subscribe(new GroupBySubscriber(\n      subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupBySubscriber<T, K, R> extends Subscriber<T> implements RefCountSubscription {\n  private groups: Map<K, Subject<T | R>> = null;\n  public attemptedToUnsubscribe: boolean = false;\n  public count: number = 0;\n\n  constructor(destination: Subscriber<GroupedObservable<K, R>>,\n              private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    let key: K;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      this.error(err);\n      return;\n    }\n\n    this._group(value, key);\n  }\n\n  private _group(value: T, key: K) {\n    let groups = this.groups;\n\n    if (!groups) {\n      groups = this.groups = new Map<K, Subject<T | R>>();\n    }\n\n    let group = groups.get(key);\n\n    let element: R;\n    if (this.elementSelector) {\n      try {\n        element = this.elementSelector(value);\n      } catch (err) {\n        this.error(err);\n      }\n    } else {\n      element = <any>value;\n    }\n\n    if (!group) {\n      group = (this.subjectSelector ? this.subjectSelector() : new Subject<R>()) as Subject<T | R>;\n      groups.set(key, group);\n      const groupedObservable = new GroupedObservable(key, group, this);\n      this.destination.next(groupedObservable);\n      if (this.durationSelector) {\n        let duration: any;\n        try {\n          duration = this.durationSelector(new GroupedObservable<K, R>(key, <Subject<R>>group));\n        } catch (err) {\n          this.error(err);\n          return;\n        }\n        this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n      }\n    }\n\n    if (!group.closed) {\n      group.next(element);\n    }\n  }\n\n  protected _error(err: any): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.error(err);\n      });\n\n      groups.clear();\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.complete();\n      });\n\n      groups.clear();\n    }\n    this.destination.complete();\n  }\n\n  removeGroup(key: K): void {\n    this.groups.delete(key);\n  }\n\n  unsubscribe() {\n    if (!this.closed) {\n      this.attemptedToUnsubscribe = true;\n      if (this.count === 0) {\n        super.unsubscribe();\n      }\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupDurationSubscriber<K, T> extends Subscriber<T> {\n  constructor(private key: K,\n              private group: Subject<T>,\n              private parent: GroupBySubscriber<any, K, T | any>) {\n    super(group);\n  }\n\n  protected _next(value: T): void {\n    this.complete();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribe() {\n    const { parent, key } = this;\n    this.key = this.parent = null;\n    if (parent) {\n      parent.removeGroup(key);\n    }\n  }\n}\n\n/**\n * An Observable representing values belonging to the same group represented by\n * a common key. The values emitted by a GroupedObservable come from the source\n * Observable. The common key is available as the field `key` on a\n * GroupedObservable instance.\n *\n * @class GroupedObservable<K, T>\n */\nexport class GroupedObservable<K, T> extends Observable<T> {\n  /** @deprecated Do not construct this type. Internal use only */\n  constructor(public key: K,\n              private groupSubject: Subject<T>,\n              private refCountSubscription?: RefCountSubscription) {\n    super();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>) {\n    const subscription = new Subscription();\n    const { refCountSubscription, groupSubject } = this;\n    if (refCountSubscription && !refCountSubscription.closed) {\n      subscription.add(new InnerRefCountSubscription(refCountSubscription));\n    }\n    subscription.add(groupSubject.subscribe(subscriber));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass InnerRefCountSubscription extends Subscription {\n  constructor(private parent: RefCountSubscription) {\n    super();\n    parent.count++;\n  }\n\n  unsubscribe() {\n    const parent = this.parent;\n    if (!parent.closed && !this.closed) {\n      super.unsubscribe();\n      parent.count -= 1;\n      if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n        parent.unsubscribe();\n      }\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}