{"ast":null,"code":"import { isFunction } from './util/isFunction';\nimport { empty as emptyObserver } from './Observer';\nimport { Subscription } from './Subscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\nexport class Subscriber extends Subscription {\n  constructor(destinationOrNext, error, complete) {\n    super();\n    this.syncErrorValue = null;\n    this.syncErrorThrown = false;\n    this.syncErrorThrowable = false;\n    this.isStopped = false;\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          if (destinationOrNext instanceof Subscriber) {\n            this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;\n            this.destination = destinationOrNext;\n            destinationOrNext.add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber(this, destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);\n        break;\n    }\n  }\n  [rxSubscriberSymbol]() {\n    return this;\n  }\n  static create(next, error, complete) {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n  next(value) {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n  error(err) {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n  complete() {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n  unsubscribe() {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n  _next(value) {\n    this.destination.next(value);\n  }\n  _error(err) {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n  _complete() {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n  _unsubscribeAndRecycle() {\n    const {\n      _parentOrParents\n    } = this;\n    this._parentOrParents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parentOrParents = _parentOrParents;\n    return this;\n  }\n}\nexport class SafeSubscriber extends Subscriber {\n  constructor(_parentSubscriber, observerOrNext, error, complete) {\n    super();\n    this._parentSubscriber = _parentSubscriber;\n    let next;\n    let context = this;\n    if (isFunction(observerOrNext)) {\n      next = observerOrNext;\n    } else if (observerOrNext) {\n      next = observerOrNext.next;\n      error = observerOrNext.error;\n      complete = observerOrNext.complete;\n      if (observerOrNext !== emptyObserver) {\n        context = Object.create(observerOrNext);\n        if (isFunction(context.unsubscribe)) {\n          this.add(context.unsubscribe.bind(context));\n        }\n        context.unsubscribe = this.unsubscribe.bind(this);\n      }\n    }\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n  next(value) {\n    if (!this.isStopped && this._next) {\n      const {\n        _parentSubscriber\n      } = this;\n      if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n  error(err) {\n    if (!this.isStopped) {\n      const {\n        _parentSubscriber\n      } = this;\n      const {\n        useDeprecatedSynchronousErrorHandling\n      } = config;\n      if (this._error) {\n        if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n        if (useDeprecatedSynchronousErrorHandling) {\n          throw err;\n        }\n        hostReportError(err);\n      } else {\n        if (useDeprecatedSynchronousErrorHandling) {\n          _parentSubscriber.syncErrorValue = err;\n          _parentSubscriber.syncErrorThrown = true;\n        } else {\n          hostReportError(err);\n        }\n        this.unsubscribe();\n      }\n    }\n  }\n  complete() {\n    if (!this.isStopped) {\n      const {\n        _parentSubscriber\n      } = this;\n      if (this._complete) {\n        const wrappedComplete = () => this._complete.call(this._context);\n        if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(wrappedComplete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n  __tryOrUnsub(fn, value) {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        throw err;\n      } else {\n        hostReportError(err);\n      }\n    }\n  }\n  __tryOrSetError(parent, fn, value) {\n    if (!config.useDeprecatedSynchronousErrorHandling) {\n      throw new Error('bad call');\n    }\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        parent.syncErrorValue = err;\n        parent.syncErrorThrown = true;\n        return true;\n      } else {\n        hostReportError(err);\n        return true;\n      }\n    }\n    return false;\n  }\n  _unsubscribe() {\n    const {\n      _parentSubscriber\n    } = this;\n    this._context = null;\n    this._parentSubscriber = null;\n    _parentSubscriber.unsubscribe();\n  }\n}","map":{"version":3,"names":["isFunction","empty","emptyObserver","Subscription","rxSubscriber","rxSubscriberSymbol","config","hostReportError","Subscriber","constructor","destinationOrNext","error","complete","syncErrorValue","syncErrorThrown","syncErrorThrowable","isStopped","arguments","length","destination","add","SafeSubscriber","create","next","subscriber","value","_next","err","_error","_complete","unsubscribe","closed","_unsubscribeAndRecycle","_parentOrParents","_parentSubscriber","observerOrNext","context","Object","bind","_context","useDeprecatedSynchronousErrorHandling","__tryOrUnsub","__tryOrSetError","wrappedComplete","call","fn","parent","Error","_unsubscribe"],"sources":["C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\node_modules\\rxjs\\src\\internal\\Subscriber.ts"],"sourcesContent":["import { isFunction } from './util/isFunction';\nimport { empty as emptyObserver } from './Observer';\nimport { Observer, PartialObserver, TeardownLogic } from './types';\nimport { Subscription } from './Subscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [rxSubscriberSymbol]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   * @nocollapse\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  /** @internal */ syncErrorValue: any = null;\n  /** @internal */ syncErrorThrown: boolean = false;\n  /** @internal */ syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any> | Subscriber<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          if (destinationOrNext instanceof Subscriber) {\n            this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;\n            this.destination = destinationOrNext;\n            destinationOrNext.add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached `Error`. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribeAndRecycle(): Subscriber<T> {\n    const {  _parentOrParents } = this;\n    this._parentOrParents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parentOrParents = _parentOrParents;\n    return this;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parentSubscriber: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (observerOrNext !== emptyObserver) {\n        context = Object.create(observerOrNext);\n        if (isFunction(context.unsubscribe)) {\n          this.add(<() => void> context.unsubscribe.bind(context));\n        }\n        context.unsubscribe = this.unsubscribe.bind(this);\n      }\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parentSubscriber } = this;\n      if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      const { useDeprecatedSynchronousErrorHandling } = config;\n      if (this._error) {\n        if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n        if (useDeprecatedSynchronousErrorHandling) {\n          throw err;\n        }\n        hostReportError(err);\n      } else {\n        if (useDeprecatedSynchronousErrorHandling) {\n          _parentSubscriber.syncErrorValue = err;\n          _parentSubscriber.syncErrorThrown = true;\n        } else {\n          hostReportError(err);\n        }\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._complete) {\n        const wrappedComplete = () => this._complete.call(this._context);\n\n        if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(wrappedComplete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        throw err;\n      } else {\n        hostReportError(err);\n      }\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    if (!config.useDeprecatedSynchronousErrorHandling) {\n      throw new Error('bad call');\n    }\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        parent.syncErrorValue = err;\n        parent.syncErrorThrown = true;\n        return true;\n      } else {\n        hostReportError(err);\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /** @internal This is an internal implementation detail, do not use. */\n  _unsubscribe(): void {\n    const { _parentSubscriber } = this;\n    this._context = null;\n    this._parentSubscriber = null;\n    _parentSubscriber.unsubscribe();\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}