{"ast":null,"code":"import { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function sample(notifier) {\n  return source => source.lift(new SampleOperator(notifier));\n}\nclass SampleOperator {\n  constructor(notifier) {\n    this.notifier = notifier;\n  }\n  call(subscriber, source) {\n    const sampleSubscriber = new SampleSubscriber(subscriber);\n    const subscription = source.subscribe(sampleSubscriber);\n    subscription.add(innerSubscribe(this.notifier, new SimpleInnerSubscriber(sampleSubscriber)));\n    return subscription;\n  }\n}\nclass SampleSubscriber extends SimpleOuterSubscriber {\n  constructor() {\n    super(...arguments);\n    this.hasValue = false;\n  }\n  _next(value) {\n    this.value = value;\n    this.hasValue = true;\n  }\n  notifyNext() {\n    this.emitValue();\n  }\n  notifyComplete() {\n    this.emitValue();\n  }\n  emitValue() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.value);\n    }\n  }\n}","map":{"version":3,"names":["SimpleOuterSubscriber","innerSubscribe","SimpleInnerSubscriber","sample","notifier","source","lift","SampleOperator","constructor","call","subscriber","sampleSubscriber","SampleSubscriber","subscription","subscribe","add","hasValue","_next","value","notifyNext","emitValue","notifyComplete","destination","next"],"sources":["C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\node_modules\\rxjs\\src\\internal\\operators\\sample.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\n\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\n\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * ![](sample.png)\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * ## Example\n * On every click, sample the most recent \"seconds\" timer\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { sample } from 'rxjs/operators';\n *\n * const seconds = interval(1000);\n * const clicks = fromEvent(document, 'click');\n * const result = seconds.pipe(sample(clicks));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nexport function sample<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SampleOperator(notifier));\n}\n\nclass SampleOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    const sampleSubscriber = new SampleSubscriber(subscriber);\n    const subscription = source.subscribe(sampleSubscriber);\n    subscription.add(innerSubscribe(this.notifier, new SimpleInnerSubscriber(sampleSubscriber)));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleSubscriber<T, R> extends SimpleOuterSubscriber<T, R> {\n  private value?: T;\n  private hasValue: boolean = false;\n\n  protected _next(value: T) {\n    this.value = value;\n    this.hasValue = true;\n  }\n\n  notifyNext(): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next!(this.value!);\n    }\n  }\n}\n"],"mappings":"AAKA,SAASA,qBAAqB,EAAEC,cAAc,EAAEC,qBAAqB,QAAQ,mBAAmB;AA0ChG,OAAM,SAAUC,MAAMA,CAAIC,QAAyB;EACjD,OAAQC,MAAqB,IAAKA,MAAM,CAACC,IAAI,CAAC,IAAIC,cAAc,CAACH,QAAQ,CAAC,CAAC;AAC7E;AAEA,MAAMG,cAAc;EAClBC,YAAoBJ,QAAyB;IAAzB,KAAAA,QAAQ,GAARA,QAAQ;EAC5B;EAEAK,IAAIA,CAACC,UAAyB,EAAEL,MAAW;IACzC,MAAMM,gBAAgB,GAAG,IAAIC,gBAAgB,CAACF,UAAU,CAAC;IACzD,MAAMG,YAAY,GAAGR,MAAM,CAACS,SAAS,CAACH,gBAAgB,CAAC;IACvDE,YAAY,CAACE,GAAG,CAACd,cAAc,CAAC,IAAI,CAACG,QAAQ,EAAE,IAAIF,qBAAqB,CAACS,gBAAgB,CAAC,CAAC,CAAC;IAC5F,OAAOE,YAAY;EACrB;;AAQF,MAAMD,gBAAuB,SAAQZ,qBAA2B;EAAhEQ,YAAA;;IAEU,KAAAQ,QAAQ,GAAY,KAAK;EAqBnC;EAnBYC,KAAKA,CAACC,KAAQ;IACtB,IAAI,CAACA,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACF,QAAQ,GAAG,IAAI;EACtB;EAEAG,UAAUA,CAAA;IACR,IAAI,CAACC,SAAS,EAAE;EAClB;EAEAC,cAAcA,CAAA;IACZ,IAAI,CAACD,SAAS,EAAE;EAClB;EAEAA,SAASA,CAAA;IACP,IAAI,IAAI,CAACJ,QAAQ,EAAE;MACjB,IAAI,CAACA,QAAQ,GAAG,KAAK;MACrB,IAAI,CAACM,WAAW,CAACC,IAAK,CAAC,IAAI,CAACL,KAAM,CAAC;;EAEvC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}