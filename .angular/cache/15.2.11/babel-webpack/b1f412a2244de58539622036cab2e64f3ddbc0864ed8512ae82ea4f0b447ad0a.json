{"ast":null,"code":"import { EmptyError } from '../util/EmptyError';\nimport { Subscriber } from '../Subscriber';\nexport function throwIfEmpty(errorFactory = defaultErrorFactory) {\n  return source => {\n    return source.lift(new ThrowIfEmptyOperator(errorFactory));\n  };\n}\nclass ThrowIfEmptyOperator {\n  constructor(errorFactory) {\n    this.errorFactory = errorFactory;\n  }\n  call(subscriber, source) {\n    return source.subscribe(new ThrowIfEmptySubscriber(subscriber, this.errorFactory));\n  }\n}\nclass ThrowIfEmptySubscriber extends Subscriber {\n  constructor(destination, errorFactory) {\n    super(destination);\n    this.errorFactory = errorFactory;\n    this.hasValue = false;\n  }\n  _next(value) {\n    this.hasValue = true;\n    this.destination.next(value);\n  }\n  _complete() {\n    if (!this.hasValue) {\n      let err;\n      try {\n        err = this.errorFactory();\n      } catch (e) {\n        err = e;\n      }\n      this.destination.error(err);\n    } else {\n      return this.destination.complete();\n    }\n  }\n}\nfunction defaultErrorFactory() {\n  return new EmptyError();\n}","map":{"version":3,"names":["EmptyError","Subscriber","throwIfEmpty","errorFactory","defaultErrorFactory","source","lift","ThrowIfEmptyOperator","constructor","call","subscriber","subscribe","ThrowIfEmptySubscriber","destination","hasValue","_next","value","next","_complete","err","e","error","complete"],"sources":["C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\node_modules\\rxjs\\src\\internal\\operators\\throwIfEmpty.ts"],"sourcesContent":["import { EmptyError } from '../util/EmptyError';\nimport { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic, MonoTypeOperatorFunction } from '../types';\n\n/**\n * If the source observable completes without emitting a value, it will emit\n * an error. The error will be created at that time by the optional\n * `errorFactory` argument, otherwise, the error will be {@link EmptyError}.\n *\n * ![](throwIfEmpty.png)\n *\n * ## Example\n * ```ts\n * import { fromEvent, timer } from 'rxjs';\n * import { throwIfEmpty, takeUntil } from 'rxjs/operators';\n *\n * const click$ = fromEvent(document, 'click');\n *\n * click$.pipe(\n *   takeUntil(timer(1000)),\n *   throwIfEmpty(\n *     () => new Error('the document was not clicked within 1 second')\n *   ),\n * )\n * .subscribe({\n *   next() { console.log('The button was clicked'); },\n *   error(err) { console.error(err); }\n * });\n * ```\n *\n * @param errorFactory A factory function called to produce the\n * error to be thrown when the source observable completes without emitting a\n * value.\n */\nexport function throwIfEmpty <T>(errorFactory: (() => any) = defaultErrorFactory): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    return source.lift(new ThrowIfEmptyOperator(errorFactory));\n  };\n}\n\nclass ThrowIfEmptyOperator<T> implements Operator<T, T> {\n  constructor(private errorFactory: () => any) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ThrowIfEmptySubscriber(subscriber, this.errorFactory));\n  }\n}\n\nclass ThrowIfEmptySubscriber<T> extends Subscriber<T> {\n  private hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>, private errorFactory: () => any) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.hasValue = true;\n    this.destination.next(value);\n  }\n\n  protected _complete() {\n    if (!this.hasValue) {\n      let err: any;\n      try {\n        err = this.errorFactory();\n      } catch (e) {\n        err = e;\n      }\n      this.destination.error(err);\n    } else {\n        return this.destination.complete();\n    }\n  }\n}\n\nfunction defaultErrorFactory() {\n  return new EmptyError();\n}\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,oBAAoB;AAG/C,SAASC,UAAU,QAAQ,eAAe;AAiC1C,OAAM,SAAUC,YAAYA,CAAKC,YAAA,GAA4BC,mBAAmB;EAC9E,OAAQC,MAAqB,IAAI;IAC/B,OAAOA,MAAM,CAACC,IAAI,CAAC,IAAIC,oBAAoB,CAACJ,YAAY,CAAC,CAAC;EAC5D,CAAC;AACH;AAEA,MAAMI,oBAAoB;EACxBC,YAAoBL,YAAuB;IAAvB,KAAAA,YAAY,GAAZA,YAAY;EAChC;EAEAM,IAAIA,CAACC,UAAyB,EAAEL,MAAW;IACzC,OAAOA,MAAM,CAACM,SAAS,CAAC,IAAIC,sBAAsB,CAACF,UAAU,EAAE,IAAI,CAACP,YAAY,CAAC,CAAC;EACpF;;AAGF,MAAMS,sBAA0B,SAAQX,UAAa;EAGnDO,YAAYK,WAA0B,EAAUV,YAAuB;IACrE,KAAK,CAACU,WAAW,CAAC;IAD4B,KAAAV,YAAY,GAAZA,YAAY;IAFpD,KAAAW,QAAQ,GAAY,KAAK;EAIjC;EAEUC,KAAKA,CAACC,KAAQ;IACtB,IAAI,CAACF,QAAQ,GAAG,IAAI;IACpB,IAAI,CAACD,WAAW,CAACI,IAAI,CAACD,KAAK,CAAC;EAC9B;EAEUE,SAASA,CAAA;IACjB,IAAI,CAAC,IAAI,CAACJ,QAAQ,EAAE;MAClB,IAAIK,GAAQ;MACZ,IAAI;QACFA,GAAG,GAAG,IAAI,CAAChB,YAAY,EAAE;OAC1B,CAAC,OAAOiB,CAAC,EAAE;QACVD,GAAG,GAAGC,CAAC;;MAET,IAAI,CAACP,WAAW,CAACQ,KAAK,CAACF,GAAG,CAAC;KAC5B,MAAM;MACH,OAAO,IAAI,CAACN,WAAW,CAACS,QAAQ,EAAE;;EAExC;;AAGF,SAASlB,mBAAmBA,CAAA;EAC1B,OAAO,IAAIJ,UAAU,EAAE;AACzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}