{"ast":null,"code":"import { Subscription } from '../Subscription';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function bufferWhen(closingSelector) {\n  return function (source) {\n    return source.lift(new BufferWhenOperator(closingSelector));\n  };\n}\nclass BufferWhenOperator {\n  constructor(closingSelector) {\n    this.closingSelector = closingSelector;\n  }\n  call(subscriber, source) {\n    return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n  }\n}\nclass BufferWhenSubscriber extends SimpleOuterSubscriber {\n  constructor(destination, closingSelector) {\n    super(destination);\n    this.closingSelector = closingSelector;\n    this.subscribing = false;\n    this.openBuffer();\n  }\n  _next(value) {\n    this.buffer.push(value);\n  }\n  _complete() {\n    const buffer = this.buffer;\n    if (buffer) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n  _unsubscribe() {\n    this.buffer = undefined;\n    this.subscribing = false;\n  }\n  notifyNext() {\n    this.openBuffer();\n  }\n  notifyComplete() {\n    if (this.subscribing) {\n      this.complete();\n    } else {\n      this.openBuffer();\n    }\n  }\n  openBuffer() {\n    let {\n      closingSubscription\n    } = this;\n    if (closingSubscription) {\n      this.remove(closingSubscription);\n      closingSubscription.unsubscribe();\n    }\n    const buffer = this.buffer;\n    if (this.buffer) {\n      this.destination.next(buffer);\n    }\n    this.buffer = [];\n    let closingNotifier;\n    try {\n      const {\n        closingSelector\n      } = this;\n      closingNotifier = closingSelector();\n    } catch (err) {\n      return this.error(err);\n    }\n    closingSubscription = new Subscription();\n    this.closingSubscription = closingSubscription;\n    this.add(closingSubscription);\n    this.subscribing = true;\n    closingSubscription.add(innerSubscribe(closingNotifier, new SimpleInnerSubscriber(this)));\n    this.subscribing = false;\n  }\n}","map":{"version":3,"names":["Subscription","SimpleOuterSubscriber","innerSubscribe","SimpleInnerSubscriber","bufferWhen","closingSelector","source","lift","BufferWhenOperator","constructor","call","subscriber","subscribe","BufferWhenSubscriber","destination","subscribing","openBuffer","_next","value","buffer","push","_complete","next","_unsubscribe","undefined","notifyNext","notifyComplete","complete","closingSubscription","remove","unsubscribe","closingNotifier","err","error","add"],"sources":["C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\node_modules\\rxjs\\src\\internal\\operators\\bufferWhen.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { OperatorFunction } from '../types';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\n\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * ![](bufferWhen.png)\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * ## Example\n *\n * Emit an array of the last clicks every [1-5] random seconds\n *\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { bufferWhen } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const buffered = clicks.pipe(bufferWhen(() =>\n *   interval(1000 + Math.random() * 4000)\n * ));\n * buffered.subscribe(x => console.log(x));\n * ```\n *\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nexport function bufferWhen<T>(closingSelector: () => Observable<any>): OperatorFunction<T, T[]> {\n  return function (source: Observable<T>) {\n    return source.lift(new BufferWhenOperator(closingSelector));\n  };\n}\n\nclass BufferWhenOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferWhenSubscriber<T> extends SimpleOuterSubscriber<T, any> {\n  private buffer?: T[];\n  private subscribing: boolean = false;\n  private closingSubscription?: Subscription;\n\n  constructor(destination: Subscriber<T[]>, private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openBuffer();\n  }\n\n  protected _next(value: T) {\n    this.buffer!.push(value);\n  }\n\n  protected _complete() {\n    const buffer = this.buffer;\n    if (buffer) {\n      this.destination.next!(buffer);\n    }\n    super._complete();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribe() {\n    this.buffer = undefined;\n    this.subscribing = false;\n  }\n\n  notifyNext(): void {\n    this.openBuffer();\n  }\n\n  notifyComplete(): void {\n    if (this.subscribing) {\n      this.complete();\n    } else {\n      this.openBuffer();\n    }\n  }\n\n  openBuffer() {\n    let { closingSubscription } = this;\n\n    if (closingSubscription) {\n      this.remove(closingSubscription);\n      closingSubscription.unsubscribe();\n    }\n\n    const buffer = this.buffer;\n    if (this.buffer) {\n      this.destination.next!(buffer);\n    }\n\n    this.buffer = [];\n\n    let closingNotifier;\n    try {\n      const { closingSelector } = this;\n      closingNotifier = closingSelector();\n    } catch (err) {\n      return this.error(err);\n    }\n    closingSubscription = new Subscription();\n    this.closingSubscription = closingSubscription;\n    this.add(closingSubscription);\n    this.subscribing = true;\n    closingSubscription.add(innerSubscribe(closingNotifier, new SimpleInnerSubscriber(this)));\n    this.subscribing = false;\n  }\n}\n"],"mappings":"AAGA,SAASA,YAAY,QAAQ,iBAAiB;AAE9C,SAASC,qBAAqB,EAAEC,cAAc,EAAEC,qBAAqB,QAAQ,mBAAmB;AA4ChG,OAAM,SAAUC,UAAUA,CAAIC,eAAsC;EAClE,OAAO,UAAUC,MAAqB;IACpC,OAAOA,MAAM,CAACC,IAAI,CAAC,IAAIC,kBAAkB,CAACH,eAAe,CAAC,CAAC;EAC7D,CAAC;AACH;AAEA,MAAMG,kBAAkB;EAEtBC,YAAoBJ,eAAsC;IAAtC,KAAAA,eAAe,GAAfA,eAAe;EACnC;EAEAK,IAAIA,CAACC,UAA2B,EAAEL,MAAW;IAC3C,OAAOA,MAAM,CAACM,SAAS,CAAC,IAAIC,oBAAoB,CAACF,UAAU,EAAE,IAAI,CAACN,eAAe,CAAC,CAAC;EACrF;;AAQF,MAAMQ,oBAAwB,SAAQZ,qBAA6B;EAKjEQ,YAAYK,WAA4B,EAAUT,eAAsC;IACtF,KAAK,CAACS,WAAW,CAAC;IAD8B,KAAAT,eAAe,GAAfA,eAAe;IAHzD,KAAAU,WAAW,GAAY,KAAK;IAKlC,IAAI,CAACC,UAAU,EAAE;EACnB;EAEUC,KAAKA,CAACC,KAAQ;IACtB,IAAI,CAACC,MAAO,CAACC,IAAI,CAACF,KAAK,CAAC;EAC1B;EAEUG,SAASA,CAAA;IACjB,MAAMF,MAAM,GAAG,IAAI,CAACA,MAAM;IAC1B,IAAIA,MAAM,EAAE;MACV,IAAI,CAACL,WAAW,CAACQ,IAAK,CAACH,MAAM,CAAC;;IAEhC,KAAK,CAACE,SAAS,EAAE;EACnB;EAGAE,YAAYA,CAAA;IACV,IAAI,CAACJ,MAAM,GAAGK,SAAS;IACvB,IAAI,CAACT,WAAW,GAAG,KAAK;EAC1B;EAEAU,UAAUA,CAAA;IACR,IAAI,CAACT,UAAU,EAAE;EACnB;EAEAU,cAAcA,CAAA;IACZ,IAAI,IAAI,CAACX,WAAW,EAAE;MACpB,IAAI,CAACY,QAAQ,EAAE;KAChB,MAAM;MACL,IAAI,CAACX,UAAU,EAAE;;EAErB;EAEAA,UAAUA,CAAA;IACR,IAAI;MAAEY;IAAmB,CAAE,GAAG,IAAI;IAElC,IAAIA,mBAAmB,EAAE;MACvB,IAAI,CAACC,MAAM,CAACD,mBAAmB,CAAC;MAChCA,mBAAmB,CAACE,WAAW,EAAE;;IAGnC,MAAMX,MAAM,GAAG,IAAI,CAACA,MAAM;IAC1B,IAAI,IAAI,CAACA,MAAM,EAAE;MACf,IAAI,CAACL,WAAW,CAACQ,IAAK,CAACH,MAAM,CAAC;;IAGhC,IAAI,CAACA,MAAM,GAAG,EAAE;IAEhB,IAAIY,eAAe;IACnB,IAAI;MACF,MAAM;QAAE1B;MAAe,CAAE,GAAG,IAAI;MAChC0B,eAAe,GAAG1B,eAAe,EAAE;KACpC,CAAC,OAAO2B,GAAG,EAAE;MACZ,OAAO,IAAI,CAACC,KAAK,CAACD,GAAG,CAAC;;IAExBJ,mBAAmB,GAAG,IAAI5B,YAAY,EAAE;IACxC,IAAI,CAAC4B,mBAAmB,GAAGA,mBAAmB;IAC9C,IAAI,CAACM,GAAG,CAACN,mBAAmB,CAAC;IAC7B,IAAI,CAACb,WAAW,GAAG,IAAI;IACvBa,mBAAmB,CAACM,GAAG,CAAChC,cAAc,CAAC6B,eAAe,EAAE,IAAI5B,qBAAqB,CAAC,IAAI,CAAC,CAAC,CAAC;IACzF,IAAI,CAACY,WAAW,GAAG,KAAK;EAC1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}