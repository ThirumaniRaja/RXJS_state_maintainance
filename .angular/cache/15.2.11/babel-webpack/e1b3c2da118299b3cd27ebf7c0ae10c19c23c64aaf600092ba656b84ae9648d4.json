{"ast":null,"code":"import { Subscriber } from '../Subscriber';\nexport function skipWhile(predicate) {\n  return source => source.lift(new SkipWhileOperator(predicate));\n}\nclass SkipWhileOperator {\n  constructor(predicate) {\n    this.predicate = predicate;\n  }\n  call(subscriber, source) {\n    return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n  }\n}\nclass SkipWhileSubscriber extends Subscriber {\n  constructor(destination, predicate) {\n    super(destination);\n    this.predicate = predicate;\n    this.skipping = true;\n    this.index = 0;\n  }\n  _next(value) {\n    const destination = this.destination;\n    if (this.skipping) {\n      this.tryCallPredicate(value);\n    }\n    if (!this.skipping) {\n      destination.next(value);\n    }\n  }\n  tryCallPredicate(value) {\n    try {\n      const result = this.predicate(value, this.index++);\n      this.skipping = Boolean(result);\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n}","map":{"version":3,"names":["Subscriber","skipWhile","predicate","source","lift","SkipWhileOperator","constructor","call","subscriber","subscribe","SkipWhileSubscriber","destination","skipping","index","_next","value","tryCallPredicate","next","result","Boolean","err","error"],"sources":["C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\node_modules\\rxjs\\src\\internal\\operators\\skipWhile.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * ![](skipWhile.png)\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nexport function skipWhile<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipWhileOperator(predicate));\n}\n\nclass SkipWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipWhileSubscriber<T> extends Subscriber<T> {\n  private skipping: boolean = true;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    if (this.skipping) {\n      this.tryCallPredicate(value);\n    }\n\n    if (!this.skipping) {\n      destination.next(value);\n    }\n  }\n\n  private tryCallPredicate(value: T): void {\n    try {\n      const result = this.predicate(value, this.index++);\n      this.skipping = Boolean(result);\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n}\n"],"mappings":"AAEA,SAASA,UAAU,QAAQ,eAAe;AAe1C,OAAM,SAAUC,SAASA,CAAIC,SAA+C;EAC1E,OAAQC,MAAqB,IAAKA,MAAM,CAACC,IAAI,CAAC,IAAIC,iBAAiB,CAACH,SAAS,CAAC,CAAC;AACjF;AAEA,MAAMG,iBAAiB;EACrBC,YAAoBJ,SAA+C;IAA/C,KAAAA,SAAS,GAATA,SAAS;EAC7B;EAEAK,IAAIA,CAACC,UAAyB,EAAEL,MAAW;IACzC,OAAOA,MAAM,CAACM,SAAS,CAAC,IAAIC,mBAAmB,CAACF,UAAU,EAAE,IAAI,CAACN,SAAS,CAAC,CAAC;EAC9E;;AAQF,MAAMQ,mBAAuB,SAAQV,UAAa;EAIhDM,YAAYK,WAA0B,EAClBT,SAA+C;IACjE,KAAK,CAACS,WAAW,CAAC;IADA,KAAAT,SAAS,GAATA,SAAS;IAJrB,KAAAU,QAAQ,GAAY,IAAI;IACxB,KAAAC,KAAK,GAAW,CAAC;EAKzB;EAEUC,KAAKA,CAACC,KAAQ;IACtB,MAAMJ,WAAW,GAAG,IAAI,CAACA,WAAW;IACpC,IAAI,IAAI,CAACC,QAAQ,EAAE;MACjB,IAAI,CAACI,gBAAgB,CAACD,KAAK,CAAC;;IAG9B,IAAI,CAAC,IAAI,CAACH,QAAQ,EAAE;MAClBD,WAAW,CAACM,IAAI,CAACF,KAAK,CAAC;;EAE3B;EAEQC,gBAAgBA,CAACD,KAAQ;IAC/B,IAAI;MACF,MAAMG,MAAM,GAAG,IAAI,CAAChB,SAAS,CAACa,KAAK,EAAE,IAAI,CAACF,KAAK,EAAE,CAAC;MAClD,IAAI,CAACD,QAAQ,GAAGO,OAAO,CAACD,MAAM,CAAC;KAChC,CAAC,OAAOE,GAAG,EAAE;MACZ,IAAI,CAACT,WAAW,CAACU,KAAK,CAACD,GAAG,CAAC;;EAE/B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}