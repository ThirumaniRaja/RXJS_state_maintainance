{"ast":null,"code":"let nextHandle = 1;\nconst RESOLVED = (() => Promise.resolve())();\nconst activeHandles = {};\nfunction findAndClearHandle(handle) {\n  if (handle in activeHandles) {\n    delete activeHandles[handle];\n    return true;\n  }\n  return false;\n}\nexport const Immediate = {\n  setImmediate(cb) {\n    const handle = nextHandle++;\n    activeHandles[handle] = true;\n    RESOLVED.then(() => findAndClearHandle(handle) && cb());\n    return handle;\n  },\n  clearImmediate(handle) {\n    findAndClearHandle(handle);\n  }\n};\nexport const TestTools = {\n  pending() {\n    return Object.keys(activeHandles).length;\n  }\n};","map":{"version":3,"names":["nextHandle","RESOLVED","Promise","resolve","activeHandles","findAndClearHandle","handle","Immediate","setImmediate","cb","then","clearImmediate","TestTools","pending","Object","keys","length"],"sources":["C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\node_modules\\rxjs\\src\\internal\\util\\Immediate.ts"],"sourcesContent":["let nextHandle = 1;\nconst RESOLVED = (() => Promise.resolve())();\nconst activeHandles: { [key: number]: any } = {};\n\n/**\n * Finds the handle in the list of active handles, and removes it.\n * Returns `true` if found, `false` otherwise. Used both to clear\n * Immediate scheduled tasks, and to identify if a task should be scheduled.\n */\nfunction findAndClearHandle(handle: number): boolean {\n  if (handle in activeHandles) {\n    delete activeHandles[handle];\n    return true;\n  }\n  return false;\n}\n\n/**\n * Helper functions to schedule and unschedule microtasks.\n */\nexport const Immediate = {\n  setImmediate(cb: () => void): number {\n    const handle = nextHandle++;\n    activeHandles[handle] = true;\n    RESOLVED.then(() => findAndClearHandle(handle) && cb());\n    return handle;\n  },\n\n  clearImmediate(handle: number): void {\n    findAndClearHandle(handle);\n  },\n};\n\n/**\n * Used for internal testing purposes only. Do not export from library.\n */\nexport const TestTools = {\n  pending() {\n    return Object.keys(activeHandles).length;\n  }\n};\n"],"mappings":"AAAA,IAAIA,UAAU,GAAG,CAAC;AAClB,MAAMC,QAAQ,GAAG,CAAC,MAAMC,OAAO,CAACC,OAAO,EAAE,EAAC,CAAE;AAC5C,MAAMC,aAAa,GAA2B,EAAE;AAOhD,SAASC,kBAAkBA,CAACC,MAAc;EACxC,IAAIA,MAAM,IAAIF,aAAa,EAAE;IAC3B,OAAOA,aAAa,CAACE,MAAM,CAAC;IAC5B,OAAO,IAAI;;EAEb,OAAO,KAAK;AACd;AAKA,OAAO,MAAMC,SAAS,GAAG;EACvBC,YAAYA,CAACC,EAAc;IACzB,MAAMH,MAAM,GAAGN,UAAU,EAAE;IAC3BI,aAAa,CAACE,MAAM,CAAC,GAAG,IAAI;IAC5BL,QAAQ,CAACS,IAAI,CAAC,MAAML,kBAAkB,CAACC,MAAM,CAAC,IAAIG,EAAE,EAAE,CAAC;IACvD,OAAOH,MAAM;EACf,CAAC;EAEDK,cAAcA,CAACL,MAAc;IAC3BD,kBAAkB,CAACC,MAAM,CAAC;EAC5B;CACD;AAKD,OAAO,MAAMM,SAAS,GAAG;EACvBC,OAAOA,CAAA;IACL,OAAOC,MAAM,CAACC,IAAI,CAACX,aAAa,CAAC,CAACY,MAAM;EAC1C;CACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}