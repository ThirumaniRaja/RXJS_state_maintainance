{"ast":null,"code":"import { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\nexport function skipUntil(notifier) {\n  return source => source.lift(new SkipUntilOperator(notifier));\n}\nclass SkipUntilOperator {\n  constructor(notifier) {\n    this.notifier = notifier;\n  }\n  call(destination, source) {\n    return source.subscribe(new SkipUntilSubscriber(destination, this.notifier));\n  }\n}\nclass SkipUntilSubscriber extends SimpleOuterSubscriber {\n  constructor(destination, notifier) {\n    super(destination);\n    this.hasValue = false;\n    const innerSubscriber = new SimpleInnerSubscriber(this);\n    this.add(innerSubscriber);\n    this.innerSubscription = innerSubscriber;\n    const innerSubscription = innerSubscribe(notifier, innerSubscriber);\n    if (innerSubscription !== innerSubscriber) {\n      this.add(innerSubscription);\n      this.innerSubscription = innerSubscription;\n    }\n  }\n  _next(value) {\n    if (this.hasValue) {\n      super._next(value);\n    }\n  }\n  notifyNext() {\n    this.hasValue = true;\n    if (this.innerSubscription) {\n      this.innerSubscription.unsubscribe();\n    }\n  }\n  notifyComplete() {}\n}","map":{"version":3,"names":["SimpleOuterSubscriber","SimpleInnerSubscriber","innerSubscribe","skipUntil","notifier","source","lift","SkipUntilOperator","constructor","call","destination","subscribe","SkipUntilSubscriber","hasValue","innerSubscriber","add","innerSubscription","_next","value","notifyNext","unsubscribe","notifyComplete"],"sources":["C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\node_modules\\rxjs\\src\\internal\\operators\\skipUntil.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction, TeardownLogic, ObservableInput } from '../types';\nimport { Subscription } from '../Subscription';\nimport { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\n\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * The `skipUntil` operator causes the observable stream to skip the emission of values ​​until the passed in observable emits the first value.\n * This can be particularly useful in combination with user interactions, responses of http requests or waiting for specific times to pass by.\n *\n * ![](skipUntil.png)\n *\n * Internally the `skipUntil` operator subscribes to the passed in observable (in the following called *notifier*) in order to recognize the emission\n * of its first value. When this happens, the operator unsubscribes from the *notifier* and starts emitting the values of the *source*\n * observable. It will never let the *source* observable emit any values if the *notifier* completes or throws an error without emitting\n * a value before.\n *\n * ## Example\n *\n * In the following example, all emitted values ​​of the interval observable are skipped until the user clicks anywhere within the page.\n *\n * ```ts\n * import { interval, fromEvent } from 'rxjs';\n * import { skipUntil } from 'rxjs/operators';\n *\n * const intervalObservable = interval(1000);\n * const click = fromEvent(document, 'click');\n *\n * const emitAfterClick = intervalObservable.pipe(\n *   skipUntil(click)\n * );\n * // clicked at 4.6s. output: 5...6...7...8........ or\n * // clicked at 7.3s. output: 8...9...10..11.......\n * const subscribe = emitAfterClick.subscribe(value => console.log(value));\n * ```\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nexport function skipUntil<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipUntilOperator(notifier));\n}\n\nclass SkipUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(destination: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipUntilSubscriber(destination, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipUntilSubscriber<T, R> extends SimpleOuterSubscriber<T, R> {\n\n  private hasValue: boolean = false;\n  private innerSubscription?: Subscription;\n\n  constructor(destination: Subscriber<R>, notifier: ObservableInput<any>) {\n    super(destination);\n    const innerSubscriber = new SimpleInnerSubscriber(this);\n    this.add(innerSubscriber);\n    this.innerSubscription = innerSubscriber;\n    const innerSubscription = innerSubscribe(notifier, innerSubscriber);\n    // The returned subscription will usually be the subscriber that was\n    // passed. However, interop subscribers will be wrapped and for\n    // unsubscriptions to chain correctly, the wrapper needs to be added, too.\n    if (innerSubscription !== innerSubscriber) {\n      this.add(innerSubscription);\n      this.innerSubscription = innerSubscription;\n    }\n  }\n\n  protected _next(value: T) {\n    if (this.hasValue) {\n      super._next(value);\n    }\n  }\n\n  notifyNext(): void {\n    this.hasValue = true;\n    if (this.innerSubscription) {\n      this.innerSubscription.unsubscribe();\n    }\n  }\n\n  notifyComplete() {\n    /* do nothing */\n  }\n}\n"],"mappings":"AAKA,SAASA,qBAAqB,EAAEC,qBAAqB,EAAEC,cAAc,QAAQ,mBAAmB;AAyChG,OAAM,SAAUC,SAASA,CAAIC,QAAyB;EACpD,OAAQC,MAAqB,IAAKA,MAAM,CAACC,IAAI,CAAC,IAAIC,iBAAiB,CAACH,QAAQ,CAAC,CAAC;AAChF;AAEA,MAAMG,iBAAiB;EACrBC,YAAoBJ,QAAyB;IAAzB,KAAAA,QAAQ,GAARA,QAAQ;EAC5B;EAEAK,IAAIA,CAACC,WAA0B,EAAEL,MAAW;IAC1C,OAAOA,MAAM,CAACM,SAAS,CAAC,IAAIC,mBAAmB,CAACF,WAAW,EAAE,IAAI,CAACN,QAAQ,CAAC,CAAC;EAC9E;;AAQF,MAAMQ,mBAA0B,SAAQZ,qBAA2B;EAKjEQ,YAAYE,WAA0B,EAAEN,QAA8B;IACpE,KAAK,CAACM,WAAW,CAAC;IAJZ,KAAAG,QAAQ,GAAY,KAAK;IAK/B,MAAMC,eAAe,GAAG,IAAIb,qBAAqB,CAAC,IAAI,CAAC;IACvD,IAAI,CAACc,GAAG,CAACD,eAAe,CAAC;IACzB,IAAI,CAACE,iBAAiB,GAAGF,eAAe;IACxC,MAAME,iBAAiB,GAAGd,cAAc,CAACE,QAAQ,EAAEU,eAAe,CAAC;IAInE,IAAIE,iBAAiB,KAAKF,eAAe,EAAE;MACzC,IAAI,CAACC,GAAG,CAACC,iBAAiB,CAAC;MAC3B,IAAI,CAACA,iBAAiB,GAAGA,iBAAiB;;EAE9C;EAEUC,KAAKA,CAACC,KAAQ;IACtB,IAAI,IAAI,CAACL,QAAQ,EAAE;MACjB,KAAK,CAACI,KAAK,CAACC,KAAK,CAAC;;EAEtB;EAEAC,UAAUA,CAAA;IACR,IAAI,CAACN,QAAQ,GAAG,IAAI;IACpB,IAAI,IAAI,CAACG,iBAAiB,EAAE;MAC1B,IAAI,CAACA,iBAAiB,CAACI,WAAW,EAAE;;EAExC;EAEAC,cAAcA,CAAA,GAEd","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}