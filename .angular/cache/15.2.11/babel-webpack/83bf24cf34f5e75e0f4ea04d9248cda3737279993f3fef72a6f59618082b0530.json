{"ast":null,"code":"import { connectableObservableDescriptor } from '../observable/ConnectableObservable';\nexport function multicast(subjectOrSubjectFactory, selector) {\n  return function multicastOperatorFunction(source) {\n    let subjectFactory;\n    if (typeof subjectOrSubjectFactory === 'function') {\n      subjectFactory = subjectOrSubjectFactory;\n    } else {\n      subjectFactory = function subjectFactory() {\n        return subjectOrSubjectFactory;\n      };\n    }\n    if (typeof selector === 'function') {\n      return source.lift(new MulticastOperator(subjectFactory, selector));\n    }\n    const connectable = Object.create(source, connectableObservableDescriptor);\n    connectable.source = source;\n    connectable.subjectFactory = subjectFactory;\n    return connectable;\n  };\n}\nexport class MulticastOperator {\n  constructor(subjectFactory, selector) {\n    this.subjectFactory = subjectFactory;\n    this.selector = selector;\n  }\n  call(subscriber, source) {\n    const {\n      selector\n    } = this;\n    const subject = this.subjectFactory();\n    const subscription = selector(subject).subscribe(subscriber);\n    subscription.add(source.subscribe(subject));\n    return subscription;\n  }\n}","map":{"version":3,"names":["connectableObservableDescriptor","multicast","subjectOrSubjectFactory","selector","multicastOperatorFunction","source","subjectFactory","lift","MulticastOperator","connectable","Object","create","constructor","call","subscriber","subject","subscription","subscribe","add"],"sources":["C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\node_modules\\rxjs\\src\\internal\\operators\\multicast.ts"],"sourcesContent":["import { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { ConnectableObservable, connectableObservableDescriptor } from '../observable/ConnectableObservable';\nimport { MonoTypeOperatorFunction, OperatorFunction, UnaryFunction, ObservedValueOf, ObservableInput } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function multicast<T>(subject: Subject<T>): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\nexport function multicast<T, O extends ObservableInput<any>>(subject: Subject<T>, selector: (shared: Observable<T>) => O): UnaryFunction<Observable<T>, ConnectableObservable<ObservedValueOf<O>>>;\nexport function multicast<T>(subjectFactory: (this: Observable<T>) => Subject<T>): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\nexport function multicast<T, O extends ObservableInput<any>>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector: (shared: Observable<T>) => O): OperatorFunction<T, ObservedValueOf<O>>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits the results of invoking a specified selector on items\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n *\n * ![](multicast.png)\n *\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through\n * which the source sequence's elements will be multicast to the selector function\n * or Subject to push source elements into.\n * @param {Function} [selector] - Optional selector function that can use the multicasted source stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the given source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable} An Observable that emits the results of invoking the selector\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n * the underlying stream.\n * @method multicast\n * @owner Observable\n */\nexport function multicast<T, R>(subjectOrSubjectFactory: Subject<T> | (() => Subject<T>),\n                                selector?: (source: Observable<T>) => Observable<R>): OperatorFunction<T, R> {\n  return function multicastOperatorFunction(source: Observable<T>): Observable<R> {\n    let subjectFactory: () => Subject<T>;\n    if (typeof subjectOrSubjectFactory === 'function') {\n      subjectFactory = <() => Subject<T>>subjectOrSubjectFactory;\n    } else {\n      subjectFactory = function subjectFactory() {\n        return <Subject<T>>subjectOrSubjectFactory;\n      };\n    }\n\n    if (typeof selector === 'function') {\n      return source.lift(new MulticastOperator(subjectFactory, selector));\n    }\n\n    const connectable: any = Object.create(source, connectableObservableDescriptor);\n    connectable.source = source;\n    connectable.subjectFactory = subjectFactory;\n\n    return <ConnectableObservable<R>> connectable;\n  };\n}\n\nexport class MulticastOperator<T, R> implements Operator<T, R> {\n  constructor(private subjectFactory: () => Subject<T>,\n              private selector: (source: Observable<T>) => Observable<R>) {\n  }\n  call(subscriber: Subscriber<R>, source: any): any {\n    const { selector } = this;\n    const subject = this.subjectFactory();\n    const subscription = selector(subject).subscribe(subscriber);\n    subscription.add(source.subscribe(subject));\n    return subscription;\n  }\n}\n"],"mappings":"AAIA,SAAgCA,+BAA+B,QAAQ,qCAAqC;AA6B5G,OAAM,SAAUC,SAASA,CAAOC,uBAAwD,EACxDC,QAAmD;EACjF,OAAO,SAASC,yBAAyBA,CAACC,MAAqB;IAC7D,IAAIC,cAAgC;IACpC,IAAI,OAAOJ,uBAAuB,KAAK,UAAU,EAAE;MACjDI,cAAc,GAAqBJ,uBAAuB;KAC3D,MAAM;MACLI,cAAc,GAAG,SAASA,cAAcA,CAAA;QACtC,OAAmBJ,uBAAuB;MAC5C,CAAC;;IAGH,IAAI,OAAOC,QAAQ,KAAK,UAAU,EAAE;MAClC,OAAOE,MAAM,CAACE,IAAI,CAAC,IAAIC,iBAAiB,CAACF,cAAc,EAAEH,QAAQ,CAAC,CAAC;;IAGrE,MAAMM,WAAW,GAAQC,MAAM,CAACC,MAAM,CAACN,MAAM,EAAEL,+BAA+B,CAAC;IAC/ES,WAAW,CAACJ,MAAM,GAAGA,MAAM;IAC3BI,WAAW,CAACH,cAAc,GAAGA,cAAc;IAE3C,OAAkCG,WAAW;EAC/C,CAAC;AACH;AAEA,OAAM,MAAOD,iBAAiB;EAC5BI,YAAoBN,cAAgC,EAChCH,QAAkD;IADlD,KAAAG,cAAc,GAAdA,cAAc;IACd,KAAAH,QAAQ,GAARA,QAAQ;EAC5B;EACAU,IAAIA,CAACC,UAAyB,EAAET,MAAW;IACzC,MAAM;MAAEF;IAAQ,CAAE,GAAG,IAAI;IACzB,MAAMY,OAAO,GAAG,IAAI,CAACT,cAAc,EAAE;IACrC,MAAMU,YAAY,GAAGb,QAAQ,CAACY,OAAO,CAAC,CAACE,SAAS,CAACH,UAAU,CAAC;IAC5DE,YAAY,CAACE,GAAG,CAACb,MAAM,CAACY,SAAS,CAACF,OAAO,CAAC,CAAC;IAC3C,OAAOC,YAAY;EACrB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}