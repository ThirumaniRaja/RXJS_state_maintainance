{"ast":null,"code":"import { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { isNumeric } from '../util/isNumeric';\nexport function interval(period = 0, scheduler = async) {\n  if (!isNumeric(period) || period < 0) {\n    period = 0;\n  }\n  if (!scheduler || typeof scheduler.schedule !== 'function') {\n    scheduler = async;\n  }\n  return new Observable(subscriber => {\n    subscriber.add(scheduler.schedule(dispatch, period, {\n      subscriber,\n      counter: 0,\n      period\n    }));\n    return subscriber;\n  });\n}\nfunction dispatch(state) {\n  const {\n    subscriber,\n    counter,\n    period\n  } = state;\n  subscriber.next(counter);\n  this.schedule({\n    subscriber,\n    counter: counter + 1,\n    period\n  }, period);\n}","map":{"version":3,"names":["Observable","async","isNumeric","interval","period","scheduler","schedule","subscriber","add","dispatch","counter","state","next"],"sources":["C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\node_modules\\rxjs\\src\\internal\\observable\\interval.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { SchedulerAction, SchedulerLike } from '../types';\nimport { isNumeric } from '../util/isNumeric';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Creates an Observable that emits sequential numbers every specified\n * interval of time, on a specified {@link SchedulerLike}.\n *\n * <span class=\"informal\">Emits incremental numbers periodically in time.\n * </span>\n *\n * ![](interval.png)\n *\n * `interval` returns an Observable that emits an infinite sequence of\n * ascending integers, with a constant interval of time of your choosing\n * between those emissions. The first emission is not sent immediately, but\n * only after the first period has passed. By default, this operator uses the\n * `async` {@link SchedulerLike} to provide a notion of time, but you may pass any\n * {@link SchedulerLike} to it.\n *\n * ## Example\n * Emits ascending numbers, one every second (1000ms) up to the number 3\n * ```ts\n * import { interval } from 'rxjs';\n * import { take } from 'rxjs/operators';\n *\n * const numbers = interval(1000);\n *\n * const takeFourNumbers = numbers.pipe(take(4));\n *\n * takeFourNumbers.subscribe(x => console.log('Next: ', x));\n *\n * // Logs:\n * // Next: 0\n * // Next: 1\n * // Next: 2\n * // Next: 3\n * ```\n *\n * @see {@link timer}\n * @see {@link delay}\n *\n * @param {number} [period=0] The interval size in milliseconds (by default)\n * or the time unit determined by the scheduler's clock.\n * @param {SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for scheduling\n * the emission of values, and providing a notion of \"time\".\n * @return {Observable} An Observable that emits a sequential number each time\n * interval.\n * @static true\n * @name interval\n * @owner Observable\n */\nexport function interval(period = 0,\n                         scheduler: SchedulerLike = async): Observable<number> {\n  if (!isNumeric(period) || period < 0) {\n    period = 0;\n  }\n\n  if (!scheduler || typeof scheduler.schedule !== 'function') {\n    scheduler = async;\n  }\n\n  return new Observable<number>(subscriber => {\n    subscriber.add(\n      scheduler.schedule(dispatch, period, { subscriber, counter: 0, period })\n    );\n    return subscriber;\n  });\n}\n\nfunction dispatch(this: SchedulerAction<IntervalState>, state: IntervalState) {\n  const { subscriber, counter, period } = state;\n  subscriber.next(counter);\n  this.schedule({ subscriber, counter: counter + 1, period }, period);\n}\n\ninterface IntervalState {\n  subscriber: Subscriber<number>;\n  counter: number;\n  period: number;\n}\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,eAAe;AAC1C,SAASC,KAAK,QAAQ,oBAAoB;AAE1C,SAASC,SAAS,QAAQ,mBAAmB;AAmD7C,OAAM,SAAUC,QAAQA,CAACC,MAAM,GAAG,CAAC,EACVC,SAAA,GAA2BJ,KAAK;EACvD,IAAI,CAACC,SAAS,CAACE,MAAM,CAAC,IAAIA,MAAM,GAAG,CAAC,EAAE;IACpCA,MAAM,GAAG,CAAC;;EAGZ,IAAI,CAACC,SAAS,IAAI,OAAOA,SAAS,CAACC,QAAQ,KAAK,UAAU,EAAE;IAC1DD,SAAS,GAAGJ,KAAK;;EAGnB,OAAO,IAAID,UAAU,CAASO,UAAU,IAAG;IACzCA,UAAU,CAACC,GAAG,CACZH,SAAS,CAACC,QAAQ,CAACG,QAAQ,EAAEL,MAAM,EAAE;MAAEG,UAAU;MAAEG,OAAO,EAAE,CAAC;MAAEN;IAAM,CAAE,CAAC,CACzE;IACD,OAAOG,UAAU;EACnB,CAAC,CAAC;AACJ;AAEA,SAASE,QAAQA,CAAuCE,KAAoB;EAC1E,MAAM;IAAEJ,UAAU;IAAEG,OAAO;IAAEN;EAAM,CAAE,GAAGO,KAAK;EAC7CJ,UAAU,CAACK,IAAI,CAACF,OAAO,CAAC;EACxB,IAAI,CAACJ,QAAQ,CAAC;IAAEC,UAAU;IAAEG,OAAO,EAAEA,OAAO,GAAG,CAAC;IAAEN;EAAM,CAAE,EAAEA,MAAM,CAAC;AACrE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}