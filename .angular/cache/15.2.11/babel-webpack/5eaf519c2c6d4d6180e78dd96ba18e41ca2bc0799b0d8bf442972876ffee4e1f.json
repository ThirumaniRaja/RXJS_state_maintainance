{"ast":null,"code":"import { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport const defaultThrottleConfig = {\n  leading: true,\n  trailing: false\n};\nexport function throttle(durationSelector, config = defaultThrottleConfig) {\n  return source => source.lift(new ThrottleOperator(durationSelector, !!config.leading, !!config.trailing));\n}\nclass ThrottleOperator {\n  constructor(durationSelector, leading, trailing) {\n    this.durationSelector = durationSelector;\n    this.leading = leading;\n    this.trailing = trailing;\n  }\n  call(subscriber, source) {\n    return source.subscribe(new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing));\n  }\n}\nclass ThrottleSubscriber extends SimpleOuterSubscriber {\n  constructor(destination, durationSelector, _leading, _trailing) {\n    super(destination);\n    this.destination = destination;\n    this.durationSelector = durationSelector;\n    this._leading = _leading;\n    this._trailing = _trailing;\n    this._hasValue = false;\n  }\n  _next(value) {\n    this._hasValue = true;\n    this._sendValue = value;\n    if (!this._throttled) {\n      if (this._leading) {\n        this.send();\n      } else {\n        this.throttle(value);\n      }\n    }\n  }\n  send() {\n    const {\n      _hasValue,\n      _sendValue\n    } = this;\n    if (_hasValue) {\n      this.destination.next(_sendValue);\n      this.throttle(_sendValue);\n    }\n    this._hasValue = false;\n    this._sendValue = undefined;\n  }\n  throttle(value) {\n    const duration = this.tryDurationSelector(value);\n    if (!!duration) {\n      this.add(this._throttled = innerSubscribe(duration, new SimpleInnerSubscriber(this)));\n    }\n  }\n  tryDurationSelector(value) {\n    try {\n      return this.durationSelector(value);\n    } catch (err) {\n      this.destination.error(err);\n      return null;\n    }\n  }\n  throttlingDone() {\n    const {\n      _throttled,\n      _trailing\n    } = this;\n    if (_throttled) {\n      _throttled.unsubscribe();\n    }\n    this._throttled = undefined;\n    if (_trailing) {\n      this.send();\n    }\n  }\n  notifyNext() {\n    this.throttlingDone();\n  }\n  notifyComplete() {\n    this.throttlingDone();\n  }\n}","map":{"version":3,"names":["SimpleOuterSubscriber","innerSubscribe","SimpleInnerSubscriber","defaultThrottleConfig","leading","trailing","throttle","durationSelector","config","source","lift","ThrottleOperator","constructor","call","subscriber","subscribe","ThrottleSubscriber","destination","_leading","_trailing","_hasValue","_next","value","_sendValue","_throttled","send","next","undefined","duration","tryDurationSelector","add","err","error","throttlingDone","unsubscribe","notifyNext","notifyComplete"],"sources":["C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\node_modules\\rxjs\\src\\internal\\operators\\throttle.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\n\nimport { MonoTypeOperatorFunction, SubscribableOrPromise, TeardownLogic } from '../types';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\n\nexport interface ThrottleConfig {\n  leading?: boolean;\n  trailing?: boolean;\n}\n\nexport const defaultThrottleConfig: ThrottleConfig = {\n  leading: true,\n  trailing: false\n};\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * ![](throttle.png)\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * ## Example\n * Emit clicks at a rate of at most one click per second\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { throttle } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(throttle(ev => interval(1000)));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults\n * to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nexport function throttle<T>(durationSelector: (value: T) => SubscribableOrPromise<any>,\n                            config: ThrottleConfig = defaultThrottleConfig): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ThrottleOperator(durationSelector, !!config.leading, !!config.trailing));\n}\n\nclass ThrottleOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<any>,\n              private leading: boolean,\n              private trailing: boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(\n      new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing)\n    );\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleSubscriber<T, R> extends SimpleOuterSubscriber<T, R> {\n  private _throttled?: Subscription;\n  private _sendValue?: T;\n  private _hasValue = false;\n\n  constructor(protected destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>,\n              private _leading: boolean,\n              private _trailing: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this._hasValue = true;\n    this._sendValue = value;\n\n    if (!this._throttled) {\n      if (this._leading) {\n        this.send();\n      } else {\n        this.throttle(value);\n      }\n    }\n  }\n\n  private send() {\n    const { _hasValue, _sendValue } = this;\n    if (_hasValue) {\n      this.destination.next(_sendValue);\n      this.throttle(_sendValue!);\n    }\n    this._hasValue = false;\n    this._sendValue = undefined;\n  }\n\n  private throttle(value: T): void {\n    const duration = this.tryDurationSelector(value);\n    if (!!duration) {\n      this.add(this._throttled = innerSubscribe(duration, new SimpleInnerSubscriber(this)));\n    }\n  }\n\n  private tryDurationSelector(value: T): SubscribableOrPromise<any> | null {\n    try {\n      return this.durationSelector(value);\n    } catch (err) {\n      this.destination.error(err);\n      return null;\n    }\n  }\n\n  private throttlingDone() {\n    const { _throttled, _trailing } = this;\n    if (_throttled) {\n      _throttled.unsubscribe();\n    }\n    this._throttled = undefined;\n\n    if (_trailing) {\n      this.send();\n    }\n  }\n\n  notifyNext(): void {\n    this.throttlingDone();\n  }\n\n  notifyComplete(): void {\n    this.throttlingDone();\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}