{"ast":null,"code":"import { map } from './map';\nimport { from } from '../observable/from';\nimport { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\nexport function exhaustMap(project, resultSelector) {\n  if (resultSelector) {\n    return source => source.pipe(exhaustMap((a, i) => from(project(a, i)).pipe(map((b, ii) => resultSelector(a, b, i, ii)))));\n  }\n  return source => source.lift(new ExhaustMapOperator(project));\n}\nclass ExhaustMapOperator {\n  constructor(project) {\n    this.project = project;\n  }\n  call(subscriber, source) {\n    return source.subscribe(new ExhaustMapSubscriber(subscriber, this.project));\n  }\n}\nclass ExhaustMapSubscriber extends SimpleOuterSubscriber {\n  constructor(destination, project) {\n    super(destination);\n    this.project = project;\n    this.hasSubscription = false;\n    this.hasCompleted = false;\n    this.index = 0;\n  }\n  _next(value) {\n    if (!this.hasSubscription) {\n      this.tryNext(value);\n    }\n  }\n  tryNext(value) {\n    let result;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.hasSubscription = true;\n    this._innerSub(result);\n  }\n  _innerSub(result) {\n    const innerSubscriber = new SimpleInnerSubscriber(this);\n    const destination = this.destination;\n    destination.add(innerSubscriber);\n    const innerSubscription = innerSubscribe(result, innerSubscriber);\n    if (innerSubscription !== innerSubscriber) {\n      destination.add(innerSubscription);\n    }\n  }\n  _complete() {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n    this.unsubscribe();\n  }\n  notifyNext(innerValue) {\n    this.destination.next(innerValue);\n  }\n  notifyError(err) {\n    this.destination.error(err);\n  }\n  notifyComplete() {\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}","map":{"version":3,"names":["map","from","SimpleOuterSubscriber","SimpleInnerSubscriber","innerSubscribe","exhaustMap","project","resultSelector","source","pipe","a","i","b","ii","lift","ExhaustMapOperator","constructor","call","subscriber","subscribe","ExhaustMapSubscriber","destination","hasSubscription","hasCompleted","index","_next","value","tryNext","result","err","error","_innerSub","innerSubscriber","add","innerSubscription","_complete","complete","unsubscribe","notifyNext","innerValue","next","notifyError","notifyComplete"],"sources":["C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\node_modules\\rxjs\\src\\internal\\operators\\exhaustMap.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\nimport { map } from './map';\nimport { from } from '../observable/from';\nimport { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\n\n/* tslint:disable:max-line-length */\nexport function exhaustMap<T, O extends ObservableInput<any>>(project: (value: T, index: number) => O): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated resultSelector is no longer supported. Use inner map instead. */\nexport function exhaustMap<T, O extends ObservableInput<any>>(project: (value: T, index: number) => O, resultSelector: undefined): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated resultSelector is no longer supported. Use inner map instead. */\nexport function exhaustMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * ![](exhaustMap.png)\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * ## Example\n * Run a finite timer for each click, only if there is no currently active timer\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { exhaustMap, take } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(\n *   exhaustMap(ev => interval(1000).pipe(take(5)))\n * );\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nexport function exhaustMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector?: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R,\n): OperatorFunction<T, ObservedValueOf<O>|R> {\n  if (resultSelector) {\n    // DEPRECATED PATH\n    return (source: Observable<T>) => source.pipe(\n      exhaustMap((a, i) => from(project(a, i)).pipe(\n        map((b: any, ii: any) => resultSelector(a, b, i, ii)),\n      )),\n    );\n  }\n  return (source: Observable<T>) =>\n    source.lift(new ExhaustMapOperator(project));\n}\n\nclass ExhaustMapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => ObservableInput<R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ExhaustMapSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ExhaustMapSubscriber<T, R> extends SimpleOuterSubscriber<T, R> {\n  private hasSubscription = false;\n  private hasCompleted = false;\n  private index = 0;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => ObservableInput<R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.tryNext(value);\n    }\n  }\n\n  private tryNext(value: T): void {\n    let result: ObservableInput<R>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error!(err);\n      return;\n    }\n    this.hasSubscription = true;\n    this._innerSub(result);\n  }\n\n  private _innerSub(result: ObservableInput<R>): void {\n    const innerSubscriber = new SimpleInnerSubscriber(this);\n    const destination = this.destination as Subscription;\n    destination.add(innerSubscriber);\n    const innerSubscription = innerSubscribe(result, innerSubscriber);\n    // The returned subscription will usually be the subscriber that was\n    // passed. However, interop subscribers will be wrapped and for\n    // unsubscriptions to chain correctly, the wrapper needs to be added, too.\n    if (innerSubscription !== innerSubscriber) {\n      destination.add(innerSubscription);\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete!();\n    }\n    this.unsubscribe();\n  }\n\n  notifyNext(innerValue: R): void {\n    this.destination.next!(innerValue);\n  }\n\n  notifyError(err: any): void {\n    this.destination.error!(err);\n  }\n\n  notifyComplete(): void {\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete!();\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}