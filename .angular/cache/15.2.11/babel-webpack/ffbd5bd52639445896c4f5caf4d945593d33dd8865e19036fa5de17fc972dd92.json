{"ast":null,"code":"import { Observable } from '../Observable';\nexport function range(start = 0, count, scheduler) {\n  return new Observable(subscriber => {\n    if (count === undefined) {\n      count = start;\n      start = 0;\n    }\n    let index = 0;\n    let current = start;\n    if (scheduler) {\n      return scheduler.schedule(dispatch, 0, {\n        index,\n        count,\n        start,\n        subscriber\n      });\n    } else {\n      do {\n        if (index++ >= count) {\n          subscriber.complete();\n          break;\n        }\n        subscriber.next(current++);\n        if (subscriber.closed) {\n          break;\n        }\n      } while (true);\n    }\n    return undefined;\n  });\n}\nexport function dispatch(state) {\n  const {\n    start,\n    index,\n    count,\n    subscriber\n  } = state;\n  if (index >= count) {\n    subscriber.complete();\n    return;\n  }\n  subscriber.next(start);\n  if (subscriber.closed) {\n    return;\n  }\n  state.index = index + 1;\n  state.start = start + 1;\n  this.schedule(state);\n}","map":{"version":3,"names":["Observable","range","start","count","scheduler","subscriber","undefined","index","current","schedule","dispatch","complete","next","closed","state"],"sources":["C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\node_modules\\rxjs\\src\\internal\\observable\\range.ts"],"sourcesContent":["import { SchedulerAction, SchedulerLike } from '../types';\nimport { Observable } from '../Observable';\n\n/**\n * Creates an Observable that emits a sequence of numbers within a specified\n * range.\n *\n * <span class=\"informal\">Emits a sequence of numbers in a range.</span>\n *\n * ![](range.png)\n *\n * `range` operator emits a range of sequential integers, in order, where you\n * select the `start` of the range and its `length`. By default, uses no\n * {@link SchedulerLike} and just delivers the notifications synchronously, but may use\n * an optional {@link SchedulerLike} to regulate those deliveries.\n *\n * ## Example\n * Emits the numbers 1 to 10</caption>\n * ```ts\n * import { range } from 'rxjs';\n *\n * const numbers = range(1, 10);\n * numbers.subscribe(x => console.log(x));\n * ```\n * @see {@link timer}\n * @see {@link index/interval}\n *\n * @param {number} [start=0] The value of the first integer in the sequence.\n * @param {number} count The number of sequential integers to generate.\n * @param {SchedulerLike} [scheduler] A {@link SchedulerLike} to use for scheduling\n * the emissions of the notifications.\n * @return {Observable} An Observable of numbers that emits a finite range of\n * sequential integers.\n * @static true\n * @name range\n * @owner Observable\n */\nexport function range(start: number = 0,\n                      count?: number,\n                      scheduler?: SchedulerLike): Observable<number> {\n  return new Observable<number>(subscriber => {\n    if (count === undefined) {\n      count = start;\n      start = 0;\n    }\n\n    let index = 0;\n    let current = start;\n\n    if (scheduler) {\n      return scheduler.schedule(dispatch, 0, {\n        index, count, start, subscriber\n      });\n    } else {\n      do {\n        if (index++ >= count) {\n          subscriber.complete();\n          break;\n        }\n        subscriber.next(current++);\n        if (subscriber.closed) {\n          break;\n        }\n      } while (true);\n    }\n\n    return undefined;\n  });\n}\n\n/** @internal */\nexport function dispatch(this: SchedulerAction<any>, state: any) {\n  const { start, index, count, subscriber } = state;\n\n  if (index >= count) {\n    subscriber.complete();\n    return;\n  }\n\n  subscriber.next(start);\n\n  if (subscriber.closed) {\n    return;\n  }\n\n  state.index = index + 1;\n  state.start = start + 1;\n\n  this.schedule(state);\n}\n"],"mappings":"AACA,SAASA,UAAU,QAAQ,eAAe;AAoC1C,OAAM,SAAUC,KAAKA,CAACC,KAAA,GAAgB,CAAC,EACjBC,KAAc,EACdC,SAAyB;EAC7C,OAAO,IAAIJ,UAAU,CAASK,UAAU,IAAG;IACzC,IAAIF,KAAK,KAAKG,SAAS,EAAE;MACvBH,KAAK,GAAGD,KAAK;MACbA,KAAK,GAAG,CAAC;;IAGX,IAAIK,KAAK,GAAG,CAAC;IACb,IAAIC,OAAO,GAAGN,KAAK;IAEnB,IAAIE,SAAS,EAAE;MACb,OAAOA,SAAS,CAACK,QAAQ,CAACC,QAAQ,EAAE,CAAC,EAAE;QACrCH,KAAK;QAAEJ,KAAK;QAAED,KAAK;QAAEG;OACtB,CAAC;KACH,MAAM;MACL,GAAG;QACD,IAAIE,KAAK,EAAE,IAAIJ,KAAK,EAAE;UACpBE,UAAU,CAACM,QAAQ,EAAE;UACrB;;QAEFN,UAAU,CAACO,IAAI,CAACJ,OAAO,EAAE,CAAC;QAC1B,IAAIH,UAAU,CAACQ,MAAM,EAAE;UACrB;;OAEH,QAAQ,IAAI;;IAGf,OAAOP,SAAS;EAClB,CAAC,CAAC;AACJ;AAGA,OAAM,SAAUI,QAAQA,CAA6BI,KAAU;EAC7D,MAAM;IAAEZ,KAAK;IAAEK,KAAK;IAAEJ,KAAK;IAAEE;EAAU,CAAE,GAAGS,KAAK;EAEjD,IAAIP,KAAK,IAAIJ,KAAK,EAAE;IAClBE,UAAU,CAACM,QAAQ,EAAE;IACrB;;EAGFN,UAAU,CAACO,IAAI,CAACV,KAAK,CAAC;EAEtB,IAAIG,UAAU,CAACQ,MAAM,EAAE;IACrB;;EAGFC,KAAK,CAACP,KAAK,GAAGA,KAAK,GAAG,CAAC;EACvBO,KAAK,CAACZ,KAAK,GAAGA,KAAK,GAAG,CAAC;EAEvB,IAAI,CAACO,QAAQ,CAACK,KAAK,CAAC;AACtB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}