{"ast":null,"code":"import { isArray } from '../util/isArray';\nimport { race as raceStatic } from '../observable/race';\nexport function race(...observables) {\n  return function raceOperatorFunction(source) {\n    if (observables.length === 1 && isArray(observables[0])) {\n      observables = observables[0];\n    }\n    return source.lift.call(raceStatic(source, ...observables));\n  };\n}","map":{"version":3,"names":["isArray","race","raceStatic","observables","raceOperatorFunction","source","length","lift","call"],"sources":["C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\node_modules\\rxjs\\src\\internal\\operators\\race.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { MonoTypeOperatorFunction, OperatorFunction } from '../types';\nimport { race as raceStatic } from '../observable/race';\n\n/* tslint:disable:max-line-length */\n/** @deprecated Deprecated in favor of static race. */\nexport function race<T>(observables: Array<Observable<T>>): MonoTypeOperatorFunction<T>;\n/** @deprecated Deprecated in favor of static race. */\nexport function race<T, R>(observables: Array<Observable<T>>): OperatorFunction<T, R>;\n/** @deprecated Deprecated in favor of static race. */\nexport function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): MonoTypeOperatorFunction<T>;\n/** @deprecated Deprecated in favor of static race. */\nexport function race<T, R>(...observables: Array<Observable<any> | Array<Observable<any>>>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit a next,\n * error or complete notification from the combination of this Observable and supplied Observables.\n * @param {...Observables} ...observables Sources used to race for which Observable emits first.\n * @return {Observable} An Observable that mirrors the output of the first Observable to emit an item.\n * @method race\n * @owner Observable\n * @deprecated Deprecated in favor of static {@link race}.\n */\nexport function race<T>(...observables: (Observable<T> | Observable<T>[])[]): MonoTypeOperatorFunction<T> {\n  return function raceOperatorFunction(source: Observable<T>) {\n    // if the only argument is an array, it was most likely called with\n    // `pair([obs1, obs2, ...])`\n    if (observables.length === 1 && isArray(observables[0])) {\n      observables = observables[0] as Observable<T>[];\n    }\n\n    return source.lift.call(raceStatic(source, ...(observables as Observable<T>[])));\n  };\n}\n"],"mappings":"AACA,SAASA,OAAO,QAAQ,iBAAiB;AAEzC,SAASC,IAAI,IAAIC,UAAU,QAAQ,oBAAoB;AAsBvD,OAAM,SAAUD,IAAIA,CAAI,GAAGE,WAAgD;EACzE,OAAO,SAASC,oBAAoBA,CAACC,MAAqB;IAGxD,IAAIF,WAAW,CAACG,MAAM,KAAK,CAAC,IAAIN,OAAO,CAACG,WAAW,CAAC,CAAC,CAAC,CAAC,EAAE;MACvDA,WAAW,GAAGA,WAAW,CAAC,CAAC,CAAoB;;IAGjD,OAAOE,MAAM,CAACE,IAAI,CAACC,IAAI,CAACN,UAAU,CAACG,MAAM,EAAE,GAAIF,WAA+B,CAAC,CAAC;EAClF,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}