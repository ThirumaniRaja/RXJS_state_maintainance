{"ast":null,"code":"import { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function expand(project, concurrent = Number.POSITIVE_INFINITY, scheduler) {\n  concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n  return source => source.lift(new ExpandOperator(project, concurrent, scheduler));\n}\nexport class ExpandOperator {\n  constructor(project, concurrent, scheduler) {\n    this.project = project;\n    this.concurrent = concurrent;\n    this.scheduler = scheduler;\n  }\n  call(subscriber, source) {\n    return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n  }\n}\nexport class ExpandSubscriber extends SimpleOuterSubscriber {\n  constructor(destination, project, concurrent, scheduler) {\n    super(destination);\n    this.project = project;\n    this.concurrent = concurrent;\n    this.scheduler = scheduler;\n    this.index = 0;\n    this.active = 0;\n    this.hasCompleted = false;\n    if (concurrent < Number.POSITIVE_INFINITY) {\n      this.buffer = [];\n    }\n  }\n  static dispatch(arg) {\n    const {\n      subscriber,\n      result,\n      value,\n      index\n    } = arg;\n    subscriber.subscribeToProjection(result, value, index);\n  }\n  _next(value) {\n    const destination = this.destination;\n    if (destination.closed) {\n      this._complete();\n      return;\n    }\n    const index = this.index++;\n    if (this.active < this.concurrent) {\n      destination.next(value);\n      try {\n        const {\n          project\n        } = this;\n        const result = project(value, index);\n        if (!this.scheduler) {\n          this.subscribeToProjection(result, value, index);\n        } else {\n          const state = {\n            subscriber: this,\n            result,\n            value,\n            index\n          };\n          const destination = this.destination;\n          destination.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n        }\n      } catch (e) {\n        destination.error(e);\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n  subscribeToProjection(result, value, index) {\n    this.active++;\n    const destination = this.destination;\n    destination.add(innerSubscribe(result, new SimpleInnerSubscriber(this)));\n  }\n  _complete() {\n    this.hasCompleted = true;\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n    this.unsubscribe();\n  }\n  notifyNext(innerValue) {\n    this._next(innerValue);\n  }\n  notifyComplete() {\n    const buffer = this.buffer;\n    this.active--;\n    if (buffer && buffer.length > 0) {\n      this._next(buffer.shift());\n    }\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n}","map":{"version":3,"names":["SimpleOuterSubscriber","innerSubscribe","SimpleInnerSubscriber","expand","project","concurrent","Number","POSITIVE_INFINITY","scheduler","source","lift","ExpandOperator","constructor","call","subscriber","subscribe","ExpandSubscriber","destination","index","active","hasCompleted","buffer","dispatch","arg","result","value","subscribeToProjection","_next","closed","_complete","next","state","add","schedule","e","error","push","complete","unsubscribe","notifyNext","innerValue","notifyComplete","length","shift"],"sources":["C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\node_modules\\rxjs\\src\\internal\\operators\\expand.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { MonoTypeOperatorFunction, OperatorFunction, ObservableInput, SchedulerLike } from '../types';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\n\n/* tslint:disable:max-line-length */\nexport function expand<T, R>(project: (value: T, index: number) => ObservableInput<R>, concurrent?: number, scheduler?: SchedulerLike): OperatorFunction<T, R>;\nexport function expand<T>(project: (value: T, index: number) => ObservableInput<T>, concurrent?: number, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * ![](expand.png)\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * ## Example\n * Start emitting the powers of two on every click, at most 10 of them\n * ```ts\n * import { fromEvent, of } from 'rxjs';\n * import { expand, mapTo, delay, take } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const powersOfTwo = clicks.pipe(\n *   mapTo(1),\n *   expand(x => of(2 * x).pipe(delay(1000))),\n *   take(10),\n * );\n * powersOfTwo.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {SchedulerLike} [scheduler=null] The {@link SchedulerLike} to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nexport function expand<T, R>(project: (value: T, index: number) => ObservableInput<R>,\n                             concurrent: number = Number.POSITIVE_INFINITY,\n                             scheduler?: SchedulerLike): OperatorFunction<T, R> {\n  concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n\n  return (source: Observable<T>) => source.lift(new ExpandOperator(project, concurrent, scheduler));\n}\n\nexport class ExpandOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => ObservableInput<R>,\n              private concurrent: number,\n              private scheduler?: SchedulerLike) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n  }\n}\n\ninterface DispatchArg<T, R> {\n  subscriber: ExpandSubscriber<T, R>;\n  result: ObservableInput<R>;\n  value: any;\n  index: number;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ExpandSubscriber<T, R> extends SimpleOuterSubscriber<T, R> {\n  private index: number = 0;\n  private active: number = 0;\n  private hasCompleted: boolean = false;\n  private buffer?: any[];\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => ObservableInput<R>,\n              private concurrent: number,\n              private scheduler?: SchedulerLike) {\n    super(destination);\n    if (concurrent < Number.POSITIVE_INFINITY) {\n      this.buffer = [];\n    }\n  }\n\n  private static dispatch<T, R>(arg: DispatchArg<T, R>): void {\n    const {subscriber, result, value, index} = arg;\n    subscriber.subscribeToProjection(result, value, index);\n  }\n\n  protected _next(value: any): void {\n    const destination = this.destination;\n\n    if (destination.closed) {\n      this._complete();\n      return;\n    }\n\n    const index = this.index++;\n    if (this.active < this.concurrent) {\n      destination.next!(value);\n      try {\n        const { project } = this;\n        const result = project(value, index);\n        if (!this.scheduler) {\n          this.subscribeToProjection(result, value, index);\n        } else {\n          const state: DispatchArg<T, R> = { subscriber: this, result, value, index };\n          const destination = this.destination as Subscription;\n          destination.add(this.scheduler.schedule<DispatchArg<T, R>>(ExpandSubscriber.dispatch as any, 0, state));\n        }\n      } catch (e) {\n        destination.error!(e);\n      }\n    } else {\n      this.buffer!.push(value);\n    }\n  }\n\n  private subscribeToProjection(result: any, value: T, index: number): void {\n    this.active++;\n    const destination = this.destination as Subscription;\n    destination.add(innerSubscribe(result, new SimpleInnerSubscriber(this)));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete!();\n    }\n    this.unsubscribe();\n  }\n\n  notifyNext(innerValue: R): void {\n    this._next(innerValue);\n  }\n\n  notifyComplete(): void {\n    const buffer = this.buffer;\n    this.active--;\n    if (buffer && buffer.length > 0) {\n      this._next(buffer.shift());\n    }\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete!();\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}