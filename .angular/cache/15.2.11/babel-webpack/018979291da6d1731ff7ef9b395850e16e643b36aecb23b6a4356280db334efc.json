{"ast":null,"code":"import { async } from '../scheduler/async';\nimport { map } from './map';\nexport function timestamp(scheduler = async) {\n  return map(value => new Timestamp(value, scheduler.now()));\n}\nexport class Timestamp {\n  constructor(value, timestamp) {\n    this.value = value;\n    this.timestamp = timestamp;\n  }\n}","map":{"version":3,"names":["async","map","timestamp","scheduler","value","Timestamp","now","constructor"],"sources":["C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\node_modules\\rxjs\\src\\internal\\operators\\timestamp.ts"],"sourcesContent":["\nimport { async } from '../scheduler/async';\nimport { OperatorFunction, SchedulerLike, Timestamp as TimestampInterface } from '../types';\nimport { map } from './map';\n\n/**\n * Attaches a timestamp to each item emitted by an observable indicating when it was emitted\n *\n * The `timestamp` operator maps the *source* observable stream to an object of type\n * `{value: T, timestamp: R}`. The properties are generically typed. The `value` property contains the value\n * and type of the *source* observable. The `timestamp` is generated by the schedulers `now` function. By\n * default it uses the *async* scheduler which simply returns `Date.now()` (milliseconds since 1970/01/01\n * 00:00:00:000) and therefore is of type `number`.\n *\n * ![](timestamp.png)\n *\n * ## Example\n *\n * In this example there is a timestamp attached to the documents click event.\n *\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { timestamp } from 'rxjs/operators';\n *\n * const clickWithTimestamp = fromEvent(document, 'click').pipe(\n *   timestamp()\n * );\n *\n * // Emits data of type {value: MouseEvent, timestamp: number}\n * clickWithTimestamp.subscribe(data => {\n *   console.log(data);\n * });\n * ```\n *\n * @param scheduler\n * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timestamp\n * @owner Observable\n */\nexport function timestamp<T>(scheduler: SchedulerLike = async): OperatorFunction<T, Timestamp<T>> {\n  return map((value: T) => new Timestamp(value, scheduler.now()));\n  // return (source: Observable<T>) => source.lift(new TimestampOperator(scheduler));\n}\n\nexport class Timestamp<T> implements TimestampInterface<T> {\n  constructor(public value: T, public timestamp: number) {\n  }\n}\n"],"mappings":"AACA,SAASA,KAAK,QAAQ,oBAAoB;AAE1C,SAASC,GAAG,QAAQ,OAAO;AAoC3B,OAAM,SAAUC,SAASA,CAAIC,SAAA,GAA2BH,KAAK;EAC3D,OAAOC,GAAG,CAAEG,KAAQ,IAAK,IAAIC,SAAS,CAACD,KAAK,EAAED,SAAS,CAACG,GAAG,EAAE,CAAC,CAAC;AAEjE;AAEA,OAAM,MAAOD,SAAS;EACpBE,YAAmBH,KAAQ,EAASF,SAAiB;IAAlC,KAAAE,KAAK,GAALA,KAAK;IAAY,KAAAF,SAAS,GAATA,SAAS;EAC7C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}