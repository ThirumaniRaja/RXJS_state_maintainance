{"ast":null,"code":"import { map } from './map';\nimport { from } from '../observable/from';\nimport { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\nexport function mergeMap(project, resultSelector, concurrent = Number.POSITIVE_INFINITY) {\n  if (typeof resultSelector === 'function') {\n    return source => source.pipe(mergeMap((a, i) => from(project(a, i)).pipe(map((b, ii) => resultSelector(a, b, i, ii))), concurrent));\n  } else if (typeof resultSelector === 'number') {\n    concurrent = resultSelector;\n  }\n  return source => source.lift(new MergeMapOperator(project, concurrent));\n}\nexport class MergeMapOperator {\n  constructor(project, concurrent = Number.POSITIVE_INFINITY) {\n    this.project = project;\n    this.concurrent = concurrent;\n  }\n  call(observer, source) {\n    return source.subscribe(new MergeMapSubscriber(observer, this.project, this.concurrent));\n  }\n}\nexport class MergeMapSubscriber extends SimpleOuterSubscriber {\n  constructor(destination, project, concurrent = Number.POSITIVE_INFINITY) {\n    super(destination);\n    this.project = project;\n    this.concurrent = concurrent;\n    this.hasCompleted = false;\n    this.buffer = [];\n    this.active = 0;\n    this.index = 0;\n  }\n  _next(value) {\n    if (this.active < this.concurrent) {\n      this._tryNext(value);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n  _tryNext(value) {\n    let result;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.active++;\n    this._innerSub(result);\n  }\n  _innerSub(ish) {\n    const innerSubscriber = new SimpleInnerSubscriber(this);\n    const destination = this.destination;\n    destination.add(innerSubscriber);\n    const innerSubscription = innerSubscribe(ish, innerSubscriber);\n    if (innerSubscription !== innerSubscriber) {\n      destination.add(innerSubscription);\n    }\n  }\n  _complete() {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n    this.unsubscribe();\n  }\n  notifyNext(innerValue) {\n    this.destination.next(innerValue);\n  }\n  notifyComplete() {\n    const buffer = this.buffer;\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\nexport const flatMap = mergeMap;","map":{"version":3,"names":["map","from","SimpleOuterSubscriber","SimpleInnerSubscriber","innerSubscribe","mergeMap","project","resultSelector","concurrent","Number","POSITIVE_INFINITY","source","pipe","a","i","b","ii","lift","MergeMapOperator","constructor","call","observer","subscribe","MergeMapSubscriber","destination","hasCompleted","buffer","active","index","_next","value","_tryNext","push","result","err","error","_innerSub","ish","innerSubscriber","add","innerSubscription","_complete","length","complete","unsubscribe","notifyNext","innerValue","next","notifyComplete","shift","flatMap"],"sources":["C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\node_modules\\rxjs\\src\\internal\\operators\\mergeMap.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\nimport { map } from './map';\nimport { from } from '../observable/from';\nimport { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\n\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, O extends ObservableInput<any>>(project: (value: T, index: number) => O, concurrent?: number): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated resultSelector no longer supported, use inner map instead */\nexport function mergeMap<T, O extends ObservableInput<any>>(project: (value: T, index: number) => O, resultSelector: undefined, concurrent?: number): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated resultSelector no longer supported, use inner map instead */\nexport function mergeMap<T, R, O extends ObservableInput<any>>(project: (value: T, index: number) => O, resultSelector: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * ![](mergeMap.png)\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * ## Example\n * Map and flatten each letter to an Observable ticking every 1 second\n * ```ts\n * import { of, interval } from 'rxjs';\n * import { mergeMap, map } from 'rxjs/operators';\n *\n * const letters = of('a', 'b', 'c');\n * const result = letters.pipe(\n *   mergeMap(x => interval(1000).pipe(map(i => x+i))),\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n * ```\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional deprecated `resultSelector`) to each item\n * emitted by the source Observable and merging the results of the Observables\n * obtained from this transformation.\n */\nexport function mergeMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector?: ((outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R) | number,\n  concurrent: number = Number.POSITIVE_INFINITY\n): OperatorFunction<T, ObservedValueOf<O>|R> {\n  if (typeof resultSelector === 'function') {\n    // DEPRECATED PATH\n    return (source: Observable<T>) => source.pipe(\n      mergeMap((a, i) => from(project(a, i)).pipe(\n        map((b: any, ii: number) => resultSelector(a, b, i, ii)),\n      ), concurrent)\n    );\n  } else if (typeof resultSelector === 'number') {\n    concurrent = resultSelector;\n  }\n  return (source: Observable<T>) => source.lift(new MergeMapOperator(project, concurrent));\n}\n\nexport class MergeMapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => ObservableInput<R>,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeMapSubscriber(\n      observer, this.project, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapSubscriber<T, R> extends SimpleOuterSubscriber<T, R> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => ObservableInput<R>,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      this._tryNext(value);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  protected _tryNext(value: T) {\n    let result: ObservableInput<R>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error!(err);\n      return;\n    }\n    this.active++;\n    this._innerSub(result);\n  }\n\n  private _innerSub(ish: ObservableInput<R>): void {\n    const innerSubscriber = new SimpleInnerSubscriber(this);\n    const destination = this.destination as Subscription;\n    destination.add(innerSubscriber);\n    const innerSubscription = innerSubscribe(ish, innerSubscriber);\n    // The returned subscription will usually be the subscriber that was\n    // passed. However, interop subscribers will be wrapped and for\n    // unsubscriptions to chain correctly, the wrapper needs to be added, too.\n    if (innerSubscription !== innerSubscriber) {\n      destination.add(innerSubscription);\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete!();\n    }\n    this.unsubscribe();\n  }\n\n  notifyNext(innerValue: R): void {\n    this.destination.next!(innerValue);\n  }\n\n  notifyComplete(): void {\n    const buffer = this.buffer;\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift()!);\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete!();\n    }\n  }\n}\n\n/**\n * @deprecated renamed. Use {@link mergeMap}\n */\nexport const flatMap = mergeMap;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}