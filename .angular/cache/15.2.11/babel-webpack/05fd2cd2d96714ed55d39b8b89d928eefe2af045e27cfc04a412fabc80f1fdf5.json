{"ast":null,"code":"import { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { empty } from '../observable/empty';\nexport function takeLast(count) {\n  return function takeLastOperatorFunction(source) {\n    if (count === 0) {\n      return empty();\n    } else {\n      return source.lift(new TakeLastOperator(count));\n    }\n  };\n}\nclass TakeLastOperator {\n  constructor(total) {\n    this.total = total;\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError();\n    }\n  }\n  call(subscriber, source) {\n    return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\n  }\n}\nclass TakeLastSubscriber extends Subscriber {\n  constructor(destination, total) {\n    super(destination);\n    this.total = total;\n    this.ring = new Array();\n    this.count = 0;\n  }\n  _next(value) {\n    const ring = this.ring;\n    const total = this.total;\n    const count = this.count++;\n    if (ring.length < total) {\n      ring.push(value);\n    } else {\n      const index = count % total;\n      ring[index] = value;\n    }\n  }\n  _complete() {\n    const destination = this.destination;\n    let count = this.count;\n    if (count > 0) {\n      const total = this.count >= this.total ? this.total : this.count;\n      const ring = this.ring;\n      for (let i = 0; i < total; i++) {\n        const idx = count++ % total;\n        destination.next(ring[idx]);\n      }\n    }\n    destination.complete();\n  }\n}","map":{"version":3,"names":["Subscriber","ArgumentOutOfRangeError","empty","takeLast","count","takeLastOperatorFunction","source","lift","TakeLastOperator","constructor","total","call","subscriber","subscribe","TakeLastSubscriber","destination","ring","Array","_next","value","length","push","index","_complete","i","idx","next","complete"],"sources":["C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\node_modules\\rxjs\\src\\internal\\operators\\takeLast.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { empty } from '../observable/empty';\nimport { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * ![](takeLast.png)\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * ## Example\n * Take the last 3 values of an Observable with many values\n * ```ts\n * import { range } from 'rxjs';\n * import { takeLast } from 'rxjs/operators';\n *\n * const many = range(1, 100);\n * const lastThree = many.pipe(takeLast(3));\n * lastThree.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nexport function takeLast<T>(count: number): MonoTypeOperatorFunction<T> {\n  return function takeLastOperatorFunction(source: Observable<T>): Observable<T> {\n    if (count === 0) {\n      return empty();\n    } else {\n      return source.lift(new TakeLastOperator(count));\n    }\n  };\n}\n\nclass TakeLastOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeLastSubscriber<T> extends Subscriber<T> {\n  private ring: Array<T> = new Array();\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const ring = this.ring;\n    const total = this.total;\n    const count = this.count++;\n\n    if (ring.length < total) {\n      ring.push(value);\n    } else {\n      const index = count % total;\n      ring[index] = value;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    let count = this.count;\n\n    if (count > 0) {\n      const total = this.count >= this.total ? this.total : this.count;\n      const ring  = this.ring;\n\n      for (let i = 0; i < total; i++) {\n        const idx = (count++) % total;\n        destination.next(ring[idx]);\n      }\n    }\n\n    destination.complete();\n  }\n}\n"],"mappings":"AACA,SAASA,UAAU,QAAQ,eAAe;AAC1C,SAASC,uBAAuB,QAAQ,iCAAiC;AACzE,SAASC,KAAK,QAAQ,qBAAqB;AA8C3C,OAAM,SAAUC,QAAQA,CAAIC,KAAa;EACvC,OAAO,SAASC,wBAAwBA,CAACC,MAAqB;IAC5D,IAAIF,KAAK,KAAK,CAAC,EAAE;MACf,OAAOF,KAAK,EAAE;KACf,MAAM;MACL,OAAOI,MAAM,CAACC,IAAI,CAAC,IAAIC,gBAAgB,CAACJ,KAAK,CAAC,CAAC;;EAEnD,CAAC;AACH;AAEA,MAAMI,gBAAgB;EACpBC,YAAoBC,KAAa;IAAb,KAAAA,KAAK,GAALA,KAAK;IACvB,IAAI,IAAI,CAACA,KAAK,GAAG,CAAC,EAAE;MAClB,MAAM,IAAIT,uBAAuB,CAAvB,CAAuB;;EAErC;EAEAU,IAAIA,CAACC,UAAyB,EAAEN,MAAW;IACzC,OAAOA,MAAM,CAACO,SAAS,CAAC,IAAIC,kBAAkB,CAACF,UAAU,EAAE,IAAI,CAACF,KAAK,CAAC,CAAC;EACzE;;AAQF,MAAMI,kBAAsB,SAAQd,UAAa;EAI/CS,YAAYM,WAA0B,EAAUL,KAAa;IAC3D,KAAK,CAACK,WAAW,CAAC;IAD4B,KAAAL,KAAK,GAALA,KAAK;IAH7C,KAAAM,IAAI,GAAa,IAAIC,KAAK,EAAE;IAC5B,KAAAb,KAAK,GAAW,CAAC;EAIzB;EAEUc,KAAKA,CAACC,KAAQ;IACtB,MAAMH,IAAI,GAAG,IAAI,CAACA,IAAI;IACtB,MAAMN,KAAK,GAAG,IAAI,CAACA,KAAK;IACxB,MAAMN,KAAK,GAAG,IAAI,CAACA,KAAK,EAAE;IAE1B,IAAIY,IAAI,CAACI,MAAM,GAAGV,KAAK,EAAE;MACvBM,IAAI,CAACK,IAAI,CAACF,KAAK,CAAC;KACjB,MAAM;MACL,MAAMG,KAAK,GAAGlB,KAAK,GAAGM,KAAK;MAC3BM,IAAI,CAACM,KAAK,CAAC,GAAGH,KAAK;;EAEvB;EAEUI,SAASA,CAAA;IACjB,MAAMR,WAAW,GAAG,IAAI,CAACA,WAAW;IACpC,IAAIX,KAAK,GAAG,IAAI,CAACA,KAAK;IAEtB,IAAIA,KAAK,GAAG,CAAC,EAAE;MACb,MAAMM,KAAK,GAAG,IAAI,CAACN,KAAK,IAAI,IAAI,CAACM,KAAK,GAAG,IAAI,CAACA,KAAK,GAAG,IAAI,CAACN,KAAK;MAChE,MAAMY,IAAI,GAAI,IAAI,CAACA,IAAI;MAEvB,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGd,KAAK,EAAEc,CAAC,EAAE,EAAE;QAC9B,MAAMC,GAAG,GAAIrB,KAAK,EAAE,GAAIM,KAAK;QAC7BK,WAAW,CAACW,IAAI,CAACV,IAAI,CAACS,GAAG,CAAC,CAAC;;;IAI/BV,WAAW,CAACY,QAAQ,EAAE;EACxB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}