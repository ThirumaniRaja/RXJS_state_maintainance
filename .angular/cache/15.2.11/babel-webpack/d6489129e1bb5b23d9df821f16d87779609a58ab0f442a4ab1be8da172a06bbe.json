{"ast":null,"code":"import { Subject } from './Subject';\nimport { Subscription } from './Subscription';\nexport class AsyncSubject extends Subject {\n  constructor() {\n    super(...arguments);\n    this.value = null;\n    this.hasNext = false;\n    this.hasCompleted = false;\n  }\n  _subscribe(subscriber) {\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.hasCompleted && this.hasNext) {\n      subscriber.next(this.value);\n      subscriber.complete();\n      return Subscription.EMPTY;\n    }\n    return super._subscribe(subscriber);\n  }\n  next(value) {\n    if (!this.hasCompleted) {\n      this.value = value;\n      this.hasNext = true;\n    }\n  }\n  error(error) {\n    if (!this.hasCompleted) {\n      super.error(error);\n    }\n  }\n  complete() {\n    this.hasCompleted = true;\n    if (this.hasNext) {\n      super.next(this.value);\n    }\n    super.complete();\n  }\n}","map":{"version":3,"names":["Subject","Subscription","AsyncSubject","constructor","value","hasNext","hasCompleted","_subscribe","subscriber","hasError","error","thrownError","EMPTY","next","complete"],"sources":["C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\node_modules\\rxjs\\src\\internal\\AsyncSubject.ts"],"sourcesContent":["import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\n\n/**\n * A variant of Subject that only emits a value when it completes. It will emit\n * its latest value to all its observers on completion.\n *\n * @class AsyncSubject<T>\n */\nexport class AsyncSubject<T> extends Subject<T> {\n  private value: T = null;\n  private hasNext: boolean = false;\n  private hasCompleted: boolean = false;\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<any>): Subscription {\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.hasCompleted && this.hasNext) {\n      subscriber.next(this.value);\n      subscriber.complete();\n      return Subscription.EMPTY;\n    }\n    return super._subscribe(subscriber);\n  }\n\n  next(value: T): void {\n    if (!this.hasCompleted) {\n      this.value = value;\n      this.hasNext = true;\n    }\n  }\n\n  error(error: any): void {\n    if (!this.hasCompleted) {\n      super.error(error);\n    }\n  }\n\n  complete(): void {\n    this.hasCompleted = true;\n    if (this.hasNext) {\n      super.next(this.value);\n    }\n    super.complete();\n  }\n}\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,WAAW;AAEnC,SAASC,YAAY,QAAQ,gBAAgB;AAQ7C,OAAM,MAAOC,YAAgB,SAAQF,OAAU;EAA/CG,YAAA;;IACU,KAAAC,KAAK,GAAM,IAAI;IACf,KAAAC,OAAO,GAAY,KAAK;IACxB,KAAAC,YAAY,GAAY,KAAK;EAmCvC;EAhCEC,UAAUA,CAACC,UAA2B;IACpC,IAAI,IAAI,CAACC,QAAQ,EAAE;MACjBD,UAAU,CAACE,KAAK,CAAC,IAAI,CAACC,WAAW,CAAC;MAClC,OAAOV,YAAY,CAACW,KAAK;KAC1B,MAAM,IAAI,IAAI,CAACN,YAAY,IAAI,IAAI,CAACD,OAAO,EAAE;MAC5CG,UAAU,CAACK,IAAI,CAAC,IAAI,CAACT,KAAK,CAAC;MAC3BI,UAAU,CAACM,QAAQ,EAAE;MACrB,OAAOb,YAAY,CAACW,KAAK;;IAE3B,OAAO,KAAK,CAACL,UAAU,CAACC,UAAU,CAAC;EACrC;EAEAK,IAAIA,CAACT,KAAQ;IACX,IAAI,CAAC,IAAI,CAACE,YAAY,EAAE;MACtB,IAAI,CAACF,KAAK,GAAGA,KAAK;MAClB,IAAI,CAACC,OAAO,GAAG,IAAI;;EAEvB;EAEAK,KAAKA,CAACA,KAAU;IACd,IAAI,CAAC,IAAI,CAACJ,YAAY,EAAE;MACtB,KAAK,CAACI,KAAK,CAACA,KAAK,CAAC;;EAEtB;EAEAI,QAAQA,CAAA;IACN,IAAI,CAACR,YAAY,GAAG,IAAI;IACxB,IAAI,IAAI,CAACD,OAAO,EAAE;MAChB,KAAK,CAACQ,IAAI,CAAC,IAAI,CAACT,KAAK,CAAC;;IAExB,KAAK,CAACU,QAAQ,EAAE;EAClB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}