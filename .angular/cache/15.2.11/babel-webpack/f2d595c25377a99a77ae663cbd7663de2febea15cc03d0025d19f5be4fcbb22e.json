{"ast":null,"code":"import { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function delayWhen(delayDurationSelector, subscriptionDelay) {\n  if (subscriptionDelay) {\n    return source => new SubscriptionDelayObservable(source, subscriptionDelay).lift(new DelayWhenOperator(delayDurationSelector));\n  }\n  return source => source.lift(new DelayWhenOperator(delayDurationSelector));\n}\nclass DelayWhenOperator {\n  constructor(delayDurationSelector) {\n    this.delayDurationSelector = delayDurationSelector;\n  }\n  call(subscriber, source) {\n    return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n  }\n}\nclass DelayWhenSubscriber extends OuterSubscriber {\n  constructor(destination, delayDurationSelector) {\n    super(destination);\n    this.delayDurationSelector = delayDurationSelector;\n    this.completed = false;\n    this.delayNotifierSubscriptions = [];\n    this.index = 0;\n  }\n  notifyNext(outerValue, _innerValue, _outerIndex, _innerIndex, innerSub) {\n    this.destination.next(outerValue);\n    this.removeSubscription(innerSub);\n    this.tryComplete();\n  }\n  notifyError(error, innerSub) {\n    this._error(error);\n  }\n  notifyComplete(innerSub) {\n    const value = this.removeSubscription(innerSub);\n    if (value) {\n      this.destination.next(value);\n    }\n    this.tryComplete();\n  }\n  _next(value) {\n    const index = this.index++;\n    try {\n      const delayNotifier = this.delayDurationSelector(value, index);\n      if (delayNotifier) {\n        this.tryDelay(delayNotifier, value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n  _complete() {\n    this.completed = true;\n    this.tryComplete();\n    this.unsubscribe();\n  }\n  removeSubscription(subscription) {\n    subscription.unsubscribe();\n    const subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n    if (subscriptionIdx !== -1) {\n      this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n    }\n    return subscription.outerValue;\n  }\n  tryDelay(delayNotifier, value) {\n    const notifierSubscription = subscribeToResult(this, delayNotifier, value);\n    if (notifierSubscription && !notifierSubscription.closed) {\n      const destination = this.destination;\n      destination.add(notifierSubscription);\n      this.delayNotifierSubscriptions.push(notifierSubscription);\n    }\n  }\n  tryComplete() {\n    if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n      this.destination.complete();\n    }\n  }\n}\nclass SubscriptionDelayObservable extends Observable {\n  constructor(source, subscriptionDelay) {\n    super();\n    this.source = source;\n    this.subscriptionDelay = subscriptionDelay;\n  }\n  _subscribe(subscriber) {\n    this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n  }\n}\nclass SubscriptionDelaySubscriber extends Subscriber {\n  constructor(parent, source) {\n    super();\n    this.parent = parent;\n    this.source = source;\n    this.sourceSubscribed = false;\n  }\n  _next(unused) {\n    this.subscribeToSource();\n  }\n  _error(err) {\n    this.unsubscribe();\n    this.parent.error(err);\n  }\n  _complete() {\n    this.unsubscribe();\n    this.subscribeToSource();\n  }\n  subscribeToSource() {\n    if (!this.sourceSubscribed) {\n      this.sourceSubscribed = true;\n      this.unsubscribe();\n      this.source.subscribe(this.parent);\n    }\n  }\n}","map":{"version":3,"names":["Subscriber","Observable","OuterSubscriber","subscribeToResult","delayWhen","delayDurationSelector","subscriptionDelay","source","SubscriptionDelayObservable","lift","DelayWhenOperator","constructor","call","subscriber","subscribe","DelayWhenSubscriber","destination","completed","delayNotifierSubscriptions","index","notifyNext","outerValue","_innerValue","_outerIndex","_innerIndex","innerSub","next","removeSubscription","tryComplete","notifyError","error","_error","notifyComplete","value","_next","delayNotifier","tryDelay","err","_complete","unsubscribe","subscription","subscriptionIdx","indexOf","splice","notifierSubscription","closed","add","push","length","complete","_subscribe","SubscriptionDelaySubscriber","parent","sourceSubscribed","unused","subscribeToSource"],"sources":["C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\node_modules\\rxjs\\src\\internal\\operators\\delayWhen.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/* tslint:disable:max-line-length */\n/** @deprecated In future versions, empty notifiers will no longer re-emit the source value on the output observable. */\nexport function delayWhen<T>(delayDurationSelector: (value: T, index: number) => Observable<never>, subscriptionDelay?: Observable<any>): MonoTypeOperatorFunction<T>;\nexport function delayWhen<T>(delayDurationSelector: (value: T, index: number) => Observable<any>, subscriptionDelay?: Observable<any>): MonoTypeOperatorFunction<T>;\n/* tslint:disable:max-line-length */\n\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * ![](delayWhen.png)\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n * The completion of the notifier triggering the emission of the source value\n * is deprecated behavior and will be removed in future versions.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * ## Example\n * Delay each click by a random amount of time, between 0 and 5 seconds\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { delayWhen } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const delayedClicks = clicks.pipe(\n *   delayWhen(event => interval(Math.random() * 5000)),\n * );\n * delayedClicks.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link delay}\n * @see {@link throttle}\n * @see {@link throttleTime}\n * @see {@link debounce}\n * @see {@link debounceTime}\n * @see {@link sample}\n * @see {@link sampleTime}\n * @see {@link audit}\n * @see {@link auditTime}\n *\n * @param {function(value: T, index: number): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nexport function delayWhen<T>(delayDurationSelector: (value: T, index: number) => Observable<any>,\n                             subscriptionDelay?: Observable<any>): MonoTypeOperatorFunction<T> {\n  if (subscriptionDelay) {\n    return (source: Observable<T>) =>\n      new SubscriptionDelayObservable(source, subscriptionDelay)\n        .lift(new DelayWhenOperator(delayDurationSelector));\n  }\n  return (source: Observable<T>) => source.lift(new DelayWhenOperator(delayDurationSelector));\n}\n\nclass DelayWhenOperator<T> implements Operator<T, T> {\n  constructor(private delayDurationSelector: (value: T, index: number) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelayWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private completed: boolean = false;\n  private delayNotifierSubscriptions: Array<Subscription> = [];\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private delayDurationSelector: (value: T, index: number) => Observable<any>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, _innerValue: any,\n             _outerIndex: number, _innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next!(outerValue);\n    this.removeSubscription(innerSub);\n    this.tryComplete();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    const value = this.removeSubscription(innerSub);\n    if (value) {\n      this.destination.next!(value);\n    }\n    this.tryComplete();\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    try {\n      const delayNotifier = this.delayDurationSelector(value, index);\n      if (delayNotifier) {\n        this.tryDelay(delayNotifier, value);\n      }\n    } catch (err) {\n      this.destination.error!(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.completed = true;\n    this.tryComplete();\n    this.unsubscribe();\n  }\n\n  private removeSubscription(subscription: InnerSubscriber<T, R>): T {\n    subscription.unsubscribe();\n\n    const subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n    if (subscriptionIdx !== -1) {\n      this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n    }\n\n    return subscription.outerValue;\n  }\n\n  private tryDelay(delayNotifier: Observable<any>, value: T): void {\n    const notifierSubscription = subscribeToResult(this, delayNotifier, value);\n\n    if (notifierSubscription && !notifierSubscription.closed) {\n      const destination = this.destination as Subscription;\n      destination.add(notifierSubscription);\n      this.delayNotifierSubscriptions.push(notifierSubscription);\n    }\n  }\n\n  private tryComplete(): void {\n    if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n      this.destination.complete!();\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelayObservable<T> extends Observable<T> {\n  constructor(public source: Observable<T>, private subscriptionDelay: Observable<any>) {\n    super();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>) {\n    this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelaySubscriber<T> extends Subscriber<T> {\n  private sourceSubscribed: boolean = false;\n\n  constructor(private parent: Subscriber<T>, private source: Observable<T>) {\n    super();\n  }\n\n  protected _next(unused: any) {\n    this.subscribeToSource();\n  }\n\n  protected _error(err: any) {\n    this.unsubscribe();\n    this.parent.error(err);\n  }\n\n  protected _complete() {\n    this.unsubscribe();\n    this.subscribeToSource();\n  }\n\n  private subscribeToSource(): void {\n    if (!this.sourceSubscribed) {\n      this.sourceSubscribed = true;\n      this.unsubscribe();\n      this.source.subscribe(this.parent);\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}