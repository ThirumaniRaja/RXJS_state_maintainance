{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, InjectionToken, Inject, isDevMode, inject, makeEnvironmentProviders, ENVIRONMENT_INITIALIZER, NgModule, Optional } from '@angular/core';\nimport { BehaviorSubject, Observable, Subject, queueScheduler } from 'rxjs';\nimport { observeOn, withLatestFrom, scan, pluck, map, distinctUntilChanged } from 'rxjs/operators';\nconst REGISTERED_ACTION_TYPES = {};\nfunction resetRegisteredActionTypes() {\n  for (const key of Object.keys(REGISTERED_ACTION_TYPES)) {\n    delete REGISTERED_ACTION_TYPES[key];\n  }\n}\n\n/**\n * @description\n * Creates a configured `Creator` function that, when called, returns an object in the shape of the `Action` interface.\n *\n * Action creators reduce the explicitness of class-based action creators.\n *\n * @param type Describes the action that will be dispatched\n * @param config Additional metadata needed for the handling of the action.  See {@link createAction#usage-notes Usage Notes}.\n *\n * @usageNotes\n *\n * **Declaring an action creator**\n *\n * Without additional metadata:\n * ```ts\n * export const increment = createAction('[Counter] Increment');\n * ```\n * With additional metadata:\n * ```ts\n * export const loginSuccess = createAction(\n *   '[Auth/API] Login Success',\n *   props<{ user: User }>()\n * );\n * ```\n * With a function:\n * ```ts\n * export const loginSuccess = createAction(\n *   '[Auth/API] Login Success',\n *   (response: Response) => response.user\n * );\n * ```\n *\n * **Dispatching an action**\n *\n * Without additional metadata:\n * ```ts\n * store.dispatch(increment());\n * ```\n * With additional metadata:\n * ```ts\n * store.dispatch(loginSuccess({ user: newUser }));\n * ```\n *\n * **Referencing an action in a reducer**\n *\n * Using a switch statement:\n * ```ts\n * switch (action.type) {\n *   // ...\n *   case AuthApiActions.loginSuccess.type: {\n *     return {\n *       ...state,\n *       user: action.user\n *     };\n *   }\n * }\n * ```\n * Using a reducer creator:\n * ```ts\n * on(AuthApiActions.loginSuccess, (state, { user }) => ({ ...state, user }))\n * ```\n *\n *  **Referencing an action in an effect**\n * ```ts\n * effectName$ = createEffect(\n *   () => this.actions$.pipe(\n *     ofType(AuthApiActions.loginSuccess),\n *     // ...\n *   )\n * );\n * ```\n */\nfunction createAction(type, config) {\n  REGISTERED_ACTION_TYPES[type] = (REGISTERED_ACTION_TYPES[type] || 0) + 1;\n  if (typeof config === 'function') {\n    return defineType(type, (...args) => ({\n      ...config(...args),\n      type\n    }));\n  }\n  const as = config ? config._as : 'empty';\n  switch (as) {\n    case 'empty':\n      return defineType(type, () => ({\n        type\n      }));\n    case 'props':\n      return defineType(type, props => ({\n        ...props,\n        type\n      }));\n    default:\n      throw new Error('Unexpected config.');\n  }\n}\nfunction props() {\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  return {\n    _as: 'props',\n    _p: undefined\n  };\n}\nfunction union(creators) {\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  return undefined;\n}\nfunction defineType(type, creator) {\n  return Object.defineProperty(creator, 'type', {\n    value: type,\n    writable: false\n  });\n}\nfunction capitalize(text) {\n  return text.charAt(0).toUpperCase() + text.substring(1);\n}\n\n/**\n * @description\n * A function that creates a group of action creators with the same source.\n *\n * @param config An object that contains a source and dictionary of events.\n * An event is a key-value pair of an event name and event props.\n * @returns A dictionary of action creators.\n * The name of each action creator is created by camel casing the event name.\n * The type of each action is created using the \"[Source] Event Name\" pattern.\n *\n * @usageNotes\n *\n * ```ts\n * const authApiActions = createActionGroup({\n *   source: 'Auth API',\n *   events: {\n *     // defining events with payload using the `props` function\n *     'Login Success': props<{ userId: number; token: string }>(),\n *     'Login Failure': props<{ error: string }>(),\n *\n *     // defining an event without payload using the `emptyProps` function\n *     'Logout Success': emptyProps(),\n *\n *     // defining an event with payload using the props factory\n *     'Logout Failure': (error: Error) => ({ error }),\n *   },\n * });\n *\n * // action type: \"[Auth API] Login Success\"\n * authApiActions.loginSuccess({ userId: 10, token: 'ngrx' });\n *\n * // action type: \"[Auth API] Login Failure\"\n * authApiActions.loginFailure({ error: 'Login Failure!' });\n *\n * // action type: \"[Auth API] Logout Success\"\n * authApiActions.logoutSuccess();\n *\n * // action type: \"[Auth API] Logout Failure\";\n * authApiActions.logoutFailure(new Error('Logout Failure!'));\n * ```\n */\nfunction createActionGroup(config) {\n  const {\n    source,\n    events\n  } = config;\n  return Object.keys(events).reduce((actionGroup, eventName) => ({\n    ...actionGroup,\n    [toActionName(eventName)]: createAction(toActionType(source, eventName), events[eventName])\n  }), {});\n}\nfunction emptyProps() {\n  return props();\n}\nfunction toActionName(eventName) {\n  return eventName.trim().toLowerCase().split(' ').map((word, i) => i === 0 ? word : capitalize(word)).join('');\n}\nfunction toActionType(source, eventName) {\n  return `[${source}] ${eventName}`;\n}\nconst INIT = '@ngrx/store/init';\nlet ActionsSubject = /*#__PURE__*/(() => {\n  class ActionsSubject extends BehaviorSubject {\n    constructor() {\n      super({\n        type: INIT\n      });\n    }\n    next(action) {\n      if (typeof action === 'function') {\n        throw new TypeError(`\n        Dispatch expected an object, instead it received a function.\n        If you're using the createAction function, make sure to invoke the function\n        before dispatching the action. For example, someAction should be someAction().`);\n      } else if (typeof action === 'undefined') {\n        throw new TypeError(`Actions must be objects`);\n      } else if (typeof action.type === 'undefined') {\n        throw new TypeError(`Actions must have a type property`);\n      }\n      super.next(action);\n    }\n    complete() {\n      /* noop */\n    }\n    ngOnDestroy() {\n      super.complete();\n    }\n  }\n  /** @nocollapse */\n  /** @nocollapse */ActionsSubject.ɵfac = function ActionsSubject_Factory(t) {\n    return new (t || ActionsSubject)();\n  };\n  ActionsSubject.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ActionsSubject,\n    factory: ActionsSubject.ɵfac\n  });\n  return ActionsSubject;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst ACTIONS_SUBJECT_PROVIDERS = [ActionsSubject];\nconst _ROOT_STORE_GUARD = new InjectionToken('@ngrx/store Internal Root Guard');\nconst _INITIAL_STATE = new InjectionToken('@ngrx/store Internal Initial State');\nconst INITIAL_STATE = new InjectionToken('@ngrx/store Initial State');\nconst REDUCER_FACTORY = new InjectionToken('@ngrx/store Reducer Factory');\nconst _REDUCER_FACTORY = new InjectionToken('@ngrx/store Internal Reducer Factory Provider');\nconst INITIAL_REDUCERS = new InjectionToken('@ngrx/store Initial Reducers');\nconst _INITIAL_REDUCERS = new InjectionToken('@ngrx/store Internal Initial Reducers');\nconst STORE_FEATURES = new InjectionToken('@ngrx/store Store Features');\nconst _STORE_REDUCERS = new InjectionToken('@ngrx/store Internal Store Reducers');\nconst _FEATURE_REDUCERS = new InjectionToken('@ngrx/store Internal Feature Reducers');\nconst _FEATURE_CONFIGS = new InjectionToken('@ngrx/store Internal Feature Configs');\nconst _STORE_FEATURES = new InjectionToken('@ngrx/store Internal Store Features');\nconst _FEATURE_REDUCERS_TOKEN = new InjectionToken('@ngrx/store Internal Feature Reducers Token');\nconst FEATURE_REDUCERS = new InjectionToken('@ngrx/store Feature Reducers');\n/**\n * User-defined meta reducers from StoreModule.forRoot()\n */\nconst USER_PROVIDED_META_REDUCERS = new InjectionToken('@ngrx/store User Provided Meta Reducers');\n/**\n * Meta reducers defined either internally by @ngrx/store or by library authors\n */\nconst META_REDUCERS = new InjectionToken('@ngrx/store Meta Reducers');\n/**\n * Concats the user provided meta reducers and the meta reducers provided on the multi\n * injection token\n */\nconst _RESOLVED_META_REDUCERS = new InjectionToken('@ngrx/store Internal Resolved Meta Reducers');\n/**\n * Runtime checks defined by the user via an InjectionToken\n * Defaults to `_USER_RUNTIME_CHECKS`\n */\nconst USER_RUNTIME_CHECKS = new InjectionToken('@ngrx/store User Runtime Checks Config');\n/**\n * Runtime checks defined by the user via forRoot()\n */\nconst _USER_RUNTIME_CHECKS = new InjectionToken('@ngrx/store Internal User Runtime Checks Config');\n/**\n * Runtime checks currently in use\n */\nconst ACTIVE_RUNTIME_CHECKS = new InjectionToken('@ngrx/store Internal Runtime Checks');\nconst _ACTION_TYPE_UNIQUENESS_CHECK = new InjectionToken('@ngrx/store Check if Action types are unique');\n/**\n * InjectionToken that registers the global Store.\n * Mainly used to provide a hook that can be injected\n * to ensure the root state is loaded before something\n * that depends on it.\n */\nconst ROOT_STORE_PROVIDER = new InjectionToken('@ngrx/store Root Store Provider');\n/**\n * InjectionToken that registers feature states.\n * Mainly used to provide a hook that can be injected\n * to ensure feature state is loaded before something\n * that depends on it.\n */\nconst FEATURE_STATE_PROVIDER = new InjectionToken('@ngrx/store Feature State Provider');\n\n/**\n * @description\n * Combines reducers for individual features into a single reducer.\n *\n * You can use this function to delegate handling of state transitions to multiple reducers, each acting on their\n * own sub-state within the root state.\n *\n * @param reducers An object mapping keys of the root state to their corresponding feature reducer.\n * @param initialState Provides a state value if the current state is `undefined`, as it is initially.\n * @returns A reducer function.\n *\n * @usageNotes\n *\n * **Example combining two feature reducers into one \"root\" reducer**\n *\n * ```ts\n * export const reducer = combineReducers({\n *   featureA: featureAReducer,\n *   featureB: featureBReducer\n * });\n * ```\n *\n * You can also override the initial states of the sub-features:\n * ```ts\n * export const reducer = combineReducers({\n *   featureA: featureAReducer,\n *   featureB: featureBReducer\n * }, {\n *   featureA: { counterA: 13 },\n *   featureB: { counterB: 37 }\n * });\n * ```\n */\nfunction combineReducers(reducers, initialState = {}) {\n  const reducerKeys = Object.keys(reducers);\n  const finalReducers = {};\n  for (let i = 0; i < reducerKeys.length; i++) {\n    const key = reducerKeys[i];\n    if (typeof reducers[key] === 'function') {\n      finalReducers[key] = reducers[key];\n    }\n  }\n  const finalReducerKeys = Object.keys(finalReducers);\n  return function combination(state, action) {\n    state = state === undefined ? initialState : state;\n    let hasChanged = false;\n    const nextState = {};\n    for (let i = 0; i < finalReducerKeys.length; i++) {\n      const key = finalReducerKeys[i];\n      const reducer = finalReducers[key];\n      const previousStateForKey = state[key];\n      const nextStateForKey = reducer(previousStateForKey, action);\n      nextState[key] = nextStateForKey;\n      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;\n    }\n    return hasChanged ? nextState : state;\n  };\n}\nfunction omit(object, keyToRemove) {\n  return Object.keys(object).filter(key => key !== keyToRemove).reduce((result, key) => Object.assign(result, {\n    [key]: object[key]\n  }), {});\n}\nfunction compose(...functions) {\n  return function (arg) {\n    if (functions.length === 0) {\n      return arg;\n    }\n    const last = functions[functions.length - 1];\n    const rest = functions.slice(0, -1);\n    return rest.reduceRight((composed, fn) => fn(composed), last(arg));\n  };\n}\nfunction createReducerFactory(reducerFactory, metaReducers) {\n  if (Array.isArray(metaReducers) && metaReducers.length > 0) {\n    reducerFactory = compose.apply(null, [...metaReducers, reducerFactory]);\n  }\n  return (reducers, initialState) => {\n    const reducer = reducerFactory(reducers);\n    return (state, action) => {\n      state = state === undefined ? initialState : state;\n      return reducer(state, action);\n    };\n  };\n}\nfunction createFeatureReducerFactory(metaReducers) {\n  const reducerFactory = Array.isArray(metaReducers) && metaReducers.length > 0 ? compose(...metaReducers) : r => r;\n  return (reducer, initialState) => {\n    reducer = reducerFactory(reducer);\n    return (state, action) => {\n      state = state === undefined ? initialState : state;\n      return reducer(state, action);\n    };\n  };\n}\nclass ReducerObservable extends Observable {}\nclass ReducerManagerDispatcher extends ActionsSubject {}\nconst UPDATE = '@ngrx/store/update-reducers';\nlet ReducerManager = /*#__PURE__*/(() => {\n  class ReducerManager extends BehaviorSubject {\n    constructor(dispatcher, initialState, reducers, reducerFactory) {\n      super(reducerFactory(reducers, initialState));\n      this.dispatcher = dispatcher;\n      this.initialState = initialState;\n      this.reducers = reducers;\n      this.reducerFactory = reducerFactory;\n    }\n    get currentReducers() {\n      return this.reducers;\n    }\n    addFeature(feature) {\n      this.addFeatures([feature]);\n    }\n    addFeatures(features) {\n      const reducers = features.reduce((reducerDict, {\n        reducers,\n        reducerFactory,\n        metaReducers,\n        initialState,\n        key\n      }) => {\n        const reducer = typeof reducers === 'function' ? createFeatureReducerFactory(metaReducers)(reducers, initialState) : createReducerFactory(reducerFactory, metaReducers)(reducers, initialState);\n        reducerDict[key] = reducer;\n        return reducerDict;\n      }, {});\n      this.addReducers(reducers);\n    }\n    removeFeature(feature) {\n      this.removeFeatures([feature]);\n    }\n    removeFeatures(features) {\n      this.removeReducers(features.map(p => p.key));\n    }\n    addReducer(key, reducer) {\n      this.addReducers({\n        [key]: reducer\n      });\n    }\n    addReducers(reducers) {\n      this.reducers = {\n        ...this.reducers,\n        ...reducers\n      };\n      this.updateReducers(Object.keys(reducers));\n    }\n    removeReducer(featureKey) {\n      this.removeReducers([featureKey]);\n    }\n    removeReducers(featureKeys) {\n      featureKeys.forEach(key => {\n        this.reducers = omit(this.reducers, key) /*TODO(#823)*/;\n      });\n      this.updateReducers(featureKeys);\n    }\n    updateReducers(featureKeys) {\n      this.next(this.reducerFactory(this.reducers, this.initialState));\n      this.dispatcher.next({\n        type: UPDATE,\n        features: featureKeys\n      });\n    }\n    ngOnDestroy() {\n      this.complete();\n    }\n  }\n  /** @nocollapse */\n  /** @nocollapse */ReducerManager.ɵfac = function ReducerManager_Factory(t) {\n    return new (t || ReducerManager)(i0.ɵɵinject(ReducerManagerDispatcher), i0.ɵɵinject(INITIAL_STATE), i0.ɵɵinject(INITIAL_REDUCERS), i0.ɵɵinject(REDUCER_FACTORY));\n  };\n  ReducerManager.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ReducerManager,\n    factory: ReducerManager.ɵfac\n  });\n  return ReducerManager;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst REDUCER_MANAGER_PROVIDERS = [ReducerManager, {\n  provide: ReducerObservable,\n  useExisting: ReducerManager\n}, {\n  provide: ReducerManagerDispatcher,\n  useExisting: ActionsSubject\n}];\nlet ScannedActionsSubject = /*#__PURE__*/(() => {\n  class ScannedActionsSubject extends Subject {\n    ngOnDestroy() {\n      this.complete();\n    }\n  }\n  /** @nocollapse */\n  /** @nocollapse */ScannedActionsSubject.ɵfac = /* @__PURE__ */function () {\n    let ɵScannedActionsSubject_BaseFactory;\n    return function ScannedActionsSubject_Factory(t) {\n      return (ɵScannedActionsSubject_BaseFactory || (ɵScannedActionsSubject_BaseFactory = i0.ɵɵgetInheritedFactory(ScannedActionsSubject)))(t || ScannedActionsSubject);\n    };\n  }();\n  ScannedActionsSubject.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ScannedActionsSubject,\n    factory: ScannedActionsSubject.ɵfac\n  });\n  return ScannedActionsSubject;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst SCANNED_ACTIONS_SUBJECT_PROVIDERS = [ScannedActionsSubject];\nclass StateObservable extends Observable {}\nlet State = /*#__PURE__*/(() => {\n  class State extends BehaviorSubject {\n    constructor(actions$, reducer$, scannedActions, initialState) {\n      super(initialState);\n      const actionsOnQueue$ = actions$.pipe(observeOn(queueScheduler));\n      const withLatestReducer$ = actionsOnQueue$.pipe(withLatestFrom(reducer$));\n      const seed = {\n        state: initialState\n      };\n      const stateAndAction$ = withLatestReducer$.pipe(scan(reduceState, seed));\n      this.stateSubscription = stateAndAction$.subscribe(({\n        state,\n        action\n      }) => {\n        this.next(state);\n        scannedActions.next(action);\n      });\n    }\n    ngOnDestroy() {\n      this.stateSubscription.unsubscribe();\n      this.complete();\n    }\n  }\n  State.INIT = INIT;\n  /** @nocollapse */\n  /** @nocollapse */\n  State.ɵfac = function State_Factory(t) {\n    return new (t || State)(i0.ɵɵinject(ActionsSubject), i0.ɵɵinject(ReducerObservable), i0.ɵɵinject(ScannedActionsSubject), i0.ɵɵinject(INITIAL_STATE));\n  };\n  State.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: State,\n    factory: State.ɵfac\n  });\n  return State;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nfunction reduceState(stateActionPair = {\n  state: undefined\n}, [action, reducer]) {\n  const {\n    state\n  } = stateActionPair;\n  return {\n    state: reducer(state, action),\n    action\n  };\n}\nconst STATE_PROVIDERS = [State, {\n  provide: StateObservable,\n  useExisting: State\n}];\n\n// disabled because we have lowercase generics for `select`\nlet Store = /*#__PURE__*/(() => {\n  class Store extends Observable {\n    constructor(state$, actionsObserver, reducerManager) {\n      super();\n      this.actionsObserver = actionsObserver;\n      this.reducerManager = reducerManager;\n      this.source = state$;\n    }\n    select(pathOrMapFn, ...paths) {\n      return select.call(null, pathOrMapFn, ...paths)(this);\n    }\n    lift(operator) {\n      const store = new Store(this, this.actionsObserver, this.reducerManager);\n      store.operator = operator;\n      return store;\n    }\n    dispatch(action) {\n      this.actionsObserver.next(action);\n    }\n    next(action) {\n      this.actionsObserver.next(action);\n    }\n    error(err) {\n      this.actionsObserver.error(err);\n    }\n    complete() {\n      this.actionsObserver.complete();\n    }\n    addReducer(key, reducer) {\n      this.reducerManager.addReducer(key, reducer);\n    }\n    removeReducer(key) {\n      this.reducerManager.removeReducer(key);\n    }\n  }\n  /** @nocollapse */\n  /** @nocollapse */Store.ɵfac = function Store_Factory(t) {\n    return new (t || Store)(i0.ɵɵinject(StateObservable), i0.ɵɵinject(ActionsSubject), i0.ɵɵinject(ReducerManager));\n  };\n  Store.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: Store,\n    factory: Store.ɵfac\n  });\n  return Store;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst STORE_PROVIDERS = [Store];\nfunction select(pathOrMapFn, propsOrPath, ...paths) {\n  return function selectOperator(source$) {\n    let mapped$;\n    if (typeof pathOrMapFn === 'string') {\n      const pathSlices = [propsOrPath, ...paths].filter(Boolean);\n      mapped$ = source$.pipe(pluck(pathOrMapFn, ...pathSlices));\n    } else if (typeof pathOrMapFn === 'function') {\n      mapped$ = source$.pipe(map(source => pathOrMapFn(source, propsOrPath)));\n    } else {\n      throw new TypeError(`Unexpected type '${typeof pathOrMapFn}' in select operator,` + ` expected 'string' or 'function'`);\n    }\n    return mapped$.pipe(distinctUntilChanged());\n  };\n}\nconst RUNTIME_CHECK_URL = 'https://ngrx.io/guide/store/configuration/runtime-checks';\nfunction isUndefined(target) {\n  return target === undefined;\n}\nfunction isNull(target) {\n  return target === null;\n}\nfunction isArray(target) {\n  return Array.isArray(target);\n}\nfunction isString(target) {\n  return typeof target === 'string';\n}\nfunction isBoolean(target) {\n  return typeof target === 'boolean';\n}\nfunction isNumber(target) {\n  return typeof target === 'number';\n}\nfunction isObjectLike(target) {\n  return typeof target === 'object' && target !== null;\n}\nfunction isObject(target) {\n  return isObjectLike(target) && !isArray(target);\n}\nfunction isPlainObject(target) {\n  if (!isObject(target)) {\n    return false;\n  }\n  const targetPrototype = Object.getPrototypeOf(target);\n  return targetPrototype === Object.prototype || targetPrototype === null;\n}\nfunction isFunction(target) {\n  return typeof target === 'function';\n}\nfunction isComponent(target) {\n  return isFunction(target) && target.hasOwnProperty('ɵcmp');\n}\nfunction hasOwnProperty(target, propertyName) {\n  return Object.prototype.hasOwnProperty.call(target, propertyName);\n}\nlet _ngrxMockEnvironment = false;\nfunction setNgrxMockEnvironment(value) {\n  _ngrxMockEnvironment = value;\n}\nfunction isNgrxMockEnvironment() {\n  return _ngrxMockEnvironment;\n}\nfunction isEqualCheck(a, b) {\n  return a === b;\n}\nfunction isArgumentsChanged(args, lastArguments, comparator) {\n  for (let i = 0; i < args.length; i++) {\n    if (!comparator(args[i], lastArguments[i])) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction resultMemoize(projectionFn, isResultEqual) {\n  return defaultMemoize(projectionFn, isEqualCheck, isResultEqual);\n}\nfunction defaultMemoize(projectionFn, isArgumentsEqual = isEqualCheck, isResultEqual = isEqualCheck) {\n  let lastArguments = null;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, , , , ,\n  let lastResult = null;\n  let overrideResult;\n  function reset() {\n    lastArguments = null;\n    lastResult = null;\n  }\n  function setResult(result = undefined) {\n    overrideResult = {\n      result\n    };\n  }\n  function clearResult() {\n    overrideResult = undefined;\n  }\n  /* eslint-disable prefer-rest-params, prefer-spread */\n  // disabled because of the use of `arguments`\n  function memoized() {\n    if (overrideResult !== undefined) {\n      return overrideResult.result;\n    }\n    if (!lastArguments) {\n      lastResult = projectionFn.apply(null, arguments);\n      lastArguments = arguments;\n      return lastResult;\n    }\n    if (!isArgumentsChanged(arguments, lastArguments, isArgumentsEqual)) {\n      return lastResult;\n    }\n    const newResult = projectionFn.apply(null, arguments);\n    lastArguments = arguments;\n    if (isResultEqual(lastResult, newResult)) {\n      return lastResult;\n    }\n    lastResult = newResult;\n    return newResult;\n  }\n  return {\n    memoized,\n    reset,\n    setResult,\n    clearResult\n  };\n}\nfunction createSelector(...input) {\n  return createSelectorFactory(defaultMemoize)(...input);\n}\nfunction defaultStateFn(state, selectors, props, memoizedProjector) {\n  if (props === undefined) {\n    const args = selectors.map(fn => fn(state));\n    return memoizedProjector.memoized.apply(null, args);\n  }\n  const args = selectors.map(fn => fn(state, props));\n  return memoizedProjector.memoized.apply(null, [...args, props]);\n}\n/**\n *\n * @param memoize The function used to memoize selectors\n * @param options Config Object that may include a `stateFn` function defining how to return the selector's value, given the entire `Store`'s state, parent `Selector`s, `Props`, and a `MemoizedProjection`\n *\n * @usageNotes\n *\n * **Creating a Selector Factory Where Array Order Does Not Matter**\n *\n * ```ts\n * function removeMatch(arr: string[], target: string): string[] {\n *   const matchIndex = arr.indexOf(target);\n *   return [...arr.slice(0, matchIndex), ...arr.slice(matchIndex + 1)];\n * }\n *\n * function orderDoesNotMatterComparer(a: any, b: any): boolean {\n *   if (!Array.isArray(a) || !Array.isArray(b)) {\n *     return a === b;\n *   }\n *   if (a.length !== b.length) {\n *     return false;\n *   }\n *   let tempB = [...b];\n *   function reduceToDetermineIfArraysContainSameContents(\n *     previousCallResult: boolean,\n *     arrayMember: any\n *   ): boolean {\n *     if (previousCallResult === false) {\n *       return false;\n *     }\n *     if (tempB.includes(arrayMember)) {\n *       tempB = removeMatch(tempB, arrayMember);\n *       return true;\n *     }\n *     return false;\n *   }\n *   return a.reduce(reduceToDetermineIfArraysContainSameContents, true);\n * }\n *\n * export const createOrderDoesNotMatterSelector = createSelectorFactory(\n *   (projectionFun) => defaultMemoize(\n *     projectionFun,\n *     orderDoesNotMatterComparer,\n *     orderDoesNotMatterComparer\n *   )\n * );\n * ```\n *\n * **Creating an Alternative Memoization Strategy**\n *\n * ```ts\n * function serialize(x: any): string {\n *   return JSON.stringify(x);\n * }\n *\n * export const createFullHistorySelector = createSelectorFactory(\n *  (projectionFunction) => {\n *    const cache = {};\n *\n *    function memoized() {\n *      const serializedArguments = serialize(...arguments);\n *       if (cache[serializedArguments] != null) {\n *         cache[serializedArguments] = projectionFunction.apply(null, arguments);\n *       }\n *       return cache[serializedArguments];\n *     }\n *     return {\n *       memoized,\n *       reset: () => {},\n *       setResult: () => {},\n *       clearResult: () => {},\n *     };\n *   }\n * );\n * ```\n */\nfunction createSelectorFactory(memoize, options = {\n  stateFn: defaultStateFn\n}) {\n  return function (...input) {\n    let args = input;\n    if (Array.isArray(args[0])) {\n      const [head, ...tail] = args;\n      args = [...head, ...tail];\n    } else if (args.length === 1 && isSelectorsDictionary(args[0])) {\n      args = extractArgsFromSelectorsDictionary(args[0]);\n    }\n    const selectors = args.slice(0, args.length - 1);\n    const projector = args[args.length - 1];\n    const memoizedSelectors = selectors.filter(selector => selector.release && typeof selector.release === 'function');\n    const memoizedProjector = memoize(function (...selectors) {\n      return projector.apply(null, selectors);\n    });\n    const memoizedState = defaultMemoize(function (state, props) {\n      return options.stateFn.apply(null, [state, selectors, props, memoizedProjector]);\n    });\n    function release() {\n      memoizedState.reset();\n      memoizedProjector.reset();\n      memoizedSelectors.forEach(selector => selector.release());\n    }\n    return Object.assign(memoizedState.memoized, {\n      release,\n      projector: memoizedProjector.memoized,\n      setResult: memoizedState.setResult,\n      clearResult: memoizedState.clearResult\n    });\n  };\n}\nfunction createFeatureSelector(featureName) {\n  return createSelector(state => {\n    const featureState = state[featureName];\n    if (!isNgrxMockEnvironment() && isDevMode() && !(featureName in state)) {\n      console.warn(`@ngrx/store: The feature name \"${featureName}\" does ` + 'not exist in the state, therefore createFeatureSelector ' + 'cannot access it.  Be sure it is imported in a loaded module ' + `using StoreModule.forRoot('${featureName}', ...) or ` + `StoreModule.forFeature('${featureName}', ...).  If the default ` + 'state is intended to be undefined, as is the case with router ' + 'state, this development-only warning message can be ignored.');\n    }\n    return featureState;\n  }, featureState => featureState);\n}\nfunction isSelectorsDictionary(selectors) {\n  return !!selectors && typeof selectors === 'object' && Object.values(selectors).every(selector => typeof selector === 'function');\n}\nfunction extractArgsFromSelectorsDictionary(selectorsDictionary) {\n  const selectors = Object.values(selectorsDictionary);\n  const resultKeys = Object.keys(selectorsDictionary);\n  const projector = (...selectorResults) => resultKeys.reduce((result, key, index) => ({\n    ...result,\n    [key]: selectorResults[index]\n  }), {});\n  return [...selectors, projector];\n}\n\n/**\n * @description\n * A function that accepts a feature name and a feature reducer, and creates\n * a feature selector and a selector for each feature state property.\n * This function also provides the ability to add extra selectors to\n * the feature object.\n *\n * @param featureConfig An object that contains a feature name and a feature\n * reducer as required, and extra selectors factory as an optional argument.\n * @returns An object that contains a feature name, a feature reducer,\n * a feature selector, a selector for each feature state property, and extra\n * selectors.\n *\n * @usageNotes\n *\n * ```ts\n * interface ProductsState {\n *   products: Product[];\n *   selectedId: string | null;\n * }\n *\n * const initialState: ProductsState = {\n *   products: [],\n *   selectedId: null,\n * };\n *\n * const productsFeature = createFeature({\n *   name: 'products',\n *   reducer: createReducer(\n *     initialState,\n *     on(ProductsApiActions.loadSuccess(state, { products }) => ({\n *       ...state,\n *       products,\n *     }),\n *   ),\n * });\n *\n * const {\n *   name,\n *   reducer,\n *   // feature selector\n *   selectProductsState, // type: MemoizedSelector<Record<string, any>, ProductsState>\n *   // feature state properties selectors\n *   selectProducts, // type: MemoizedSelector<Record<string, any>, Product[]>\n *   selectSelectedId, // type: MemoizedSelector<Record<string, any>, string | null>\n * } = productsFeature;\n * ```\n *\n * **Creating Feature with Extra Selectors**\n *\n * ```ts\n * type CallState = 'init' | 'loading' | 'loaded' | { error: string };\n *\n * interface State extends EntityState<Product> {\n *   callState: CallState;\n * }\n *\n * const adapter = createEntityAdapter<Product>();\n * const initialState: State = adapter.getInitialState({\n *   callState: 'init',\n * });\n *\n * export const productsFeature = createFeature({\n *   name: 'products',\n *   reducer: createReducer(initialState),\n *   extraSelectors: ({ selectProductsState, selectCallState }) => ({\n *     ...adapter.getSelectors(selectBooksState),\n *     ...getCallStateSelectors(selectCallState)\n *   }),\n * });\n *\n * const {\n *   name,\n *   reducer,\n *   // feature selector\n *   selectProductsState,\n *   // feature state properties selectors\n *   selectIds,\n *   selectEntities,\n *   selectCallState,\n *   // selectors returned by `adapter.getSelectors`\n *   selectAll,\n *   selectTotal,\n *   // selectors returned by `getCallStateSelectors`\n *   selectIsLoading,\n *   selectIsLoaded,\n *   selectError,\n * } = productsFeature;\n * ```\n */\nfunction createFeature(featureConfig) {\n  const {\n    name,\n    reducer,\n    extraSelectors: extraSelectorsFactory\n  } = featureConfig;\n  const featureSelector = createFeatureSelector(name);\n  const nestedSelectors = createNestedSelectors(featureSelector, reducer);\n  const baseSelectors = {\n    [`select${capitalize(name)}State`]: featureSelector,\n    ...nestedSelectors\n  };\n  const extraSelectors = extraSelectorsFactory ? extraSelectorsFactory(baseSelectors) : {};\n  return {\n    name,\n    reducer,\n    ...baseSelectors,\n    ...extraSelectors\n  };\n}\nfunction createNestedSelectors(featureSelector, reducer) {\n  const initialState = getInitialState(reducer);\n  const nestedKeys = isPlainObject(initialState) ? Object.keys(initialState) : [];\n  return nestedKeys.reduce((nestedSelectors, nestedKey) => ({\n    ...nestedSelectors,\n    [`select${capitalize(nestedKey)}`]: createSelector(featureSelector, parentState => parentState?.[nestedKey])\n  }), {});\n}\nfunction getInitialState(reducer) {\n  return reducer(undefined, {\n    type: '@ngrx/feature/init'\n  });\n}\nfunction _createStoreReducers(reducers) {\n  return reducers instanceof InjectionToken ? inject(reducers) : reducers;\n}\nfunction _createFeatureStore(configs, featureStores) {\n  return featureStores.map((feat, index) => {\n    if (configs[index] instanceof InjectionToken) {\n      const conf = inject(configs[index]);\n      return {\n        key: feat.key,\n        reducerFactory: conf.reducerFactory ? conf.reducerFactory : combineReducers,\n        metaReducers: conf.metaReducers ? conf.metaReducers : [],\n        initialState: conf.initialState\n      };\n    }\n    return feat;\n  });\n}\nfunction _createFeatureReducers(reducerCollection) {\n  return reducerCollection.map(reducer => {\n    return reducer instanceof InjectionToken ? inject(reducer) : reducer;\n  });\n}\nfunction _initialStateFactory(initialState) {\n  if (typeof initialState === 'function') {\n    return initialState();\n  }\n  return initialState;\n}\nfunction _concatMetaReducers(metaReducers, userProvidedMetaReducers) {\n  return metaReducers.concat(userProvidedMetaReducers);\n}\nfunction _provideForRootGuard() {\n  const store = inject(Store, {\n    optional: true,\n    skipSelf: true\n  });\n  if (store) {\n    throw new TypeError(`The root Store has been provided more than once. Feature modules should provide feature states instead.`);\n  }\n  return 'guarded';\n}\nfunction immutabilityCheckMetaReducer(reducer, checks) {\n  return function (state, action) {\n    const act = checks.action(action) ? freeze(action) : action;\n    const nextState = reducer(state, act);\n    return checks.state() ? freeze(nextState) : nextState;\n  };\n}\nfunction freeze(target) {\n  Object.freeze(target);\n  const targetIsFunction = isFunction(target);\n  Object.getOwnPropertyNames(target).forEach(prop => {\n    // Ignore Ivy properties, ref: https://github.com/ngrx/platform/issues/2109#issuecomment-582689060\n    if (prop.startsWith('ɵ')) {\n      return;\n    }\n    if (hasOwnProperty(target, prop) && (targetIsFunction ? prop !== 'caller' && prop !== 'callee' && prop !== 'arguments' : true)) {\n      const propValue = target[prop];\n      if ((isObjectLike(propValue) || isFunction(propValue)) && !Object.isFrozen(propValue)) {\n        freeze(propValue);\n      }\n    }\n  });\n  return target;\n}\nfunction serializationCheckMetaReducer(reducer, checks) {\n  return function (state, action) {\n    if (checks.action(action)) {\n      const unserializableAction = getUnserializable(action);\n      throwIfUnserializable(unserializableAction, 'action');\n    }\n    const nextState = reducer(state, action);\n    if (checks.state()) {\n      const unserializableState = getUnserializable(nextState);\n      throwIfUnserializable(unserializableState, 'state');\n    }\n    return nextState;\n  };\n}\nfunction getUnserializable(target, path = []) {\n  // Guard against undefined and null, e.g. a reducer that returns undefined\n  if ((isUndefined(target) || isNull(target)) && path.length === 0) {\n    return {\n      path: ['root'],\n      value: target\n    };\n  }\n  const keys = Object.keys(target);\n  return keys.reduce((result, key) => {\n    if (result) {\n      return result;\n    }\n    const value = target[key];\n    // Ignore Ivy components\n    if (isComponent(value)) {\n      return result;\n    }\n    if (isUndefined(value) || isNull(value) || isNumber(value) || isBoolean(value) || isString(value) || isArray(value)) {\n      return false;\n    }\n    if (isPlainObject(value)) {\n      return getUnserializable(value, [...path, key]);\n    }\n    return {\n      path: [...path, key],\n      value\n    };\n  }, false);\n}\nfunction throwIfUnserializable(unserializable, context) {\n  if (unserializable === false) {\n    return;\n  }\n  const unserializablePath = unserializable.path.join('.');\n  const error = new Error(`Detected unserializable ${context} at \"${unserializablePath}\". ${RUNTIME_CHECK_URL}#strict${context}serializability`);\n  error.value = unserializable.value;\n  error.unserializablePath = unserializablePath;\n  throw error;\n}\nfunction inNgZoneAssertMetaReducer(reducer, checks) {\n  return function (state, action) {\n    if (checks.action(action) && !i0.NgZone.isInAngularZone()) {\n      throw new Error(`Action '${action.type}' running outside NgZone. ${RUNTIME_CHECK_URL}#strictactionwithinngzone`);\n    }\n    return reducer(state, action);\n  };\n}\nfunction createActiveRuntimeChecks(runtimeChecks) {\n  if (isDevMode()) {\n    return {\n      strictStateSerializability: false,\n      strictActionSerializability: false,\n      strictStateImmutability: true,\n      strictActionImmutability: true,\n      strictActionWithinNgZone: false,\n      strictActionTypeUniqueness: false,\n      ...runtimeChecks\n    };\n  }\n  return {\n    strictStateSerializability: false,\n    strictActionSerializability: false,\n    strictStateImmutability: false,\n    strictActionImmutability: false,\n    strictActionWithinNgZone: false,\n    strictActionTypeUniqueness: false\n  };\n}\nfunction createSerializationCheckMetaReducer({\n  strictActionSerializability,\n  strictStateSerializability\n}) {\n  return reducer => strictActionSerializability || strictStateSerializability ? serializationCheckMetaReducer(reducer, {\n    action: action => strictActionSerializability && !ignoreNgrxAction(action),\n    state: () => strictStateSerializability\n  }) : reducer;\n}\nfunction createImmutabilityCheckMetaReducer({\n  strictActionImmutability,\n  strictStateImmutability\n}) {\n  return reducer => strictActionImmutability || strictStateImmutability ? immutabilityCheckMetaReducer(reducer, {\n    action: action => strictActionImmutability && !ignoreNgrxAction(action),\n    state: () => strictStateImmutability\n  }) : reducer;\n}\nfunction ignoreNgrxAction(action) {\n  return action.type.startsWith('@ngrx');\n}\nfunction createInNgZoneCheckMetaReducer({\n  strictActionWithinNgZone\n}) {\n  return reducer => strictActionWithinNgZone ? inNgZoneAssertMetaReducer(reducer, {\n    action: action => strictActionWithinNgZone && !ignoreNgrxAction(action)\n  }) : reducer;\n}\nfunction provideRuntimeChecks(runtimeChecks) {\n  return [{\n    provide: _USER_RUNTIME_CHECKS,\n    useValue: runtimeChecks\n  }, {\n    provide: USER_RUNTIME_CHECKS,\n    useFactory: _runtimeChecksFactory,\n    deps: [_USER_RUNTIME_CHECKS]\n  }, {\n    provide: ACTIVE_RUNTIME_CHECKS,\n    deps: [USER_RUNTIME_CHECKS],\n    useFactory: createActiveRuntimeChecks\n  }, {\n    provide: META_REDUCERS,\n    multi: true,\n    deps: [ACTIVE_RUNTIME_CHECKS],\n    useFactory: createImmutabilityCheckMetaReducer\n  }, {\n    provide: META_REDUCERS,\n    multi: true,\n    deps: [ACTIVE_RUNTIME_CHECKS],\n    useFactory: createSerializationCheckMetaReducer\n  }, {\n    provide: META_REDUCERS,\n    multi: true,\n    deps: [ACTIVE_RUNTIME_CHECKS],\n    useFactory: createInNgZoneCheckMetaReducer\n  }];\n}\nfunction checkForActionTypeUniqueness() {\n  return [{\n    provide: _ACTION_TYPE_UNIQUENESS_CHECK,\n    multi: true,\n    deps: [ACTIVE_RUNTIME_CHECKS],\n    useFactory: _actionTypeUniquenessCheck\n  }];\n}\nfunction _runtimeChecksFactory(runtimeChecks) {\n  return runtimeChecks;\n}\nfunction _actionTypeUniquenessCheck(config) {\n  if (!config.strictActionTypeUniqueness) {\n    return;\n  }\n  const duplicates = Object.entries(REGISTERED_ACTION_TYPES).filter(([, registrations]) => registrations > 1).map(([type]) => type);\n  if (duplicates.length) {\n    throw new Error(`Action types are registered more than once, ${duplicates.map(type => `\"${type}\"`).join(', ')}. ${RUNTIME_CHECK_URL}#strictactiontypeuniqueness`);\n  }\n}\n\n/**\n * Provides additional slices of state in the Store.\n * These providers cannot be used at the component level.\n *\n * @usageNotes\n *\n * ### Providing Store Features\n *\n * ```ts\n * const booksRoutes: Route[] = [\n *   {\n *     path: '',\n *     providers: [provideState('books', booksReducer)],\n *     children: [\n *       { path: '', component: BookListComponent },\n *       { path: ':id', component: BookDetailsComponent },\n *     ],\n *   },\n * ];\n * ```\n */\nfunction provideState(featureNameOrSlice, reducers, config = {}) {\n  return makeEnvironmentProviders([..._provideState(featureNameOrSlice, reducers, config), ENVIRONMENT_STATE_PROVIDER]);\n}\nfunction _provideStore(reducers = {}, config = {}) {\n  return [{\n    provide: _ROOT_STORE_GUARD,\n    useFactory: _provideForRootGuard\n  }, {\n    provide: _INITIAL_STATE,\n    useValue: config.initialState\n  }, {\n    provide: INITIAL_STATE,\n    useFactory: _initialStateFactory,\n    deps: [_INITIAL_STATE]\n  }, {\n    provide: _INITIAL_REDUCERS,\n    useValue: reducers\n  }, {\n    provide: _STORE_REDUCERS,\n    useExisting: reducers instanceof InjectionToken ? reducers : _INITIAL_REDUCERS\n  }, {\n    provide: INITIAL_REDUCERS,\n    deps: [_INITIAL_REDUCERS, [new Inject(_STORE_REDUCERS)]],\n    useFactory: _createStoreReducers\n  }, {\n    provide: USER_PROVIDED_META_REDUCERS,\n    useValue: config.metaReducers ? config.metaReducers : []\n  }, {\n    provide: _RESOLVED_META_REDUCERS,\n    deps: [META_REDUCERS, USER_PROVIDED_META_REDUCERS],\n    useFactory: _concatMetaReducers\n  }, {\n    provide: _REDUCER_FACTORY,\n    useValue: config.reducerFactory ? config.reducerFactory : combineReducers\n  }, {\n    provide: REDUCER_FACTORY,\n    deps: [_REDUCER_FACTORY, _RESOLVED_META_REDUCERS],\n    useFactory: createReducerFactory\n  }, ACTIONS_SUBJECT_PROVIDERS, REDUCER_MANAGER_PROVIDERS, SCANNED_ACTIONS_SUBJECT_PROVIDERS, STATE_PROVIDERS, STORE_PROVIDERS, provideRuntimeChecks(config.runtimeChecks), checkForActionTypeUniqueness()];\n}\nfunction rootStoreProviderFactory() {\n  inject(ActionsSubject);\n  inject(ReducerObservable);\n  inject(ScannedActionsSubject);\n  inject(Store);\n  inject(_ROOT_STORE_GUARD, {\n    optional: true\n  });\n  inject(_ACTION_TYPE_UNIQUENESS_CHECK, {\n    optional: true\n  });\n}\n/**\n * Environment Initializer used in the root\n * providers to initialize the Store\n */\nconst ENVIRONMENT_STORE_PROVIDER = [{\n  provide: ROOT_STORE_PROVIDER,\n  useFactory: rootStoreProviderFactory\n}, {\n  provide: ENVIRONMENT_INITIALIZER,\n  multi: true,\n  useFactory() {\n    return () => inject(ROOT_STORE_PROVIDER);\n  }\n}];\n/**\n * Provides the global Store providers and initializes\n * the Store.\n * These providers cannot be used at the component level.\n *\n * @usageNotes\n *\n * ### Providing the Global Store\n *\n * ```ts\n * bootstrapApplication(AppComponent, {\n *   providers: [provideStore()],\n * });\n * ```\n */\nfunction provideStore(reducers, config) {\n  return makeEnvironmentProviders([..._provideStore(reducers, config), ENVIRONMENT_STORE_PROVIDER]);\n}\nfunction featureStateProviderFactory() {\n  inject(ROOT_STORE_PROVIDER);\n  const features = inject(_STORE_FEATURES);\n  const featureReducers = inject(FEATURE_REDUCERS);\n  const reducerManager = inject(ReducerManager);\n  inject(_ACTION_TYPE_UNIQUENESS_CHECK, {\n    optional: true\n  });\n  const feats = features.map((feature, index) => {\n    const featureReducerCollection = featureReducers.shift();\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const reducers = featureReducerCollection /*TODO(#823)*/[index];\n    return {\n      ...feature,\n      reducers,\n      initialState: _initialStateFactory(feature.initialState)\n    };\n  });\n  reducerManager.addFeatures(feats);\n}\n/**\n * Environment Initializer used in the feature\n * providers to register state features\n */\nconst ENVIRONMENT_STATE_PROVIDER = [{\n  provide: FEATURE_STATE_PROVIDER,\n  useFactory: featureStateProviderFactory\n}, {\n  provide: ENVIRONMENT_INITIALIZER,\n  multi: true,\n  useFactory() {\n    return () => inject(FEATURE_STATE_PROVIDER);\n  }\n}];\nfunction _provideState(featureNameOrSlice, reducers, config = {}) {\n  return [{\n    provide: _FEATURE_CONFIGS,\n    multi: true,\n    useValue: featureNameOrSlice instanceof Object ? {} : config\n  }, {\n    provide: STORE_FEATURES,\n    multi: true,\n    useValue: {\n      key: featureNameOrSlice instanceof Object ? featureNameOrSlice.name : featureNameOrSlice,\n      reducerFactory: !(config instanceof InjectionToken) && config.reducerFactory ? config.reducerFactory : combineReducers,\n      metaReducers: !(config instanceof InjectionToken) && config.metaReducers ? config.metaReducers : [],\n      initialState: !(config instanceof InjectionToken) && config.initialState ? config.initialState : undefined\n    }\n  }, {\n    provide: _STORE_FEATURES,\n    deps: [_FEATURE_CONFIGS, STORE_FEATURES],\n    useFactory: _createFeatureStore\n  }, {\n    provide: _FEATURE_REDUCERS,\n    multi: true,\n    useValue: featureNameOrSlice instanceof Object ? featureNameOrSlice.reducer : reducers\n  }, {\n    provide: _FEATURE_REDUCERS_TOKEN,\n    multi: true,\n    useExisting: reducers instanceof InjectionToken ? reducers : _FEATURE_REDUCERS\n  }, {\n    provide: FEATURE_REDUCERS,\n    multi: true,\n    deps: [_FEATURE_REDUCERS, [new Inject(_FEATURE_REDUCERS_TOKEN)]],\n    useFactory: _createFeatureReducers\n  }, checkForActionTypeUniqueness()];\n}\nlet StoreRootModule = /*#__PURE__*/(() => {\n  class StoreRootModule {\n    constructor(actions$, reducer$, scannedActions$, store, guard, actionCheck) {}\n  }\n  /** @nocollapse */\n  /** @nocollapse */\n  /** @nocollapse */StoreRootModule.ɵfac = function StoreRootModule_Factory(t) {\n    return new (t || StoreRootModule)(i0.ɵɵinject(ActionsSubject), i0.ɵɵinject(ReducerObservable), i0.ɵɵinject(ScannedActionsSubject), i0.ɵɵinject(Store), i0.ɵɵinject(_ROOT_STORE_GUARD, 8), i0.ɵɵinject(_ACTION_TYPE_UNIQUENESS_CHECK, 8));\n  };\n  StoreRootModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: StoreRootModule\n  });\n  StoreRootModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  return StoreRootModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet StoreFeatureModule = /*#__PURE__*/(() => {\n  class StoreFeatureModule {\n    constructor(features, featureReducers, reducerManager, root, actionCheck) {\n      this.features = features;\n      this.featureReducers = featureReducers;\n      this.reducerManager = reducerManager;\n      const feats = features.map((feature, index) => {\n        const featureReducerCollection = featureReducers.shift();\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const reducers = featureReducerCollection /*TODO(#823)*/[index];\n        return {\n          ...feature,\n          reducers,\n          initialState: _initialStateFactory(feature.initialState)\n        };\n      });\n      reducerManager.addFeatures(feats);\n    }\n    // eslint-disable-next-line @angular-eslint/contextual-lifecycle\n    ngOnDestroy() {\n      this.reducerManager.removeFeatures(this.features);\n    }\n  }\n  /** @nocollapse */\n  /** @nocollapse */\n  /** @nocollapse */StoreFeatureModule.ɵfac = function StoreFeatureModule_Factory(t) {\n    return new (t || StoreFeatureModule)(i0.ɵɵinject(_STORE_FEATURES), i0.ɵɵinject(FEATURE_REDUCERS), i0.ɵɵinject(ReducerManager), i0.ɵɵinject(StoreRootModule), i0.ɵɵinject(_ACTION_TYPE_UNIQUENESS_CHECK, 8));\n  };\n  StoreFeatureModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: StoreFeatureModule\n  });\n  StoreFeatureModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  return StoreFeatureModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet StoreModule = /*#__PURE__*/(() => {\n  class StoreModule {\n    static forRoot(reducers, config) {\n      return {\n        ngModule: StoreRootModule,\n        providers: [..._provideStore(reducers, config)]\n      };\n    }\n    static forFeature(featureNameOrSlice, reducers, config = {}) {\n      return {\n        ngModule: StoreFeatureModule,\n        providers: [..._provideState(featureNameOrSlice, reducers, config)]\n      };\n    }\n  }\n  /** @nocollapse */\n  /** @nocollapse */\n  /** @nocollapse */StoreModule.ɵfac = function StoreModule_Factory(t) {\n    return new (t || StoreModule)();\n  };\n  StoreModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: StoreModule\n  });\n  StoreModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  return StoreModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * @description\n * Associates actions with a given state change function.\n * A state change function must be provided as the last parameter.\n *\n * @param args `ActionCreator`'s followed by a state change function.\n *\n * @returns an association of action types with a state change function.\n *\n * @usageNotes\n * ```ts\n * on(AuthApiActions.loginSuccess, (state, { user }) => ({ ...state, user }))\n * ```\n */\nfunction on(...args) {\n  const reducer = args.pop();\n  const types = args.map(creator => creator.type);\n  return {\n    reducer,\n    types\n  };\n}\n/**\n * @description\n * Creates a reducer function to handle state transitions.\n *\n * Reducer creators reduce the explicitness of reducer functions with switch statements.\n *\n * @param initialState Provides a state value if the current state is `undefined`, as it is initially.\n * @param ons Associations between actions and state changes.\n * @returns A reducer function.\n *\n * @usageNotes\n *\n * - Must be used with `ActionCreator`'s (returned by `createAction`). Cannot be used with class-based action creators.\n * - The returned `ActionReducer` does not require being wrapped with another function.\n *\n * **Declaring a reducer creator**\n *\n * ```ts\n * export const reducer = createReducer(\n *   initialState,\n *   on(\n *     featureActions.actionOne,\n *     featureActions.actionTwo,\n *     (state, { updatedValue }) => ({ ...state, prop: updatedValue })\n *   ),\n *   on(featureActions.actionThree, () => initialState);\n * );\n * ```\n */\nfunction createReducer(initialState, ...ons) {\n  const map = new Map();\n  for (const on of ons) {\n    for (const type of on.types) {\n      const existingReducer = map.get(type);\n      if (existingReducer) {\n        const newReducer = (state, action) => on.reducer(existingReducer(state, action), action);\n        map.set(type, newReducer);\n      } else {\n        map.set(type, on.reducer);\n      }\n    }\n  }\n  return function (state = initialState, action) {\n    const reducer = map.get(action.type);\n    return reducer ? reducer(state, action) : state;\n  };\n}\n\n/**\n * DO NOT EDIT\n *\n * This file is automatically generated at build\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ACTIVE_RUNTIME_CHECKS, ActionsSubject, FEATURE_REDUCERS, FEATURE_STATE_PROVIDER, INIT, INITIAL_REDUCERS, INITIAL_STATE, META_REDUCERS, REDUCER_FACTORY, ROOT_STORE_PROVIDER, ReducerManager, ReducerManagerDispatcher, ReducerObservable, STORE_FEATURES, ScannedActionsSubject, State, StateObservable, Store, StoreFeatureModule, StoreModule, StoreRootModule, UPDATE, USER_PROVIDED_META_REDUCERS, USER_RUNTIME_CHECKS, combineReducers, compose, createAction, createActionGroup, createFeature, createFeatureSelector, createReducer, createReducerFactory, createSelector, createSelectorFactory, defaultMemoize, defaultStateFn, emptyProps, isNgrxMockEnvironment, on, props, provideState, provideStore, reduceState, resultMemoize, select, setNgrxMockEnvironment, union };\n//# sourceMappingURL=ngrx-store.mjs.map","map":{"version":3,"names":["REGISTERED_ACTION_TYPES","resetRegisteredActionTypes","key","Object","keys","createAction","type","config","defineType","args","as","_as","props","Error","_p","undefined","union","creators","creator","defineProperty","value","writable","capitalize","text","charAt","toUpperCase","substring","createActionGroup","source","events","reduce","actionGroup","eventName","toActionName","toActionType","emptyProps","trim","toLowerCase","split","map","word","i","join","INIT","ActionsSubject","BehaviorSubject","constructor","next","action","TypeError","complete","ngOnDestroy","factory","ɵfac","ACTIONS_SUBJECT_PROVIDERS","_ROOT_STORE_GUARD","InjectionToken","_INITIAL_STATE","INITIAL_STATE","REDUCER_FACTORY","_REDUCER_FACTORY","INITIAL_REDUCERS","_INITIAL_REDUCERS","STORE_FEATURES","_STORE_REDUCERS","_FEATURE_REDUCERS","_FEATURE_CONFIGS","_STORE_FEATURES","_FEATURE_REDUCERS_TOKEN","FEATURE_REDUCERS","USER_PROVIDED_META_REDUCERS","META_REDUCERS","_RESOLVED_META_REDUCERS","USER_RUNTIME_CHECKS","_USER_RUNTIME_CHECKS","ACTIVE_RUNTIME_CHECKS","_ACTION_TYPE_UNIQUENESS_CHECK","ROOT_STORE_PROVIDER","FEATURE_STATE_PROVIDER","combineReducers","reducers","initialState","reducerKeys","finalReducers","length","finalReducerKeys","combination","state","hasChanged","nextState","reducer","previousStateForKey","nextStateForKey","omit","object","keyToRemove","filter","result","assign","compose","functions","arg","last","rest","slice","reduceRight","composed","fn","createReducerFactory","reducerFactory","metaReducers","Array","isArray","apply","createFeatureReducerFactory","r","ReducerObservable","Observable","ReducerManagerDispatcher","UPDATE","ReducerManager","dispatcher","currentReducers","addFeature","feature","addFeatures","features","reducerDict","addReducers","removeFeature","removeFeatures","removeReducers","p","addReducer","updateReducers","removeReducer","featureKey","featureKeys","forEach","ReducerManager_Factory","t","REDUCER_MANAGER_PROVIDERS","provide","useExisting","ScannedActionsSubject","Subject","SCANNED_ACTIONS_SUBJECT_PROVIDERS","StateObservable","State","actions$","reducer$","scannedActions","actionsOnQueue$","pipe","observeOn","queueScheduler","withLatestReducer$","withLatestFrom","seed","stateAndAction$","scan","reduceState","stateSubscription","subscribe","unsubscribe","State_Factory","stateActionPair","STATE_PROVIDERS","Store","state$","actionsObserver","reducerManager","select","pathOrMapFn","paths","call","lift","operator","store","dispatch","error","err","STORE_PROVIDERS","propsOrPath","selectOperator","source$","mapped$","pathSlices","Boolean","pluck","distinctUntilChanged","RUNTIME_CHECK_URL","isUndefined","target","isNull","isString","isBoolean","isNumber","isObjectLike","isObject","isPlainObject","targetPrototype","getPrototypeOf","prototype","isFunction","isComponent","hasOwnProperty","propertyName","_ngrxMockEnvironment","setNgrxMockEnvironment","isNgrxMockEnvironment","isEqualCheck","a","b","isArgumentsChanged","lastArguments","comparator","resultMemoize","projectionFn","isResultEqual","defaultMemoize","isArgumentsEqual","lastResult","overrideResult","reset","setResult","clearResult","memoized","arguments","newResult","createSelector","input","createSelectorFactory","defaultStateFn","selectors","memoizedProjector","memoize","options","stateFn","head","tail","isSelectorsDictionary","extractArgsFromSelectorsDictionary","projector","memoizedSelectors","selector","release","memoizedState","createFeatureSelector","featureName","featureState","isDevMode","console","warn","values","every","selectorsDictionary","resultKeys","selectorResults","index","createFeature","featureConfig","name","extraSelectors","extraSelectorsFactory","featureSelector","nestedSelectors","createNestedSelectors","baseSelectors","getInitialState","nestedKeys","nestedKey","parentState","_createStoreReducers","inject","_createFeatureStore","configs","featureStores","feat","conf","_createFeatureReducers","reducerCollection","_initialStateFactory","_concatMetaReducers","userProvidedMetaReducers","concat","_provideForRootGuard","optional","skipSelf","immutabilityCheckMetaReducer","checks","act","freeze","targetIsFunction","getOwnPropertyNames","prop","startsWith","propValue","isFrozen","serializationCheckMetaReducer","unserializableAction","getUnserializable","throwIfUnserializable","unserializableState","path","unserializable","context","unserializablePath","inNgZoneAssertMetaReducer","i0","NgZone","isInAngularZone","createActiveRuntimeChecks","runtimeChecks","strictStateSerializability","strictActionSerializability","strictStateImmutability","strictActionImmutability","strictActionWithinNgZone","strictActionTypeUniqueness","createSerializationCheckMetaReducer","ignoreNgrxAction","createImmutabilityCheckMetaReducer","createInNgZoneCheckMetaReducer","provideRuntimeChecks","useValue","useFactory","_runtimeChecksFactory","deps","multi","checkForActionTypeUniqueness","_actionTypeUniquenessCheck","duplicates","entries","registrations","provideState","featureNameOrSlice","makeEnvironmentProviders","_provideState","ENVIRONMENT_STATE_PROVIDER","_provideStore","Inject","rootStoreProviderFactory","ENVIRONMENT_STORE_PROVIDER","ENVIRONMENT_INITIALIZER","provideStore","featureStateProviderFactory","featureReducers","feats","featureReducerCollection","shift","StoreRootModule","scannedActions$","guard","actionCheck","StoreFeatureModule","root","StoreFeatureModule_Factory","StoreModule","forRoot","ngModule","providers","forFeature","on","pop","types","createReducer","ons","Map","existingReducer","get","newReducer","set"],"sources":["C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\modules\\store\\src\\globals.ts","C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\modules\\store\\src\\action_creator.ts","C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\modules\\store\\src\\helpers.ts","C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\modules\\store\\src\\action_group_creator.ts","C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\modules\\store\\src\\actions_subject.ts","C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\modules\\store\\src\\tokens.ts","C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\modules\\store\\src\\utils.ts","C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\modules\\store\\src\\reducer_manager.ts","C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\modules\\store\\src\\scanned_actions_subject.ts","C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\modules\\store\\src\\state.ts","C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\modules\\store\\src\\store.ts","C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\modules\\store\\src\\meta-reducers\\utils.ts","C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\modules\\store\\src\\flags.ts","C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\modules\\store\\src\\selector.ts","C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\modules\\store\\src\\feature_creator.ts","C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\modules\\store\\src\\store_config.ts","C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\modules\\store\\src\\meta-reducers\\immutability_reducer.ts","C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\modules\\store\\src\\meta-reducers\\serialization_reducer.ts","C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\modules\\store\\src\\meta-reducers\\inNgZoneAssert_reducer.ts","C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\modules\\store\\src\\runtime_checks.ts","C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\modules\\store\\src\\provide_store.ts","C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\modules\\store\\src\\store_module.ts","C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\modules\\store\\src\\reducer_creator.ts","C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\modules\\store\\index.ts","C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\modules\\store\\ngrx-store.ts"],"sourcesContent":["export const REGISTERED_ACTION_TYPES: { [actionType: string]: number } = {};\n\nexport function resetRegisteredActionTypes() {\n  for (const key of Object.keys(REGISTERED_ACTION_TYPES)) {\n    delete REGISTERED_ACTION_TYPES[key];\n  }\n}\n","import {\n  Creator,\n  ActionCreator,\n  TypedAction,\n  FunctionWithParametersType,\n  NotAllowedCheck,\n  ActionCreatorProps,\n  NotAllowedInPropsCheck,\n} from './models';\nimport { REGISTERED_ACTION_TYPES } from './globals';\n\n// Action creators taken from ts-action library and modified a bit to better\n// fit current NgRx usage. Thank you Nicholas Jamieson (@cartant).\n\nexport function createAction<T extends string>(\n  type: T\n): ActionCreator<T, () => TypedAction<T>>;\nexport function createAction<T extends string, P extends object>(\n  type: T,\n  config: ActionCreatorProps<P> & NotAllowedCheck<P>\n): ActionCreator<T, (props: P & NotAllowedCheck<P>) => P & TypedAction<T>>;\nexport function createAction<\n  T extends string,\n  P extends any[],\n  R extends object\n>(\n  type: T,\n  creator: Creator<P, R & NotAllowedCheck<R>>\n): FunctionWithParametersType<P, R & TypedAction<T>> & TypedAction<T>;\n/**\n * @description\n * Creates a configured `Creator` function that, when called, returns an object in the shape of the `Action` interface.\n *\n * Action creators reduce the explicitness of class-based action creators.\n *\n * @param type Describes the action that will be dispatched\n * @param config Additional metadata needed for the handling of the action.  See {@link createAction#usage-notes Usage Notes}.\n *\n * @usageNotes\n *\n * **Declaring an action creator**\n *\n * Without additional metadata:\n * ```ts\n * export const increment = createAction('[Counter] Increment');\n * ```\n * With additional metadata:\n * ```ts\n * export const loginSuccess = createAction(\n *   '[Auth/API] Login Success',\n *   props<{ user: User }>()\n * );\n * ```\n * With a function:\n * ```ts\n * export const loginSuccess = createAction(\n *   '[Auth/API] Login Success',\n *   (response: Response) => response.user\n * );\n * ```\n *\n * **Dispatching an action**\n *\n * Without additional metadata:\n * ```ts\n * store.dispatch(increment());\n * ```\n * With additional metadata:\n * ```ts\n * store.dispatch(loginSuccess({ user: newUser }));\n * ```\n *\n * **Referencing an action in a reducer**\n *\n * Using a switch statement:\n * ```ts\n * switch (action.type) {\n *   // ...\n *   case AuthApiActions.loginSuccess.type: {\n *     return {\n *       ...state,\n *       user: action.user\n *     };\n *   }\n * }\n * ```\n * Using a reducer creator:\n * ```ts\n * on(AuthApiActions.loginSuccess, (state, { user }) => ({ ...state, user }))\n * ```\n *\n *  **Referencing an action in an effect**\n * ```ts\n * effectName$ = createEffect(\n *   () => this.actions$.pipe(\n *     ofType(AuthApiActions.loginSuccess),\n *     // ...\n *   )\n * );\n * ```\n */\nexport function createAction<T extends string, C extends Creator>(\n  type: T,\n  config?: { _as: 'props' } | C\n): ActionCreator<T> {\n  REGISTERED_ACTION_TYPES[type] = (REGISTERED_ACTION_TYPES[type] || 0) + 1;\n\n  if (typeof config === 'function') {\n    return defineType(type, (...args: any[]) => ({\n      ...config(...args),\n      type,\n    }));\n  }\n  const as = config ? config._as : 'empty';\n  switch (as) {\n    case 'empty':\n      return defineType(type, () => ({ type }));\n    case 'props':\n      return defineType(type, (props: object) => ({\n        ...props,\n        type,\n      }));\n    default:\n      throw new Error('Unexpected config.');\n  }\n}\n\nexport function props<\n  P extends SafeProps,\n  SafeProps = NotAllowedInPropsCheck<P>\n>(): ActionCreatorProps<P> {\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  return { _as: 'props', _p: undefined! };\n}\n\nexport function union<\n  C extends { [key: string]: ActionCreator<string, Creator> }\n>(creators: C): ReturnType<C[keyof C]> {\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  return undefined!;\n}\n\nfunction defineType<T extends string>(\n  type: T,\n  creator: Creator\n): ActionCreator<T> {\n  return Object.defineProperty(creator, 'type', {\n    value: type,\n    writable: false,\n  }) as ActionCreator<T>;\n}\n","export function capitalize<T extends string>(text: T): Capitalize<T> {\n  return (text.charAt(0).toUpperCase() + text.substring(1)) as Capitalize<T>;\n}\n","import { createAction, props } from './action_creator';\nimport { ActionCreatorProps, Creator } from './models';\nimport { capitalize } from './helpers';\nimport {\n  ActionGroup,\n  ActionGroupConfig,\n  ActionName,\n} from './action_group_creator_models';\n\n/**\n * @description\n * A function that creates a group of action creators with the same source.\n *\n * @param config An object that contains a source and dictionary of events.\n * An event is a key-value pair of an event name and event props.\n * @returns A dictionary of action creators.\n * The name of each action creator is created by camel casing the event name.\n * The type of each action is created using the \"[Source] Event Name\" pattern.\n *\n * @usageNotes\n *\n * ```ts\n * const authApiActions = createActionGroup({\n *   source: 'Auth API',\n *   events: {\n *     // defining events with payload using the `props` function\n *     'Login Success': props<{ userId: number; token: string }>(),\n *     'Login Failure': props<{ error: string }>(),\n *\n *     // defining an event without payload using the `emptyProps` function\n *     'Logout Success': emptyProps(),\n *\n *     // defining an event with payload using the props factory\n *     'Logout Failure': (error: Error) => ({ error }),\n *   },\n * });\n *\n * // action type: \"[Auth API] Login Success\"\n * authApiActions.loginSuccess({ userId: 10, token: 'ngrx' });\n *\n * // action type: \"[Auth API] Login Failure\"\n * authApiActions.loginFailure({ error: 'Login Failure!' });\n *\n * // action type: \"[Auth API] Logout Success\"\n * authApiActions.logoutSuccess();\n *\n * // action type: \"[Auth API] Logout Failure\";\n * authApiActions.logoutFailure(new Error('Logout Failure!'));\n * ```\n */\nexport function createActionGroup<\n  Source extends string,\n  Events extends Record<string, ActionCreatorProps<unknown> | Creator>\n>(config: ActionGroupConfig<Source, Events>): ActionGroup<Source, Events> {\n  const { source, events } = config;\n\n  return Object.keys(events).reduce(\n    (actionGroup, eventName) => ({\n      ...actionGroup,\n      [toActionName(eventName)]: createAction(\n        toActionType(source, eventName),\n        events[eventName]\n      ),\n    }),\n    {} as ActionGroup<Source, Events>\n  );\n}\n\nexport function emptyProps(): ActionCreatorProps<void> {\n  return props();\n}\n\nfunction toActionName<EventName extends string>(\n  eventName: EventName\n): ActionName<EventName> {\n  return eventName\n    .trim()\n    .toLowerCase()\n    .split(' ')\n    .map((word, i) => (i === 0 ? word : capitalize(word)))\n    .join('') as ActionName<EventName>;\n}\n\nfunction toActionType<Source extends string, EventName extends string>(\n  source: Source,\n  eventName: EventName\n): `[${Source}] ${EventName}` {\n  return `[${source}] ${eventName}`;\n}\n","import { Injectable, OnDestroy, Provider } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\nimport { Action } from './models';\n\nexport const INIT = '@ngrx/store/init' as const;\n\n@Injectable()\nexport class ActionsSubject\n  extends BehaviorSubject<Action>\n  implements OnDestroy\n{\n  constructor() {\n    super({ type: INIT });\n  }\n\n  override next(action: Action): void {\n    if (typeof action === 'function') {\n      throw new TypeError(`\n        Dispatch expected an object, instead it received a function.\n        If you're using the createAction function, make sure to invoke the function\n        before dispatching the action. For example, someAction should be someAction().`);\n    } else if (typeof action === 'undefined') {\n      throw new TypeError(`Actions must be objects`);\n    } else if (typeof action.type === 'undefined') {\n      throw new TypeError(`Actions must have a type property`);\n    }\n    super.next(action);\n  }\n\n  override complete() {\n    /* noop */\n  }\n\n  ngOnDestroy() {\n    super.complete();\n  }\n}\n\nexport const ACTIONS_SUBJECT_PROVIDERS: Provider[] = [ActionsSubject];\n","import { InjectionToken } from '@angular/core';\nimport { RuntimeChecks, MetaReducer } from './models';\n\nexport const _ROOT_STORE_GUARD = new InjectionToken<void>(\n  '@ngrx/store Internal Root Guard'\n);\nexport const _INITIAL_STATE = new InjectionToken(\n  '@ngrx/store Internal Initial State'\n);\nexport const INITIAL_STATE = new InjectionToken('@ngrx/store Initial State');\nexport const REDUCER_FACTORY = new InjectionToken(\n  '@ngrx/store Reducer Factory'\n);\nexport const _REDUCER_FACTORY = new InjectionToken(\n  '@ngrx/store Internal Reducer Factory Provider'\n);\nexport const INITIAL_REDUCERS = new InjectionToken(\n  '@ngrx/store Initial Reducers'\n);\nexport const _INITIAL_REDUCERS = new InjectionToken(\n  '@ngrx/store Internal Initial Reducers'\n);\nexport const STORE_FEATURES = new InjectionToken('@ngrx/store Store Features');\nexport const _STORE_REDUCERS = new InjectionToken(\n  '@ngrx/store Internal Store Reducers'\n);\nexport const _FEATURE_REDUCERS = new InjectionToken(\n  '@ngrx/store Internal Feature Reducers'\n);\n\nexport const _FEATURE_CONFIGS = new InjectionToken(\n  '@ngrx/store Internal Feature Configs'\n);\n\nexport const _STORE_FEATURES = new InjectionToken(\n  '@ngrx/store Internal Store Features'\n);\n\nexport const _FEATURE_REDUCERS_TOKEN = new InjectionToken(\n  '@ngrx/store Internal Feature Reducers Token'\n);\nexport const FEATURE_REDUCERS = new InjectionToken(\n  '@ngrx/store Feature Reducers'\n);\n\n/**\n * User-defined meta reducers from StoreModule.forRoot()\n */\nexport const USER_PROVIDED_META_REDUCERS = new InjectionToken<MetaReducer[]>(\n  '@ngrx/store User Provided Meta Reducers'\n);\n\n/**\n * Meta reducers defined either internally by @ngrx/store or by library authors\n */\nexport const META_REDUCERS = new InjectionToken<MetaReducer[]>(\n  '@ngrx/store Meta Reducers'\n);\n\n/**\n * Concats the user provided meta reducers and the meta reducers provided on the multi\n * injection token\n */\nexport const _RESOLVED_META_REDUCERS = new InjectionToken<MetaReducer>(\n  '@ngrx/store Internal Resolved Meta Reducers'\n);\n\n/**\n * Runtime checks defined by the user via an InjectionToken\n * Defaults to `_USER_RUNTIME_CHECKS`\n */\nexport const USER_RUNTIME_CHECKS = new InjectionToken<RuntimeChecks>(\n  '@ngrx/store User Runtime Checks Config'\n);\n\n/**\n * Runtime checks defined by the user via forRoot()\n */\nexport const _USER_RUNTIME_CHECKS = new InjectionToken<RuntimeChecks>(\n  '@ngrx/store Internal User Runtime Checks Config'\n);\n\n/**\n * Runtime checks currently in use\n */\nexport const ACTIVE_RUNTIME_CHECKS = new InjectionToken<RuntimeChecks>(\n  '@ngrx/store Internal Runtime Checks'\n);\n\nexport const _ACTION_TYPE_UNIQUENESS_CHECK = new InjectionToken<void>(\n  '@ngrx/store Check if Action types are unique'\n);\n\n/**\n * InjectionToken that registers the global Store.\n * Mainly used to provide a hook that can be injected\n * to ensure the root state is loaded before something\n * that depends on it.\n */\nexport const ROOT_STORE_PROVIDER = new InjectionToken<void>(\n  '@ngrx/store Root Store Provider'\n);\n\n/**\n * InjectionToken that registers feature states.\n * Mainly used to provide a hook that can be injected\n * to ensure feature state is loaded before something\n * that depends on it.\n */\nexport const FEATURE_STATE_PROVIDER = new InjectionToken<void>(\n  '@ngrx/store Feature State Provider'\n);\n","import {\n  Action,\n  ActionReducer,\n  ActionReducerFactory,\n  ActionReducerMap,\n  MetaReducer,\n  InitialState,\n} from './models';\n\nexport function combineReducers<T, V extends Action = Action>(\n  reducers: ActionReducerMap<T, V>,\n  initialState?: Partial<T>\n): ActionReducer<T, V>;\n/**\n * @description\n * Combines reducers for individual features into a single reducer.\n *\n * You can use this function to delegate handling of state transitions to multiple reducers, each acting on their\n * own sub-state within the root state.\n *\n * @param reducers An object mapping keys of the root state to their corresponding feature reducer.\n * @param initialState Provides a state value if the current state is `undefined`, as it is initially.\n * @returns A reducer function.\n *\n * @usageNotes\n *\n * **Example combining two feature reducers into one \"root\" reducer**\n *\n * ```ts\n * export const reducer = combineReducers({\n *   featureA: featureAReducer,\n *   featureB: featureBReducer\n * });\n * ```\n *\n * You can also override the initial states of the sub-features:\n * ```ts\n * export const reducer = combineReducers({\n *   featureA: featureAReducer,\n *   featureB: featureBReducer\n * }, {\n *   featureA: { counterA: 13 },\n *   featureB: { counterB: 37 }\n * });\n * ```\n */\nexport function combineReducers(\n  reducers: any,\n  initialState: any = {}\n): ActionReducer<any, Action> {\n  const reducerKeys = Object.keys(reducers);\n  const finalReducers: any = {};\n\n  for (let i = 0; i < reducerKeys.length; i++) {\n    const key = reducerKeys[i];\n    if (typeof reducers[key] === 'function') {\n      finalReducers[key] = reducers[key];\n    }\n  }\n\n  const finalReducerKeys = Object.keys(finalReducers);\n\n  return function combination(state, action) {\n    state = state === undefined ? initialState : state;\n    let hasChanged = false;\n    const nextState: any = {};\n    for (let i = 0; i < finalReducerKeys.length; i++) {\n      const key = finalReducerKeys[i];\n      const reducer: any = finalReducers[key];\n      const previousStateForKey = state[key];\n      const nextStateForKey = reducer(previousStateForKey, action);\n\n      nextState[key] = nextStateForKey;\n      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;\n    }\n    return hasChanged ? nextState : state;\n  };\n}\n\nexport function omit<T extends { [key: string]: any }>(\n  object: T,\n  keyToRemove: keyof T\n): Partial<T> {\n  return Object.keys(object)\n    .filter((key) => key !== keyToRemove)\n    .reduce((result, key) => Object.assign(result, { [key]: object[key] }), {});\n}\n\nexport function compose<A>(): (i: A) => A;\nexport function compose<A, B>(b: (i: A) => B): (i: A) => B;\nexport function compose<A, B, C>(c: (i: B) => C, b: (i: A) => B): (i: A) => C;\nexport function compose<A, B, C, D>(\n  d: (i: C) => D,\n  c: (i: B) => C,\n  b: (i: A) => B\n): (i: A) => D;\nexport function compose<A, B, C, D, E>(\n  e: (i: D) => E,\n  d: (i: C) => D,\n  c: (i: B) => C,\n  b: (i: A) => B\n): (i: A) => E;\nexport function compose<A, B, C, D, E, F>(\n  f: (i: E) => F,\n  e: (i: D) => E,\n  d: (i: C) => D,\n  c: (i: B) => C,\n  b: (i: A) => B\n): (i: A) => F;\nexport function compose<A = any, F = any>(...functions: any[]): (i: A) => F;\nexport function compose(...functions: any[]) {\n  return function (arg: any) {\n    if (functions.length === 0) {\n      return arg;\n    }\n\n    const last = functions[functions.length - 1];\n    const rest = functions.slice(0, -1);\n\n    return rest.reduceRight((composed, fn) => fn(composed), last(arg));\n  };\n}\n\nexport function createReducerFactory<T, V extends Action = Action>(\n  reducerFactory: ActionReducerFactory<T, V>,\n  metaReducers?: MetaReducer<T, V>[]\n): ActionReducerFactory<T, V> {\n  if (Array.isArray(metaReducers) && metaReducers.length > 0) {\n    (reducerFactory as any) = compose.apply(null, [\n      ...metaReducers,\n      reducerFactory,\n    ]);\n  }\n\n  return (reducers: ActionReducerMap<T, V>, initialState?: InitialState<T>) => {\n    const reducer = reducerFactory(reducers);\n    return (state: T | undefined, action: V) => {\n      state = state === undefined ? (initialState as T) : state;\n      return reducer(state, action);\n    };\n  };\n}\n\nexport function createFeatureReducerFactory<T, V extends Action = Action>(\n  metaReducers?: MetaReducer<T, V>[]\n): (reducer: ActionReducer<T, V>, initialState?: T) => ActionReducer<T, V> {\n  const reducerFactory =\n    Array.isArray(metaReducers) && metaReducers.length > 0\n      ? compose<ActionReducer<T, V>>(...metaReducers)\n      : (r: ActionReducer<T, V>) => r;\n\n  return (reducer: ActionReducer<T, V>, initialState?: T) => {\n    reducer = reducerFactory(reducer);\n\n    return (state: T | undefined, action: V) => {\n      state = state === undefined ? initialState : state;\n      return reducer(state, action);\n    };\n  };\n}\n","import { Inject, Injectable, OnDestroy, Provider } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { ActionsSubject } from './actions_subject';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerFactory,\n  ActionReducerMap,\n  StoreFeature,\n} from './models';\nimport { INITIAL_REDUCERS, INITIAL_STATE, REDUCER_FACTORY } from './tokens';\nimport {\n  createFeatureReducerFactory,\n  createReducerFactory,\n  omit,\n} from './utils';\n\nexport abstract class ReducerObservable extends Observable<\n  ActionReducer<any, any>\n> {}\nexport abstract class ReducerManagerDispatcher extends ActionsSubject {}\nexport const UPDATE = '@ngrx/store/update-reducers' as const;\n\n@Injectable()\nexport class ReducerManager\n  extends BehaviorSubject<ActionReducer<any, any>>\n  implements OnDestroy\n{\n  get currentReducers(): ActionReducerMap<any, any> {\n    return this.reducers;\n  }\n\n  constructor(\n    private dispatcher: ReducerManagerDispatcher,\n    @Inject(INITIAL_STATE) private initialState: any,\n    @Inject(INITIAL_REDUCERS) private reducers: ActionReducerMap<any, any>,\n    @Inject(REDUCER_FACTORY)\n    private reducerFactory: ActionReducerFactory<any, any>\n  ) {\n    super(reducerFactory(reducers, initialState));\n  }\n\n  addFeature(feature: StoreFeature<any, any>) {\n    this.addFeatures([feature]);\n  }\n\n  addFeatures(features: StoreFeature<any, any>[]) {\n    const reducers = features.reduce(\n      (\n        reducerDict,\n        { reducers, reducerFactory, metaReducers, initialState, key }\n      ) => {\n        const reducer =\n          typeof reducers === 'function'\n            ? createFeatureReducerFactory(metaReducers)(reducers, initialState)\n            : createReducerFactory(reducerFactory, metaReducers)(\n                reducers,\n                initialState\n              );\n\n        reducerDict[key] = reducer;\n        return reducerDict;\n      },\n      {} as { [key: string]: ActionReducer<any, any> }\n    );\n\n    this.addReducers(reducers);\n  }\n\n  removeFeature(feature: StoreFeature<any, any>) {\n    this.removeFeatures([feature]);\n  }\n\n  removeFeatures(features: StoreFeature<any, any>[]) {\n    this.removeReducers(features.map((p) => p.key));\n  }\n\n  addReducer(key: string, reducer: ActionReducer<any, any>) {\n    this.addReducers({ [key]: reducer });\n  }\n\n  addReducers(reducers: { [key: string]: ActionReducer<any, any> }) {\n    this.reducers = { ...this.reducers, ...reducers };\n    this.updateReducers(Object.keys(reducers));\n  }\n\n  removeReducer(featureKey: string) {\n    this.removeReducers([featureKey]);\n  }\n\n  removeReducers(featureKeys: string[]) {\n    featureKeys.forEach((key) => {\n      this.reducers = omit(this.reducers, key) /*TODO(#823)*/ as any;\n    });\n    this.updateReducers(featureKeys);\n  }\n\n  private updateReducers(featureKeys: string[]) {\n    this.next(this.reducerFactory(this.reducers, this.initialState));\n    this.dispatcher.next(<Action>{\n      type: UPDATE,\n      features: featureKeys,\n    });\n  }\n\n  ngOnDestroy() {\n    this.complete();\n  }\n}\n\nexport const REDUCER_MANAGER_PROVIDERS: Provider[] = [\n  ReducerManager,\n  { provide: ReducerObservable, useExisting: ReducerManager },\n  { provide: ReducerManagerDispatcher, useExisting: ActionsSubject },\n];\n","import { Injectable, OnDestroy, Provider } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport { Action } from './models';\n\n@Injectable()\nexport class ScannedActionsSubject\n  extends Subject<Action>\n  implements OnDestroy\n{\n  ngOnDestroy() {\n    this.complete();\n  }\n}\n\nexport const SCANNED_ACTIONS_SUBJECT_PROVIDERS: Provider[] = [\n  ScannedActionsSubject,\n];\n","import { Inject, Injectable, OnDestroy, Provider } from '@angular/core';\nimport {\n  BehaviorSubject,\n  Observable,\n  queueScheduler,\n  Subscription,\n} from 'rxjs';\nimport { observeOn, scan, withLatestFrom } from 'rxjs/operators';\n\nimport { ActionsSubject, INIT } from './actions_subject';\nimport { Action, ActionReducer } from './models';\nimport { ReducerObservable } from './reducer_manager';\nimport { ScannedActionsSubject } from './scanned_actions_subject';\nimport { INITIAL_STATE } from './tokens';\n\nexport abstract class StateObservable extends Observable<any> {}\n\n@Injectable()\nexport class State<T> extends BehaviorSubject<any> implements OnDestroy {\n  static readonly INIT = INIT;\n\n  private stateSubscription: Subscription;\n\n  constructor(\n    actions$: ActionsSubject,\n    reducer$: ReducerObservable,\n    scannedActions: ScannedActionsSubject,\n    @Inject(INITIAL_STATE) initialState: any\n  ) {\n    super(initialState);\n\n    const actionsOnQueue$: Observable<Action> = actions$.pipe(\n      observeOn(queueScheduler)\n    );\n    const withLatestReducer$: Observable<[Action, ActionReducer<any, Action>]> =\n      actionsOnQueue$.pipe(withLatestFrom(reducer$));\n\n    const seed: StateActionPair<T> = { state: initialState };\n    const stateAndAction$: Observable<{\n      state: any;\n      action?: Action;\n    }> = withLatestReducer$.pipe(\n      scan<[Action, ActionReducer<T, Action>], StateActionPair<T>>(\n        reduceState,\n        seed\n      )\n    );\n\n    this.stateSubscription = stateAndAction$.subscribe(({ state, action }) => {\n      this.next(state);\n      scannedActions.next(action as Action);\n    });\n  }\n\n  ngOnDestroy() {\n    this.stateSubscription.unsubscribe();\n    this.complete();\n  }\n}\n\nexport type StateActionPair<T, V extends Action = Action> = {\n  state: T | undefined;\n  action?: V;\n};\nexport function reduceState<T, V extends Action = Action>(\n  stateActionPair: StateActionPair<T, V> = { state: undefined },\n  [action, reducer]: [V, ActionReducer<T, V>]\n): StateActionPair<T, V> {\n  const { state } = stateActionPair;\n  return { state: reducer(state, action), action };\n}\n\nexport const STATE_PROVIDERS: Provider[] = [\n  State,\n  { provide: StateObservable, useExisting: State },\n];\n","// disabled because we have lowercase generics for `select`\nimport { Injectable, Provider } from '@angular/core';\nimport { Observable, Observer, Operator } from 'rxjs';\nimport { distinctUntilChanged, map, pluck } from 'rxjs/operators';\n\nimport { ActionsSubject } from './actions_subject';\nimport { Action, ActionReducer, FunctionIsNotAllowed } from './models';\nimport { ReducerManager } from './reducer_manager';\nimport { StateObservable } from './state';\n\n@Injectable()\nexport class Store<T = object>\n  extends Observable<T>\n  implements Observer<Action>\n{\n  constructor(\n    state$: StateObservable,\n    private actionsObserver: ActionsSubject,\n    private reducerManager: ReducerManager\n  ) {\n    super();\n\n    this.source = state$;\n  }\n\n  select<K>(mapFn: (state: T) => K): Observable<K>;\n  /**\n   * @deprecated Selectors with props are deprecated, for more info see {@link https://github.com/ngrx/platform/issues/2980 Github Issue}\n   */\n  select<K, Props = any>(\n    mapFn: (state: T, props: Props) => K,\n    props: Props\n  ): Observable<K>;\n  select<a extends keyof T>(key: a): Observable<T[a]>;\n  select<a extends keyof T, b extends keyof T[a]>(\n    key1: a,\n    key2: b\n  ): Observable<T[a][b]>;\n  select<a extends keyof T, b extends keyof T[a], c extends keyof T[a][b]>(\n    key1: a,\n    key2: b,\n    key3: c\n  ): Observable<T[a][b][c]>;\n  select<\n    a extends keyof T,\n    b extends keyof T[a],\n    c extends keyof T[a][b],\n    d extends keyof T[a][b][c]\n  >(key1: a, key2: b, key3: c, key4: d): Observable<T[a][b][c][d]>;\n  select<\n    a extends keyof T,\n    b extends keyof T[a],\n    c extends keyof T[a][b],\n    d extends keyof T[a][b][c],\n    e extends keyof T[a][b][c][d]\n  >(key1: a, key2: b, key3: c, key4: d, key5: e): Observable<T[a][b][c][d][e]>;\n  select<\n    a extends keyof T,\n    b extends keyof T[a],\n    c extends keyof T[a][b],\n    d extends keyof T[a][b][c],\n    e extends keyof T[a][b][c][d],\n    f extends keyof T[a][b][c][d][e]\n  >(\n    key1: a,\n    key2: b,\n    key3: c,\n    key4: d,\n    key5: e,\n    key6: f\n  ): Observable<T[a][b][c][d][e][f]>;\n  select<\n    a extends keyof T,\n    b extends keyof T[a],\n    c extends keyof T[a][b],\n    d extends keyof T[a][b][c],\n    e extends keyof T[a][b][c][d],\n    f extends keyof T[a][b][c][d][e],\n    K = any\n  >(\n    key1: a,\n    key2: b,\n    key3: c,\n    key4: d,\n    key5: e,\n    key6: f,\n    ...paths: string[]\n  ): Observable<K>;\n  select<Props = any, K = any>(\n    pathOrMapFn: ((state: T, props?: Props) => K) | string,\n    ...paths: string[]\n  ): Observable<any> {\n    return (select as any).call(null, pathOrMapFn, ...paths)(this);\n  }\n\n  override lift<R>(operator: Operator<T, R>): Store<R> {\n    const store = new Store<R>(this, this.actionsObserver, this.reducerManager);\n    store.operator = operator;\n\n    return store;\n  }\n\n  dispatch<V extends Action = Action>(\n    action: V &\n      FunctionIsNotAllowed<\n        V,\n        'Functions are not allowed to be dispatched. Did you forget to call the action creator function?'\n      >\n  ) {\n    this.actionsObserver.next(action);\n  }\n\n  next(action: Action) {\n    this.actionsObserver.next(action);\n  }\n\n  error(err: any) {\n    this.actionsObserver.error(err);\n  }\n\n  complete() {\n    this.actionsObserver.complete();\n  }\n\n  addReducer<State, Actions extends Action = Action>(\n    key: string,\n    reducer: ActionReducer<State, Actions>\n  ) {\n    this.reducerManager.addReducer(key, reducer);\n  }\n\n  removeReducer<Key extends Extract<keyof T, string>>(key: Key) {\n    this.reducerManager.removeReducer(key);\n  }\n}\n\nexport const STORE_PROVIDERS: Provider[] = [Store];\n\nexport function select<T, K>(\n  mapFn: (state: T) => K\n): (source$: Observable<T>) => Observable<K>;\n/**\n * @deprecated Selectors with props are deprecated, for more info see {@link https://github.com/ngrx/platform/issues/2980 Github Issue}\n */\nexport function select<T, Props, K>(\n  mapFn: (state: T, props: Props) => K,\n  props: Props\n): (source$: Observable<T>) => Observable<K>;\nexport function select<T, a extends keyof T>(\n  key: a\n): (source$: Observable<T>) => Observable<T[a]>;\nexport function select<T, a extends keyof T, b extends keyof T[a]>(\n  key1: a,\n  key2: b\n): (source$: Observable<T>) => Observable<T[a][b]>;\nexport function select<\n  T,\n  a extends keyof T,\n  b extends keyof T[a],\n  c extends keyof T[a][b]\n>(\n  key1: a,\n  key2: b,\n  key3: c\n): (source$: Observable<T>) => Observable<T[a][b][c]>;\nexport function select<\n  T,\n  a extends keyof T,\n  b extends keyof T[a],\n  c extends keyof T[a][b],\n  d extends keyof T[a][b][c]\n>(\n  key1: a,\n  key2: b,\n  key3: c,\n  key4: d\n): (source$: Observable<T>) => Observable<T[a][b][c][d]>;\nexport function select<\n  T,\n  a extends keyof T,\n  b extends keyof T[a],\n  c extends keyof T[a][b],\n  d extends keyof T[a][b][c],\n  e extends keyof T[a][b][c][d]\n>(\n  key1: a,\n  key2: b,\n  key3: c,\n  key4: d,\n  key5: e\n): (source$: Observable<T>) => Observable<T[a][b][c][d][e]>;\nexport function select<\n  T,\n  a extends keyof T,\n  b extends keyof T[a],\n  c extends keyof T[a][b],\n  d extends keyof T[a][b][c],\n  e extends keyof T[a][b][c][d],\n  f extends keyof T[a][b][c][d][e]\n>(\n  key1: a,\n  key2: b,\n  key3: c,\n  key4: d,\n  key5: e,\n  key6: f\n): (source$: Observable<T>) => Observable<T[a][b][c][d][e][f]>;\nexport function select<\n  T,\n  a extends keyof T,\n  b extends keyof T[a],\n  c extends keyof T[a][b],\n  d extends keyof T[a][b][c],\n  e extends keyof T[a][b][c][d],\n  f extends keyof T[a][b][c][d][e],\n  K = any\n>(\n  key1: a,\n  key2: b,\n  key3: c,\n  key4: d,\n  key5: e,\n  key6: f,\n  ...paths: string[]\n): (source$: Observable<T>) => Observable<K>;\nexport function select<T, Props, K>(\n  pathOrMapFn: ((state: T, props?: Props) => any) | string,\n  propsOrPath?: Props | string,\n  ...paths: string[]\n) {\n  return function selectOperator(source$: Observable<T>): Observable<K> {\n    let mapped$: Observable<any>;\n\n    if (typeof pathOrMapFn === 'string') {\n      const pathSlices = [<string>propsOrPath, ...paths].filter(Boolean);\n      mapped$ = source$.pipe(pluck(pathOrMapFn, ...pathSlices));\n    } else if (typeof pathOrMapFn === 'function') {\n      mapped$ = source$.pipe(\n        map((source) => pathOrMapFn(source, <Props>propsOrPath))\n      );\n    } else {\n      throw new TypeError(\n        `Unexpected type '${typeof pathOrMapFn}' in select operator,` +\n          ` expected 'string' or 'function'`\n      );\n    }\n\n    return mapped$.pipe(distinctUntilChanged());\n  };\n}\n","export const RUNTIME_CHECK_URL =\n  'https://ngrx.io/guide/store/configuration/runtime-checks';\n\nexport function isUndefined(target: any): target is undefined {\n  return target === undefined;\n}\n\nexport function isNull(target: any): target is null {\n  return target === null;\n}\n\nexport function isArray(target: any): target is Array<any> {\n  return Array.isArray(target);\n}\n\nexport function isString(target: any): target is string {\n  return typeof target === 'string';\n}\n\nexport function isBoolean(target: any): target is boolean {\n  return typeof target === 'boolean';\n}\n\nexport function isNumber(target: any): target is number {\n  return typeof target === 'number';\n}\n\nexport function isObjectLike(target: any): target is object {\n  return typeof target === 'object' && target !== null;\n}\n\nexport function isObject(target: any): target is object {\n  return isObjectLike(target) && !isArray(target);\n}\n\nexport function isPlainObject(target: any): target is object {\n  if (!isObject(target)) {\n    return false;\n  }\n\n  const targetPrototype = Object.getPrototypeOf(target);\n  return targetPrototype === Object.prototype || targetPrototype === null;\n}\n\nexport function isFunction(target: any): target is () => void {\n  return typeof target === 'function';\n}\n\nexport function isComponent(target: any) {\n  return isFunction(target) && target.hasOwnProperty('ɵcmp');\n}\n\nexport function hasOwnProperty(target: object, propertyName: string): boolean {\n  return Object.prototype.hasOwnProperty.call(target, propertyName);\n}\n","let _ngrxMockEnvironment = false;\nexport function setNgrxMockEnvironment(value: boolean): void {\n  _ngrxMockEnvironment = value;\n}\nexport function isNgrxMockEnvironment(): boolean {\n  return _ngrxMockEnvironment;\n}\n","import { Selector, SelectorWithProps } from './models';\nimport { isDevMode } from '@angular/core';\nimport { isNgrxMockEnvironment } from './flags';\n\nexport type AnyFn = (...args: any[]) => any;\n\nexport type MemoizedProjection = {\n  memoized: AnyFn;\n  reset: () => void;\n  setResult: (result?: any) => void;\n  clearResult: () => void;\n};\n\nexport type MemoizeFn = (t: AnyFn) => MemoizedProjection;\n\nexport type ComparatorFn = (a: any, b: any) => boolean;\n\nexport type DefaultProjectorFn<T> = (...args: any[]) => T;\n\nexport interface MemoizedSelector<\n  State,\n  Result,\n  ProjectorFn = DefaultProjectorFn<Result>\n> extends Selector<State, Result> {\n  release(): void;\n  projector: ProjectorFn;\n  setResult: (result?: Result) => void;\n  clearResult: () => void;\n}\n\n/**\n * @deprecated Selectors with props are deprecated, for more info see {@link https://github.com/ngrx/platform/issues/2980 Github Issue}\n */\nexport interface MemoizedSelectorWithProps<\n  State,\n  Props,\n  Result,\n  ProjectorFn = DefaultProjectorFn<Result>\n> extends SelectorWithProps<State, Props, Result> {\n  release(): void;\n  projector: ProjectorFn;\n  setResult: (result?: Result) => void;\n  clearResult: () => void;\n}\n\nexport function isEqualCheck(a: any, b: any): boolean {\n  return a === b;\n}\n\nfunction isArgumentsChanged(\n  args: IArguments,\n  lastArguments: IArguments,\n  comparator: ComparatorFn\n) {\n  for (let i = 0; i < args.length; i++) {\n    if (!comparator(args[i], lastArguments[i])) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport function resultMemoize(\n  projectionFn: AnyFn,\n  isResultEqual: ComparatorFn\n) {\n  return defaultMemoize(projectionFn, isEqualCheck, isResultEqual);\n}\n\nexport function defaultMemoize(\n  projectionFn: AnyFn,\n  isArgumentsEqual = isEqualCheck,\n  isResultEqual = isEqualCheck\n): MemoizedProjection {\n  let lastArguments: null | IArguments = null;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, , , , ,\n  let lastResult: any = null;\n  let overrideResult: any;\n\n  function reset() {\n    lastArguments = null;\n    lastResult = null;\n  }\n\n  function setResult(result: any = undefined) {\n    overrideResult = { result };\n  }\n\n  function clearResult() {\n    overrideResult = undefined;\n  }\n\n  /* eslint-disable prefer-rest-params, prefer-spread */\n\n  // disabled because of the use of `arguments`\n  function memoized(): any {\n    if (overrideResult !== undefined) {\n      return overrideResult.result;\n    }\n\n    if (!lastArguments) {\n      lastResult = projectionFn.apply(null, arguments as any);\n      lastArguments = arguments;\n      return lastResult;\n    }\n\n    if (!isArgumentsChanged(arguments, lastArguments, isArgumentsEqual)) {\n      return lastResult;\n    }\n\n    const newResult = projectionFn.apply(null, arguments as any);\n    lastArguments = arguments;\n\n    if (isResultEqual(lastResult, newResult)) {\n      return lastResult;\n    }\n\n    lastResult = newResult;\n\n    return newResult;\n  }\n\n  return { memoized, reset, setResult, clearResult };\n}\n\nexport function createSelector<State, S1, Result>(\n  s1: Selector<State, S1>,\n  projector: (s1: S1) => Result\n): MemoizedSelector<State, Result, typeof projector>;\nexport function createSelector<State, S1, S2, Result>(\n  s1: Selector<State, S1>,\n  s2: Selector<State, S2>,\n  projector: (s1: S1, s2: S2) => Result\n): MemoizedSelector<State, Result, typeof projector>;\nexport function createSelector<State, S1, S2, S3, Result>(\n  s1: Selector<State, S1>,\n  s2: Selector<State, S2>,\n  s3: Selector<State, S3>,\n  projector: (s1: S1, s2: S2, s3: S3) => Result\n): MemoizedSelector<State, Result, typeof projector>;\nexport function createSelector<State, S1, S2, S3, S4, Result>(\n  s1: Selector<State, S1>,\n  s2: Selector<State, S2>,\n  s3: Selector<State, S3>,\n  s4: Selector<State, S4>,\n  projector: (s1: S1, s2: S2, s3: S3, s4: S4) => Result\n): MemoizedSelector<State, Result, typeof projector>;\nexport function createSelector<State, S1, S2, S3, S4, S5, Result>(\n  s1: Selector<State, S1>,\n  s2: Selector<State, S2>,\n  s3: Selector<State, S3>,\n  s4: Selector<State, S4>,\n  s5: Selector<State, S5>,\n  projector: (s1: S1, s2: S2, s3: S3, s4: S4, s5: S5) => Result\n): MemoizedSelector<State, Result, typeof projector>;\nexport function createSelector<State, S1, S2, S3, S4, S5, S6, Result>(\n  s1: Selector<State, S1>,\n  s2: Selector<State, S2>,\n  s3: Selector<State, S3>,\n  s4: Selector<State, S4>,\n  s5: Selector<State, S5>,\n  s6: Selector<State, S6>,\n  projector: (s1: S1, s2: S2, s3: S3, s4: S4, s5: S5, s6: S6) => Result\n): MemoizedSelector<State, Result, typeof projector>;\nexport function createSelector<State, S1, S2, S3, S4, S5, S6, S7, Result>(\n  s1: Selector<State, S1>,\n  s2: Selector<State, S2>,\n  s3: Selector<State, S3>,\n  s4: Selector<State, S4>,\n  s5: Selector<State, S5>,\n  s6: Selector<State, S6>,\n  s7: Selector<State, S7>,\n  projector: (s1: S1, s2: S2, s3: S3, s4: S4, s5: S5, s6: S6, s7: S7) => Result\n): MemoizedSelector<State, Result, typeof projector>;\nexport function createSelector<State, S1, S2, S3, S4, S5, S6, S7, S8, Result>(\n  s1: Selector<State, S1>,\n  s2: Selector<State, S2>,\n  s3: Selector<State, S3>,\n  s4: Selector<State, S4>,\n  s5: Selector<State, S5>,\n  s6: Selector<State, S6>,\n  s7: Selector<State, S7>,\n  s8: Selector<State, S8>,\n  projector: (\n    s1: S1,\n    s2: S2,\n    s3: S3,\n    s4: S4,\n    s5: S5,\n    s6: S6,\n    s7: S7,\n    s8: S8\n  ) => Result\n): MemoizedSelector<State, Result, typeof projector>;\n\nexport function createSelector<\n  Selectors extends Record<string, Selector<State, unknown>>,\n  State = Selectors extends Record<string, Selector<infer S, unknown>>\n    ? S\n    : never,\n  Result extends Record<string, unknown> = {\n    [Key in keyof Selectors]: Selectors[Key] extends Selector<State, infer R>\n      ? R\n      : never;\n  }\n>(selectors: Selectors): MemoizedSelector<State, Result, never>;\n\nexport function createSelector<State, Slices extends unknown[], Result>(\n  ...args: [...slices: Selector<State, unknown>[], projector: unknown] &\n    [\n      ...slices: { [i in keyof Slices]: Selector<State, Slices[i]> },\n      projector: (...s: Slices) => Result\n    ]\n): MemoizedSelector<State, Result, (...s: Slices) => Result>;\n\n/**\n * @deprecated Selectors with props are deprecated, for more info see {@link https://github.com/ngrx/platform/issues/2980 Github Issue}\n */\nexport function createSelector<State, Props, S1, Result>(\n  s1: SelectorWithProps<State, Props, S1>,\n  projector: (s1: S1, props: Props) => Result\n): MemoizedSelectorWithProps<State, Props, Result, typeof projector>;\n\n/**\n * @deprecated Selectors with props are deprecated, for more info see {@link https://github.com/ngrx/platform/issues/2980 Github Issue}\n */\nexport function createSelector<State, Props, S1, S2, Result>(\n  s1: SelectorWithProps<State, Props, S1>,\n  s2: SelectorWithProps<State, Props, S2>,\n  projector: (s1: S1, s2: S2, props: Props) => Result\n): MemoizedSelectorWithProps<State, Props, Result, typeof projector>;\n\n/**\n * @deprecated Selectors with props are deprecated, for more info see {@link https://github.com/ngrx/platform/issues/2980 Github Issue}\n */\nexport function createSelector<State, Props, S1, S2, S3, Result>(\n  s1: SelectorWithProps<State, Props, S1>,\n  s2: SelectorWithProps<State, Props, S2>,\n  s3: SelectorWithProps<State, Props, S3>,\n  projector: (s1: S1, s2: S2, s3: S3, props: Props) => Result\n): MemoizedSelectorWithProps<State, Props, Result, typeof projector>;\n\n/**\n * @deprecated Selectors with props are deprecated, for more info see {@link https://github.com/ngrx/platform/issues/2980 Github Issue}\n */\nexport function createSelector<State, Props, S1, S2, S3, S4, Result>(\n  s1: SelectorWithProps<State, Props, S1>,\n  s2: SelectorWithProps<State, Props, S2>,\n  s3: SelectorWithProps<State, Props, S3>,\n  s4: SelectorWithProps<State, Props, S4>,\n  projector: (s1: S1, s2: S2, s3: S3, s4: S4, props: Props) => Result\n): MemoizedSelectorWithProps<State, Props, Result, typeof projector>;\n\n/**\n * @deprecated Selectors with props are deprecated, for more info see {@link https://github.com/ngrx/platform/issues/2980 Github Issue}\n */\nexport function createSelector<State, Props, S1, S2, S3, S4, S5, Result>(\n  s1: SelectorWithProps<State, Props, S1>,\n  s2: SelectorWithProps<State, Props, S2>,\n  s3: SelectorWithProps<State, Props, S3>,\n  s4: SelectorWithProps<State, Props, S4>,\n  s5: SelectorWithProps<State, Props, S5>,\n  projector: (s1: S1, s2: S2, s3: S3, s4: S4, s5: S5, props: Props) => Result\n): MemoizedSelectorWithProps<State, Props, Result, typeof projector>;\n\n/**\n * @deprecated Selectors with props are deprecated, for more info see {@link https://github.com/ngrx/platform/issues/2980 Github Issue}\n */\nexport function createSelector<State, Props, S1, S2, S3, S4, S5, S6, Result>(\n  s1: SelectorWithProps<State, Props, S1>,\n  s2: SelectorWithProps<State, Props, S2>,\n  s3: SelectorWithProps<State, Props, S3>,\n  s4: SelectorWithProps<State, Props, S4>,\n  s5: SelectorWithProps<State, Props, S5>,\n  s6: SelectorWithProps<State, Props, S6>,\n  projector: (\n    s1: S1,\n    s2: S2,\n    s3: S3,\n    s4: S4,\n    s5: S5,\n    s6: S6,\n    props: Props\n  ) => Result\n): MemoizedSelectorWithProps<State, Props, Result, typeof projector>;\n\n/**\n * @deprecated Selectors with props are deprecated, for more info see {@link https://github.com/ngrx/platform/issues/2980 Github Issue}\n */\nexport function createSelector<\n  State,\n  Props,\n  S1,\n  S2,\n  S3,\n  S4,\n  S5,\n  S6,\n  S7,\n  Result\n>(\n  s1: SelectorWithProps<State, Props, S1>,\n  s2: SelectorWithProps<State, Props, S2>,\n  s3: SelectorWithProps<State, Props, S3>,\n  s4: SelectorWithProps<State, Props, S4>,\n  s5: SelectorWithProps<State, Props, S5>,\n  s6: SelectorWithProps<State, Props, S6>,\n  s7: SelectorWithProps<State, Props, S7>,\n  projector: (\n    s1: S1,\n    s2: S2,\n    s3: S3,\n    s4: S4,\n    s5: S5,\n    s6: S6,\n    s7: S7,\n    props: Props\n  ) => Result\n): MemoizedSelectorWithProps<State, Props, Result, typeof projector>;\n\n/**\n * @deprecated Selectors with props are deprecated, for more info see {@link https://github.com/ngrx/platform/issues/2980 Github Issue}\n */\nexport function createSelector<\n  State,\n  Props,\n  S1,\n  S2,\n  S3,\n  S4,\n  S5,\n  S6,\n  S7,\n  S8,\n  Result\n>(\n  s1: SelectorWithProps<State, Props, S1>,\n  s2: SelectorWithProps<State, Props, S2>,\n  s3: SelectorWithProps<State, Props, S3>,\n  s4: SelectorWithProps<State, Props, S4>,\n  s5: SelectorWithProps<State, Props, S5>,\n  s6: SelectorWithProps<State, Props, S6>,\n  s7: SelectorWithProps<State, Props, S7>,\n  s8: SelectorWithProps<State, Props, S8>,\n  projector: (\n    s1: S1,\n    s2: S2,\n    s3: S3,\n    s4: S4,\n    s5: S5,\n    s6: S6,\n    s7: S7,\n    s8: S8,\n    props: Props\n  ) => Result\n): MemoizedSelectorWithProps<State, Props, Result, typeof projector>;\n\nexport function createSelector<State, Slices extends unknown[], Result>(\n  selectors: Selector<State, unknown>[] &\n    [...{ [i in keyof Slices]: Selector<State, Slices[i]> }],\n  projector: (...s: Slices) => Result\n): MemoizedSelector<State, Result, (...s: Slices) => Result>;\n\n/**\n * @deprecated Selectors with props are deprecated, for more info see {@link https://github.com/ngrx/platform/issues/2980 Github Issue}\n */\nexport function createSelector<State, Props, S1, Result>(\n  selectors: [SelectorWithProps<State, Props, S1>],\n  projector: (s1: S1, props: Props) => Result\n): MemoizedSelectorWithProps<State, Props, Result, typeof projector>;\n\n/**\n * @deprecated Selectors with props are deprecated, for more info see {@link https://github.com/ngrx/platform/issues/2980 Github Issue}\n */\nexport function createSelector<State, Props, S1, S2, Result>(\n  selectors: [\n    SelectorWithProps<State, Props, S1>,\n    SelectorWithProps<State, Props, S2>\n  ],\n  projector: (s1: S1, s2: S2, props: Props) => Result\n): MemoizedSelectorWithProps<State, Props, Result, typeof projector>;\n\n/**\n * @deprecated Selectors with props are deprecated, for more info see {@link https://github.com/ngrx/platform/issues/2980 Github Issue}\n */\nexport function createSelector<State, Props, S1, S2, S3, Result>(\n  selectors: [\n    SelectorWithProps<State, Props, S1>,\n    SelectorWithProps<State, Props, S2>,\n    SelectorWithProps<State, Props, S3>\n  ],\n  projector: (s1: S1, s2: S2, s3: S3, props: Props) => Result\n): MemoizedSelectorWithProps<State, Props, Result, typeof projector>;\n\n/**\n * @deprecated Selectors with props are deprecated, for more info see {@link https://github.com/ngrx/platform/issues/2980 Github Issue}\n */\nexport function createSelector<State, Props, S1, S2, S3, S4, Result>(\n  selectors: [\n    SelectorWithProps<State, Props, S1>,\n    SelectorWithProps<State, Props, S2>,\n    SelectorWithProps<State, Props, S3>,\n    SelectorWithProps<State, Props, S4>\n  ],\n  projector: (s1: S1, s2: S2, s3: S3, s4: S4, props: Props) => Result\n): MemoizedSelectorWithProps<State, Props, Result, typeof projector>;\n\n/**\n * @deprecated Selectors with props are deprecated, for more info see {@link https://github.com/ngrx/platform/issues/2980 Github Issue}\n */\nexport function createSelector<State, Props, S1, S2, S3, S4, S5, Result>(\n  selectors: [\n    SelectorWithProps<State, Props, S1>,\n    SelectorWithProps<State, Props, S2>,\n    SelectorWithProps<State, Props, S3>,\n    SelectorWithProps<State, Props, S4>,\n    SelectorWithProps<State, Props, S5>\n  ],\n  projector: (s1: S1, s2: S2, s3: S3, s4: S4, s5: S5, props: Props) => Result\n): MemoizedSelectorWithProps<State, Props, Result, typeof projector>;\n\n/**\n * @deprecated Selectors with props are deprecated, for more info see {@link https://github.com/ngrx/platform/issues/2980 Github Issue}\n */\nexport function createSelector<State, Props, S1, S2, S3, S4, S5, S6, Result>(\n  selectors: [\n    SelectorWithProps<State, Props, S1>,\n    SelectorWithProps<State, Props, S2>,\n    SelectorWithProps<State, Props, S3>,\n    SelectorWithProps<State, Props, S4>,\n    SelectorWithProps<State, Props, S5>,\n    SelectorWithProps<State, Props, S6>\n  ],\n  projector: (\n    s1: S1,\n    s2: S2,\n    s3: S3,\n    s4: S4,\n    s5: S5,\n    s6: S6,\n    props: Props\n  ) => Result\n): MemoizedSelectorWithProps<State, Props, Result, typeof projector>;\n\n/**\n * @deprecated Selectors with props are deprecated, for more info see {@link https://github.com/ngrx/platform/issues/2980 Github Issue}\n */\nexport function createSelector<\n  State,\n  Props,\n  S1,\n  S2,\n  S3,\n  S4,\n  S5,\n  S6,\n  S7,\n  Result\n>(\n  selectors: [\n    SelectorWithProps<State, Props, S1>,\n    SelectorWithProps<State, Props, S2>,\n    SelectorWithProps<State, Props, S3>,\n    SelectorWithProps<State, Props, S4>,\n    SelectorWithProps<State, Props, S5>,\n    SelectorWithProps<State, Props, S6>,\n    SelectorWithProps<State, Props, S7>\n  ],\n  projector: (\n    s1: S1,\n    s2: S2,\n    s3: S3,\n    s4: S4,\n    s5: S5,\n    s6: S6,\n    s7: S7,\n    props: Props\n  ) => Result\n): MemoizedSelectorWithProps<State, Props, Result, typeof projector>;\n\n/**\n * @deprecated Selectors with props are deprecated, for more info see {@link https://github.com/ngrx/platform/issues/2980 Github Issue}\n */\nexport function createSelector<\n  State,\n  Props,\n  S1,\n  S2,\n  S3,\n  S4,\n  S5,\n  S6,\n  S7,\n  S8,\n  Result\n>(\n  selectors: [\n    SelectorWithProps<State, Props, S1>,\n    SelectorWithProps<State, Props, S2>,\n    SelectorWithProps<State, Props, S3>,\n    SelectorWithProps<State, Props, S4>,\n    SelectorWithProps<State, Props, S5>,\n    SelectorWithProps<State, Props, S6>,\n    SelectorWithProps<State, Props, S7>,\n    SelectorWithProps<State, Props, S8>\n  ],\n  projector: (\n    s1: S1,\n    s2: S2,\n    s3: S3,\n    s4: S4,\n    s5: S5,\n    s6: S6,\n    s7: S7,\n    s8: S8,\n    props: Props\n  ) => Result\n): MemoizedSelectorWithProps<State, Props, Result, typeof projector>;\n\nexport function createSelector(\n  ...input: any[]\n): MemoizedSelector<any, any> | MemoizedSelectorWithProps<any, any, any> {\n  return createSelectorFactory(defaultMemoize)(...input);\n}\n\nexport function defaultStateFn(\n  state: any,\n  selectors: Selector<any, any>[] | SelectorWithProps<any, any, any>[],\n  props: any,\n  memoizedProjector: MemoizedProjection\n): any {\n  if (props === undefined) {\n    const args = (<Selector<any, any>[]>selectors).map((fn) => fn(state));\n    return memoizedProjector.memoized.apply(null, args);\n  }\n\n  const args = (<SelectorWithProps<any, any, any>[]>selectors).map((fn) =>\n    fn(state, props)\n  );\n  return memoizedProjector.memoized.apply(null, [...args, props]);\n}\n\nexport type SelectorFactoryConfig<T = any, V = any> = {\n  stateFn: (\n    state: T,\n    selectors: Selector<any, any>[],\n    props: any,\n    memoizedProjector: MemoizedProjection\n  ) => V;\n};\n\nexport function createSelectorFactory<T = any, V = any>(\n  memoize: MemoizeFn\n): (...input: any[]) => MemoizedSelector<T, V>;\nexport function createSelectorFactory<T = any, V = any>(\n  memoize: MemoizeFn,\n  options: SelectorFactoryConfig<T, V>\n): (...input: any[]) => MemoizedSelector<T, V>;\n/**\n * @deprecated Selectors with props are deprecated, for more info see {@link https://github.com/ngrx/platform/issues/2980 Github Issue}\n */\nexport function createSelectorFactory<T = any, Props = any, V = any>(\n  memoize: MemoizeFn\n): (...input: any[]) => MemoizedSelectorWithProps<T, Props, V>;\n/**\n * @deprecated Selectors with props are deprecated, for more info see {@link https://github.com/ngrx/platform/issues/2980 Github Issue}\n */\nexport function createSelectorFactory<T = any, Props = any, V = any>(\n  memoize: MemoizeFn,\n  options: SelectorFactoryConfig<T, V>\n): (...input: any[]) => MemoizedSelectorWithProps<T, Props, V>;\n/**\n *\n * @param memoize The function used to memoize selectors\n * @param options Config Object that may include a `stateFn` function defining how to return the selector's value, given the entire `Store`'s state, parent `Selector`s, `Props`, and a `MemoizedProjection`\n *\n * @usageNotes\n *\n * **Creating a Selector Factory Where Array Order Does Not Matter**\n *\n * ```ts\n * function removeMatch(arr: string[], target: string): string[] {\n *   const matchIndex = arr.indexOf(target);\n *   return [...arr.slice(0, matchIndex), ...arr.slice(matchIndex + 1)];\n * }\n *\n * function orderDoesNotMatterComparer(a: any, b: any): boolean {\n *   if (!Array.isArray(a) || !Array.isArray(b)) {\n *     return a === b;\n *   }\n *   if (a.length !== b.length) {\n *     return false;\n *   }\n *   let tempB = [...b];\n *   function reduceToDetermineIfArraysContainSameContents(\n *     previousCallResult: boolean,\n *     arrayMember: any\n *   ): boolean {\n *     if (previousCallResult === false) {\n *       return false;\n *     }\n *     if (tempB.includes(arrayMember)) {\n *       tempB = removeMatch(tempB, arrayMember);\n *       return true;\n *     }\n *     return false;\n *   }\n *   return a.reduce(reduceToDetermineIfArraysContainSameContents, true);\n * }\n *\n * export const createOrderDoesNotMatterSelector = createSelectorFactory(\n *   (projectionFun) => defaultMemoize(\n *     projectionFun,\n *     orderDoesNotMatterComparer,\n *     orderDoesNotMatterComparer\n *   )\n * );\n * ```\n *\n * **Creating an Alternative Memoization Strategy**\n *\n * ```ts\n * function serialize(x: any): string {\n *   return JSON.stringify(x);\n * }\n *\n * export const createFullHistorySelector = createSelectorFactory(\n *  (projectionFunction) => {\n *    const cache = {};\n *\n *    function memoized() {\n *      const serializedArguments = serialize(...arguments);\n *       if (cache[serializedArguments] != null) {\n *         cache[serializedArguments] = projectionFunction.apply(null, arguments);\n *       }\n *       return cache[serializedArguments];\n *     }\n *     return {\n *       memoized,\n *       reset: () => {},\n *       setResult: () => {},\n *       clearResult: () => {},\n *     };\n *   }\n * );\n * ```\n */\nexport function createSelectorFactory(\n  memoize: MemoizeFn,\n  options: SelectorFactoryConfig<any, any> = {\n    stateFn: defaultStateFn,\n  }\n) {\n  return function (\n    ...input: any[]\n  ): MemoizedSelector<any, any> | MemoizedSelectorWithProps<any, any, any> {\n    let args = input;\n    if (Array.isArray(args[0])) {\n      const [head, ...tail] = args;\n      args = [...head, ...tail];\n    } else if (args.length === 1 && isSelectorsDictionary(args[0])) {\n      args = extractArgsFromSelectorsDictionary(args[0]);\n    }\n\n    const selectors = args.slice(0, args.length - 1);\n    const projector = args[args.length - 1];\n    const memoizedSelectors = selectors.filter(\n      (selector: any) =>\n        selector.release && typeof selector.release === 'function'\n    );\n\n    const memoizedProjector = memoize(function (...selectors: any[]) {\n      return projector.apply(null, selectors);\n    });\n\n    const memoizedState = defaultMemoize(function (state: any, props: any) {\n      return options.stateFn.apply(null, [\n        state,\n        selectors,\n        props,\n        memoizedProjector,\n      ]);\n    });\n\n    function release() {\n      memoizedState.reset();\n      memoizedProjector.reset();\n\n      memoizedSelectors.forEach((selector) => selector.release());\n    }\n\n    return Object.assign(memoizedState.memoized, {\n      release,\n      projector: memoizedProjector.memoized,\n      setResult: memoizedState.setResult,\n      clearResult: memoizedState.clearResult,\n    });\n  };\n}\n\nexport function createFeatureSelector<T>(\n  featureName: string\n): MemoizedSelector<object, T>;\n/**\n * @deprecated  Feature selectors with a root state are deprecated, for more info see {@link https://github.com/ngrx/platform/issues/3179 Github Issue}\n */\nexport function createFeatureSelector<T, V>(\n  featureName: keyof T\n): MemoizedSelector<T, V>;\nexport function createFeatureSelector(\n  featureName: any\n): MemoizedSelector<any, any> {\n  return createSelector(\n    (state: any) => {\n      const featureState = state[featureName];\n      if (!isNgrxMockEnvironment() && isDevMode() && !(featureName in state)) {\n        console.warn(\n          `@ngrx/store: The feature name \"${featureName}\" does ` +\n            'not exist in the state, therefore createFeatureSelector ' +\n            'cannot access it.  Be sure it is imported in a loaded module ' +\n            `using StoreModule.forRoot('${featureName}', ...) or ` +\n            `StoreModule.forFeature('${featureName}', ...).  If the default ` +\n            'state is intended to be undefined, as is the case with router ' +\n            'state, this development-only warning message can be ignored.'\n        );\n      }\n      return featureState;\n    },\n    (featureState: any) => featureState\n  );\n}\n\nfunction isSelectorsDictionary(\n  selectors: unknown\n): selectors is Record<string, Selector<unknown, unknown>> {\n  return (\n    !!selectors &&\n    typeof selectors === 'object' &&\n    Object.values(selectors).every((selector) => typeof selector === 'function')\n  );\n}\n\nfunction extractArgsFromSelectorsDictionary(\n  selectorsDictionary: Record<string, Selector<unknown, unknown>>\n): [\n  ...selectors: Selector<unknown, unknown>[],\n  projector: (...selectorResults: unknown[]) => unknown\n] {\n  const selectors = Object.values(selectorsDictionary);\n  const resultKeys = Object.keys(selectorsDictionary);\n  const projector = (...selectorResults: unknown[]) =>\n    resultKeys.reduce(\n      (result, key, index) => ({\n        ...result,\n        [key]: selectorResults[index],\n      }),\n      {}\n    );\n\n  return [...selectors, projector];\n}\n","import { capitalize } from './helpers';\nimport { ActionReducer, Selector } from './models';\nimport { isPlainObject } from './meta-reducers/utils';\nimport {\n  createFeatureSelector,\n  createSelector,\n  MemoizedSelector,\n} from './selector';\nimport { FeatureSelector, NestedSelectors } from './feature_creator_models';\n\nexport interface FeatureConfig<FeatureName extends string, FeatureState> {\n  name: FeatureName;\n  reducer: ActionReducer<FeatureState>;\n}\n\ntype Feature<\n  AppState extends Record<string, any>,\n  FeatureName extends keyof AppState & string,\n  FeatureState extends AppState[FeatureName]\n> = FeatureConfig<FeatureName, FeatureState> &\n  BaseSelectors<AppState, FeatureName, FeatureState>;\n\ntype FeatureWithExtraSelectors<\n  FeatureName extends string,\n  FeatureState,\n  ExtraSelectors extends SelectorsDictionary\n> = string extends keyof ExtraSelectors\n  ? Feature<Record<string, any>, FeatureName, FeatureState>\n  : Omit<\n      Feature<Record<string, any>, FeatureName, FeatureState>,\n      keyof ExtraSelectors\n    > &\n      ExtraSelectors;\n\ntype BaseSelectors<\n  AppState extends Record<string, any>,\n  FeatureName extends keyof AppState & string,\n  FeatureState extends AppState[FeatureName]\n> = FeatureSelector<AppState, FeatureName, FeatureState> &\n  NestedSelectors<AppState, FeatureState>;\n\ntype SelectorsDictionary = Record<\n  string,\n  | Selector<Record<string, any>, unknown>\n  | ((...args: any[]) => Selector<Record<string, any>, unknown>)\n>;\n\ntype ExtraSelectorsFactory<\n  FeatureName extends string,\n  FeatureState,\n  ExtraSelectors extends SelectorsDictionary\n> = (\n  baseSelectors: BaseSelectors<Record<string, any>, FeatureName, FeatureState>\n) => ExtraSelectors;\n\ntype NotAllowedFeatureStateCheck<FeatureState> =\n  FeatureState extends Required<FeatureState>\n    ? unknown\n    : 'optional properties are not allowed in the feature state';\n\n/**\n * Creates a feature object with extra selectors.\n *\n * @param featureConfig An object that contains a feature name, a feature\n * reducer, and extra selectors factory.\n * @returns An object that contains a feature name, a feature reducer,\n * a feature selector, a selector for each feature state property, and\n * extra selectors.\n */\nexport function createFeature<\n  FeatureName extends string,\n  FeatureState,\n  ExtraSelectors extends SelectorsDictionary\n>(\n  featureConfig: FeatureConfig<FeatureName, FeatureState> & {\n    extraSelectors: ExtraSelectorsFactory<\n      FeatureName,\n      FeatureState,\n      ExtraSelectors\n    >;\n  } & NotAllowedFeatureStateCheck<FeatureState>\n): FeatureWithExtraSelectors<FeatureName, FeatureState, ExtraSelectors>;\n/**\n * Creates a feature object.\n *\n * @param featureConfig An object that contains a feature name and a feature\n * reducer.\n * @returns An object that contains a feature name, a feature reducer,\n * a feature selector, and a selector for each feature state property.\n */\nexport function createFeature<FeatureName extends string, FeatureState>(\n  featureConfig: FeatureConfig<FeatureName, FeatureState> &\n    NotAllowedFeatureStateCheck<FeatureState>\n): Feature<Record<string, any>, FeatureName, FeatureState>;\n/**\n * @deprecated Use the `createFeature` signature without root state instead.\n * For more info see: https://github.com/ngrx/platform/issues/3737\n */\nexport function createFeature<\n  AppState extends Record<string, any>,\n  FeatureName extends keyof AppState & string = keyof AppState & string,\n  FeatureState extends AppState[FeatureName] = AppState[FeatureName]\n>(\n  featureConfig: FeatureConfig<FeatureName, FeatureState> &\n    NotAllowedFeatureStateCheck<FeatureState>\n): Feature<AppState, FeatureName, FeatureState>;\n/**\n * @description\n * A function that accepts a feature name and a feature reducer, and creates\n * a feature selector and a selector for each feature state property.\n * This function also provides the ability to add extra selectors to\n * the feature object.\n *\n * @param featureConfig An object that contains a feature name and a feature\n * reducer as required, and extra selectors factory as an optional argument.\n * @returns An object that contains a feature name, a feature reducer,\n * a feature selector, a selector for each feature state property, and extra\n * selectors.\n *\n * @usageNotes\n *\n * ```ts\n * interface ProductsState {\n *   products: Product[];\n *   selectedId: string | null;\n * }\n *\n * const initialState: ProductsState = {\n *   products: [],\n *   selectedId: null,\n * };\n *\n * const productsFeature = createFeature({\n *   name: 'products',\n *   reducer: createReducer(\n *     initialState,\n *     on(ProductsApiActions.loadSuccess(state, { products }) => ({\n *       ...state,\n *       products,\n *     }),\n *   ),\n * });\n *\n * const {\n *   name,\n *   reducer,\n *   // feature selector\n *   selectProductsState, // type: MemoizedSelector<Record<string, any>, ProductsState>\n *   // feature state properties selectors\n *   selectProducts, // type: MemoizedSelector<Record<string, any>, Product[]>\n *   selectSelectedId, // type: MemoizedSelector<Record<string, any>, string | null>\n * } = productsFeature;\n * ```\n *\n * **Creating Feature with Extra Selectors**\n *\n * ```ts\n * type CallState = 'init' | 'loading' | 'loaded' | { error: string };\n *\n * interface State extends EntityState<Product> {\n *   callState: CallState;\n * }\n *\n * const adapter = createEntityAdapter<Product>();\n * const initialState: State = adapter.getInitialState({\n *   callState: 'init',\n * });\n *\n * export const productsFeature = createFeature({\n *   name: 'products',\n *   reducer: createReducer(initialState),\n *   extraSelectors: ({ selectProductsState, selectCallState }) => ({\n *     ...adapter.getSelectors(selectBooksState),\n *     ...getCallStateSelectors(selectCallState)\n *   }),\n * });\n *\n * const {\n *   name,\n *   reducer,\n *   // feature selector\n *   selectProductsState,\n *   // feature state properties selectors\n *   selectIds,\n *   selectEntities,\n *   selectCallState,\n *   // selectors returned by `adapter.getSelectors`\n *   selectAll,\n *   selectTotal,\n *   // selectors returned by `getCallStateSelectors`\n *   selectIsLoading,\n *   selectIsLoaded,\n *   selectError,\n * } = productsFeature;\n * ```\n */\nexport function createFeature<\n  AppState extends Record<string, any>,\n  FeatureName extends keyof AppState & string,\n  FeatureState extends AppState[FeatureName],\n  ExtraSelectors extends SelectorsDictionary\n>(\n  featureConfig: FeatureConfig<FeatureName, FeatureState> & {\n    extraSelectors?: ExtraSelectorsFactory<\n      FeatureName,\n      FeatureState,\n      ExtraSelectors\n    >;\n  }\n): Feature<AppState, FeatureName, FeatureState> & ExtraSelectors {\n  const {\n    name,\n    reducer,\n    extraSelectors: extraSelectorsFactory,\n  } = featureConfig;\n\n  const featureSelector = createFeatureSelector<FeatureState>(name);\n  const nestedSelectors = createNestedSelectors(featureSelector, reducer);\n  const baseSelectors = {\n    [`select${capitalize(name)}State`]: featureSelector,\n    ...nestedSelectors,\n  } as BaseSelectors<Record<string, any>, FeatureName, FeatureState>;\n  const extraSelectors = extraSelectorsFactory\n    ? extraSelectorsFactory(baseSelectors)\n    : {};\n\n  return {\n    name,\n    reducer,\n    ...baseSelectors,\n    ...extraSelectors,\n  } as Feature<AppState, FeatureName, FeatureState> & ExtraSelectors;\n}\n\nfunction createNestedSelectors<\n  AppState extends Record<string, any>,\n  FeatureState\n>(\n  featureSelector: MemoizedSelector<AppState, FeatureState>,\n  reducer: ActionReducer<FeatureState>\n): NestedSelectors<AppState, FeatureState> {\n  const initialState = getInitialState(reducer);\n  const nestedKeys = (\n    isPlainObject(initialState) ? Object.keys(initialState) : []\n  ) as Array<keyof FeatureState & string>;\n\n  return nestedKeys.reduce(\n    (nestedSelectors, nestedKey) => ({\n      ...nestedSelectors,\n      [`select${capitalize(nestedKey)}`]: createSelector(\n        featureSelector,\n        (parentState) => parentState?.[nestedKey]\n      ),\n    }),\n    {} as NestedSelectors<AppState, FeatureState>\n  );\n}\n\nfunction getInitialState<FeatureState>(\n  reducer: ActionReducer<FeatureState>\n): FeatureState {\n  return reducer(undefined, { type: '@ngrx/feature/init' });\n}\n","import { inject, InjectionToken } from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  ActionReducerFactory,\n  StoreFeature,\n  InitialState,\n  MetaReducer,\n  RuntimeChecks,\n} from './models';\nimport { combineReducers } from './utils';\nimport { Store } from './store';\n\nexport interface StoreConfig<T, V extends Action = Action> {\n  initialState?: InitialState<T>;\n  reducerFactory?: ActionReducerFactory<T, V>;\n  metaReducers?: MetaReducer<{ [P in keyof T]: T[P] }, V>[];\n}\n\nexport interface RootStoreConfig<T, V extends Action = Action>\n  extends StoreConfig<T, V> {\n  runtimeChecks?: Partial<RuntimeChecks>;\n}\n\n/**\n * An object with the name and the reducer for the feature.\n */\nexport interface FeatureSlice<T, V extends Action = Action> {\n  name: string;\n  reducer: ActionReducer<T, V>;\n}\n\nexport function _createStoreReducers<T, V extends Action = Action>(\n  reducers: ActionReducerMap<T, V> | InjectionToken<ActionReducerMap<T, V>>\n): ActionReducerMap<T, V> {\n  return reducers instanceof InjectionToken ? inject(reducers) : reducers;\n}\n\nexport function _createFeatureStore<T, V extends Action = Action>(\n  configs: StoreConfig<T, V>[] | InjectionToken<StoreConfig<T, V>>[],\n  featureStores: StoreFeature<T, V>[]\n) {\n  return featureStores.map((feat, index) => {\n    if (configs[index] instanceof InjectionToken) {\n      const conf = inject(configs[index] as InjectionToken<StoreConfig<T, V>>);\n      return {\n        key: feat.key,\n        reducerFactory: conf.reducerFactory\n          ? conf.reducerFactory\n          : combineReducers,\n        metaReducers: conf.metaReducers ? conf.metaReducers : [],\n        initialState: conf.initialState,\n      };\n    }\n    return feat;\n  });\n}\n\nexport function _createFeatureReducers<T, V extends Action = Action>(\n  reducerCollection: Array<\n    ActionReducerMap<T, V> | InjectionToken<ActionReducerMap<T, V>>\n  >\n): ActionReducerMap<T, V>[] {\n  return reducerCollection.map((reducer) => {\n    return reducer instanceof InjectionToken ? inject(reducer) : reducer;\n  });\n}\n\nexport function _initialStateFactory(initialState: any): any {\n  if (typeof initialState === 'function') {\n    return initialState();\n  }\n\n  return initialState;\n}\n\nexport function _concatMetaReducers(\n  metaReducers: MetaReducer[],\n  userProvidedMetaReducers: MetaReducer[]\n): MetaReducer[] {\n  return metaReducers.concat(userProvidedMetaReducers);\n}\n\nexport function _provideForRootGuard(): unknown {\n  const store = inject(Store, { optional: true, skipSelf: true });\n  if (store) {\n    throw new TypeError(\n      `The root Store has been provided more than once. Feature modules should provide feature states instead.`\n    );\n  }\n  return 'guarded';\n}\n","import { ActionReducer, Action } from '../models';\nimport { isFunction, hasOwnProperty, isObjectLike } from './utils';\n\nexport function immutabilityCheckMetaReducer(\n  reducer: ActionReducer<any, any>,\n  checks: { action: (action: Action) => boolean; state: () => boolean }\n): ActionReducer<any, any> {\n  return function (state, action) {\n    const act = checks.action(action) ? freeze(action) : action;\n\n    const nextState = reducer(state, act);\n\n    return checks.state() ? freeze(nextState) : nextState;\n  };\n}\n\nfunction freeze(target: any) {\n  Object.freeze(target);\n\n  const targetIsFunction = isFunction(target);\n\n  Object.getOwnPropertyNames(target).forEach((prop) => {\n    // Ignore Ivy properties, ref: https://github.com/ngrx/platform/issues/2109#issuecomment-582689060\n    if (prop.startsWith('ɵ')) {\n      return;\n    }\n\n    if (\n      hasOwnProperty(target, prop) &&\n      (targetIsFunction\n        ? prop !== 'caller' && prop !== 'callee' && prop !== 'arguments'\n        : true)\n    ) {\n      const propValue = target[prop];\n\n      if (\n        (isObjectLike(propValue) || isFunction(propValue)) &&\n        !Object.isFrozen(propValue)\n      ) {\n        freeze(propValue);\n      }\n    }\n  });\n\n  return target;\n}\n","import { ActionReducer, Action } from '../models';\nimport {\n  isPlainObject,\n  isUndefined,\n  isNull,\n  isNumber,\n  isBoolean,\n  isString,\n  isArray,\n  RUNTIME_CHECK_URL,\n  isComponent,\n} from './utils';\n\nexport function serializationCheckMetaReducer(\n  reducer: ActionReducer<any, any>,\n  checks: { action: (action: Action) => boolean; state: () => boolean }\n): ActionReducer<any, any> {\n  return function (state, action) {\n    if (checks.action(action)) {\n      const unserializableAction = getUnserializable(action);\n      throwIfUnserializable(unserializableAction, 'action');\n    }\n\n    const nextState = reducer(state, action);\n\n    if (checks.state()) {\n      const unserializableState = getUnserializable(nextState);\n      throwIfUnserializable(unserializableState, 'state');\n    }\n\n    return nextState;\n  };\n}\n\nfunction getUnserializable(\n  target?: any,\n  path: string[] = []\n): false | { path: string[]; value: any } {\n  // Guard against undefined and null, e.g. a reducer that returns undefined\n  if ((isUndefined(target) || isNull(target)) && path.length === 0) {\n    return {\n      path: ['root'],\n      value: target,\n    };\n  }\n\n  const keys = Object.keys(target);\n  return keys.reduce<false | { path: string[]; value: any }>((result, key) => {\n    if (result) {\n      return result;\n    }\n\n    const value = (target as any)[key];\n\n    // Ignore Ivy components\n    if (isComponent(value)) {\n      return result;\n    }\n\n    if (\n      isUndefined(value) ||\n      isNull(value) ||\n      isNumber(value) ||\n      isBoolean(value) ||\n      isString(value) ||\n      isArray(value)\n    ) {\n      return false;\n    }\n\n    if (isPlainObject(value)) {\n      return getUnserializable(value, [...path, key]);\n    }\n\n    return {\n      path: [...path, key],\n      value,\n    };\n  }, false);\n}\n\nfunction throwIfUnserializable(\n  unserializable: false | { path: string[]; value: any },\n  context: 'state' | 'action'\n) {\n  if (unserializable === false) {\n    return;\n  }\n\n  const unserializablePath = unserializable.path.join('.');\n  const error: any = new Error(\n    `Detected unserializable ${context} at \"${unserializablePath}\". ${RUNTIME_CHECK_URL}#strict${context}serializability`\n  );\n  error.value = unserializable.value;\n  error.unserializablePath = unserializablePath;\n  throw error;\n}\n","import * as ngCore from '@angular/core';\nimport { Action, ActionReducer } from '../models';\nimport { RUNTIME_CHECK_URL } from './utils';\n\nexport function inNgZoneAssertMetaReducer(\n  reducer: ActionReducer<any, Action>,\n  checks: { action: (action: Action) => boolean }\n) {\n  return function (state: any, action: Action) {\n    if (checks.action(action) && !ngCore.NgZone.isInAngularZone()) {\n      throw new Error(\n        `Action '${action.type}' running outside NgZone. ${RUNTIME_CHECK_URL}#strictactionwithinngzone`\n      );\n    }\n    return reducer(state, action);\n  };\n}\n","import { isDevMode, Provider } from '@angular/core';\nimport {\n  serializationCheckMetaReducer,\n  immutabilityCheckMetaReducer,\n  inNgZoneAssertMetaReducer,\n} from './meta-reducers';\nimport { RuntimeChecks, MetaReducer, Action } from './models';\nimport {\n  _USER_RUNTIME_CHECKS,\n  ACTIVE_RUNTIME_CHECKS,\n  META_REDUCERS,\n  USER_RUNTIME_CHECKS,\n  _ACTION_TYPE_UNIQUENESS_CHECK,\n} from './tokens';\nimport { REGISTERED_ACTION_TYPES } from './globals';\nimport { RUNTIME_CHECK_URL } from './meta-reducers/utils';\n\nexport function createActiveRuntimeChecks(\n  runtimeChecks?: Partial<RuntimeChecks>\n): RuntimeChecks {\n  if (isDevMode()) {\n    return {\n      strictStateSerializability: false,\n      strictActionSerializability: false,\n      strictStateImmutability: true,\n      strictActionImmutability: true,\n      strictActionWithinNgZone: false,\n      strictActionTypeUniqueness: false,\n      ...runtimeChecks,\n    };\n  }\n\n  return {\n    strictStateSerializability: false,\n    strictActionSerializability: false,\n    strictStateImmutability: false,\n    strictActionImmutability: false,\n    strictActionWithinNgZone: false,\n    strictActionTypeUniqueness: false,\n  };\n}\n\nexport function createSerializationCheckMetaReducer({\n  strictActionSerializability,\n  strictStateSerializability,\n}: RuntimeChecks): MetaReducer {\n  return (reducer) =>\n    strictActionSerializability || strictStateSerializability\n      ? serializationCheckMetaReducer(reducer, {\n          action: (action) =>\n            strictActionSerializability && !ignoreNgrxAction(action),\n          state: () => strictStateSerializability,\n        })\n      : reducer;\n}\n\nexport function createImmutabilityCheckMetaReducer({\n  strictActionImmutability,\n  strictStateImmutability,\n}: RuntimeChecks): MetaReducer {\n  return (reducer) =>\n    strictActionImmutability || strictStateImmutability\n      ? immutabilityCheckMetaReducer(reducer, {\n          action: (action) =>\n            strictActionImmutability && !ignoreNgrxAction(action),\n          state: () => strictStateImmutability,\n        })\n      : reducer;\n}\n\nfunction ignoreNgrxAction(action: Action) {\n  return action.type.startsWith('@ngrx');\n}\n\nexport function createInNgZoneCheckMetaReducer({\n  strictActionWithinNgZone,\n}: RuntimeChecks): MetaReducer {\n  return (reducer) =>\n    strictActionWithinNgZone\n      ? inNgZoneAssertMetaReducer(reducer, {\n          action: (action) =>\n            strictActionWithinNgZone && !ignoreNgrxAction(action),\n        })\n      : reducer;\n}\n\nexport function provideRuntimeChecks(\n  runtimeChecks?: Partial<RuntimeChecks>\n): Provider[] {\n  return [\n    {\n      provide: _USER_RUNTIME_CHECKS,\n      useValue: runtimeChecks,\n    },\n    {\n      provide: USER_RUNTIME_CHECKS,\n      useFactory: _runtimeChecksFactory,\n      deps: [_USER_RUNTIME_CHECKS],\n    },\n    {\n      provide: ACTIVE_RUNTIME_CHECKS,\n      deps: [USER_RUNTIME_CHECKS],\n      useFactory: createActiveRuntimeChecks,\n    },\n    {\n      provide: META_REDUCERS,\n      multi: true,\n      deps: [ACTIVE_RUNTIME_CHECKS],\n      useFactory: createImmutabilityCheckMetaReducer,\n    },\n    {\n      provide: META_REDUCERS,\n      multi: true,\n      deps: [ACTIVE_RUNTIME_CHECKS],\n      useFactory: createSerializationCheckMetaReducer,\n    },\n    {\n      provide: META_REDUCERS,\n      multi: true,\n      deps: [ACTIVE_RUNTIME_CHECKS],\n      useFactory: createInNgZoneCheckMetaReducer,\n    },\n  ];\n}\n\nexport function checkForActionTypeUniqueness(): Provider[] {\n  return [\n    {\n      provide: _ACTION_TYPE_UNIQUENESS_CHECK,\n      multi: true,\n      deps: [ACTIVE_RUNTIME_CHECKS],\n      useFactory: _actionTypeUniquenessCheck,\n    },\n  ];\n}\n\nexport function _runtimeChecksFactory(\n  runtimeChecks: RuntimeChecks\n): RuntimeChecks {\n  return runtimeChecks;\n}\n\nexport function _actionTypeUniquenessCheck(config: RuntimeChecks): void {\n  if (!config.strictActionTypeUniqueness) {\n    return;\n  }\n\n  const duplicates = Object.entries(REGISTERED_ACTION_TYPES)\n    .filter(([, registrations]) => registrations > 1)\n    .map(([type]) => type);\n\n  if (duplicates.length) {\n    throw new Error(\n      `Action types are registered more than once, ${duplicates\n        .map((type) => `\"${type}\"`)\n        .join(', ')}. ${RUNTIME_CHECK_URL}#strictactiontypeuniqueness`\n    );\n  }\n}\n","import {\n  ENVIRONMENT_INITIALIZER,\n  EnvironmentProviders,\n  Inject,\n  inject,\n  InjectionToken,\n  makeEnvironmentProviders,\n  Provider,\n} from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  StoreFeature,\n} from './models';\nimport { combineReducers, createReducerFactory } from './utils';\nimport {\n  _ACTION_TYPE_UNIQUENESS_CHECK,\n  _FEATURE_CONFIGS,\n  _FEATURE_REDUCERS,\n  _FEATURE_REDUCERS_TOKEN,\n  _INITIAL_REDUCERS,\n  _INITIAL_STATE,\n  _REDUCER_FACTORY,\n  _RESOLVED_META_REDUCERS,\n  _ROOT_STORE_GUARD,\n  _STORE_FEATURES,\n  _STORE_REDUCERS,\n  FEATURE_REDUCERS,\n  FEATURE_STATE_PROVIDER,\n  INITIAL_REDUCERS,\n  INITIAL_STATE,\n  META_REDUCERS,\n  REDUCER_FACTORY,\n  ROOT_STORE_PROVIDER,\n  STORE_FEATURES,\n  USER_PROVIDED_META_REDUCERS,\n} from './tokens';\nimport { ACTIONS_SUBJECT_PROVIDERS, ActionsSubject } from './actions_subject';\nimport {\n  REDUCER_MANAGER_PROVIDERS,\n  ReducerManager,\n  ReducerObservable,\n} from './reducer_manager';\nimport {\n  SCANNED_ACTIONS_SUBJECT_PROVIDERS,\n  ScannedActionsSubject,\n} from './scanned_actions_subject';\nimport { STATE_PROVIDERS } from './state';\nimport { Store, STORE_PROVIDERS } from './store';\nimport {\n  checkForActionTypeUniqueness,\n  provideRuntimeChecks,\n} from './runtime_checks';\nimport {\n  _concatMetaReducers,\n  _createFeatureReducers,\n  _createFeatureStore,\n  _createStoreReducers,\n  _initialStateFactory,\n  _provideForRootGuard,\n  FeatureSlice,\n  RootStoreConfig,\n  StoreConfig,\n} from './store_config';\n\nexport function provideState<T, V extends Action = Action>(\n  featureName: string,\n  reducers: ActionReducerMap<T, V> | InjectionToken<ActionReducerMap<T, V>>,\n  config?: StoreConfig<T, V> | InjectionToken<StoreConfig<T, V>>\n): EnvironmentProviders;\nexport function provideState<T, V extends Action = Action>(\n  featureName: string,\n  reducer: ActionReducer<T, V> | InjectionToken<ActionReducer<T, V>>,\n  config?: StoreConfig<T, V> | InjectionToken<StoreConfig<T, V>>\n): EnvironmentProviders;\nexport function provideState<T, V extends Action = Action>(\n  slice: FeatureSlice<T, V>\n): EnvironmentProviders;\n/**\n * Provides additional slices of state in the Store.\n * These providers cannot be used at the component level.\n *\n * @usageNotes\n *\n * ### Providing Store Features\n *\n * ```ts\n * const booksRoutes: Route[] = [\n *   {\n *     path: '',\n *     providers: [provideState('books', booksReducer)],\n *     children: [\n *       { path: '', component: BookListComponent },\n *       { path: ':id', component: BookDetailsComponent },\n *     ],\n *   },\n * ];\n * ```\n */\nexport function provideState<T, V extends Action = Action>(\n  featureNameOrSlice: string | FeatureSlice<T, V>,\n  reducers?:\n    | ActionReducerMap<T, V>\n    | InjectionToken<ActionReducerMap<T, V>>\n    | ActionReducer<T, V>\n    | InjectionToken<ActionReducer<T, V>>,\n  config: StoreConfig<T, V> | InjectionToken<StoreConfig<T, V>> = {}\n): EnvironmentProviders {\n  return makeEnvironmentProviders([\n    ..._provideState(featureNameOrSlice, reducers, config),\n    ENVIRONMENT_STATE_PROVIDER,\n  ]);\n}\n\nexport function _provideStore<T, V extends Action = Action>(\n  reducers:\n    | ActionReducerMap<T, V>\n    | InjectionToken<ActionReducerMap<T, V>>\n    | Record<string, never> = {},\n  config: RootStoreConfig<T, V> = {}\n): Provider[] {\n  return [\n    {\n      provide: _ROOT_STORE_GUARD,\n      useFactory: _provideForRootGuard,\n    },\n    { provide: _INITIAL_STATE, useValue: config.initialState },\n    {\n      provide: INITIAL_STATE,\n      useFactory: _initialStateFactory,\n      deps: [_INITIAL_STATE],\n    },\n    { provide: _INITIAL_REDUCERS, useValue: reducers },\n    {\n      provide: _STORE_REDUCERS,\n      useExisting:\n        reducers instanceof InjectionToken ? reducers : _INITIAL_REDUCERS,\n    },\n    {\n      provide: INITIAL_REDUCERS,\n      deps: [_INITIAL_REDUCERS, [new Inject(_STORE_REDUCERS)]],\n      useFactory: _createStoreReducers,\n    },\n    {\n      provide: USER_PROVIDED_META_REDUCERS,\n      useValue: config.metaReducers ? config.metaReducers : [],\n    },\n    {\n      provide: _RESOLVED_META_REDUCERS,\n      deps: [META_REDUCERS, USER_PROVIDED_META_REDUCERS],\n      useFactory: _concatMetaReducers,\n    },\n    {\n      provide: _REDUCER_FACTORY,\n      useValue: config.reducerFactory ? config.reducerFactory : combineReducers,\n    },\n    {\n      provide: REDUCER_FACTORY,\n      deps: [_REDUCER_FACTORY, _RESOLVED_META_REDUCERS],\n      useFactory: createReducerFactory,\n    },\n    ACTIONS_SUBJECT_PROVIDERS,\n    REDUCER_MANAGER_PROVIDERS,\n    SCANNED_ACTIONS_SUBJECT_PROVIDERS,\n    STATE_PROVIDERS,\n    STORE_PROVIDERS,\n    provideRuntimeChecks(config.runtimeChecks),\n    checkForActionTypeUniqueness(),\n  ];\n}\n\nfunction rootStoreProviderFactory(): void {\n  inject(ActionsSubject);\n  inject(ReducerObservable);\n  inject(ScannedActionsSubject);\n  inject(Store);\n  inject(_ROOT_STORE_GUARD, { optional: true });\n  inject(_ACTION_TYPE_UNIQUENESS_CHECK, { optional: true });\n}\n\n/**\n * Environment Initializer used in the root\n * providers to initialize the Store\n */\nconst ENVIRONMENT_STORE_PROVIDER: Provider[] = [\n  { provide: ROOT_STORE_PROVIDER, useFactory: rootStoreProviderFactory },\n  {\n    provide: ENVIRONMENT_INITIALIZER,\n    multi: true,\n    useFactory() {\n      return () => inject(ROOT_STORE_PROVIDER);\n    },\n  },\n];\n\n/**\n * Provides the global Store providers and initializes\n * the Store.\n * These providers cannot be used at the component level.\n *\n * @usageNotes\n *\n * ### Providing the Global Store\n *\n * ```ts\n * bootstrapApplication(AppComponent, {\n *   providers: [provideStore()],\n * });\n * ```\n */\nexport function provideStore<T, V extends Action = Action>(\n  reducers?: ActionReducerMap<T, V> | InjectionToken<ActionReducerMap<T, V>>,\n  config?: RootStoreConfig<T, V>\n): EnvironmentProviders {\n  return makeEnvironmentProviders([\n    ..._provideStore(reducers, config),\n    ENVIRONMENT_STORE_PROVIDER,\n  ]);\n}\n\nfunction featureStateProviderFactory(): void {\n  inject(ROOT_STORE_PROVIDER);\n  const features = inject<StoreFeature<any, any>[]>(_STORE_FEATURES);\n  const featureReducers = inject<ActionReducerMap<any>[]>(FEATURE_REDUCERS);\n  const reducerManager = inject(ReducerManager);\n  inject(_ACTION_TYPE_UNIQUENESS_CHECK, { optional: true });\n\n  const feats = features.map((feature, index) => {\n    const featureReducerCollection = featureReducers.shift();\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const reducers = featureReducerCollection! /*TODO(#823)*/[index];\n\n    return {\n      ...feature,\n      reducers,\n      initialState: _initialStateFactory(feature.initialState),\n    };\n  });\n\n  reducerManager.addFeatures(feats);\n}\n\n/**\n * Environment Initializer used in the feature\n * providers to register state features\n */\nconst ENVIRONMENT_STATE_PROVIDER: Provider[] = [\n  {\n    provide: FEATURE_STATE_PROVIDER,\n    useFactory: featureStateProviderFactory,\n  },\n  {\n    provide: ENVIRONMENT_INITIALIZER,\n    multi: true,\n    useFactory() {\n      return () => inject(FEATURE_STATE_PROVIDER);\n    },\n  },\n];\n\nexport function _provideState<T, V extends Action = Action>(\n  featureNameOrSlice: string | FeatureSlice<T, V>,\n  reducers?:\n    | ActionReducerMap<T, V>\n    | InjectionToken<ActionReducerMap<T, V>>\n    | ActionReducer<T, V>\n    | InjectionToken<ActionReducer<T, V>>,\n  config: StoreConfig<T, V> | InjectionToken<StoreConfig<T, V>> = {}\n): Provider[] {\n  return [\n    {\n      provide: _FEATURE_CONFIGS,\n      multi: true,\n      useValue: featureNameOrSlice instanceof Object ? {} : config,\n    },\n    {\n      provide: STORE_FEATURES,\n      multi: true,\n      useValue: {\n        key:\n          featureNameOrSlice instanceof Object\n            ? featureNameOrSlice.name\n            : featureNameOrSlice,\n        reducerFactory:\n          !(config instanceof InjectionToken) && config.reducerFactory\n            ? config.reducerFactory\n            : combineReducers,\n        metaReducers:\n          !(config instanceof InjectionToken) && config.metaReducers\n            ? config.metaReducers\n            : [],\n        initialState:\n          !(config instanceof InjectionToken) && config.initialState\n            ? config.initialState\n            : undefined,\n      },\n    },\n    {\n      provide: _STORE_FEATURES,\n      deps: [_FEATURE_CONFIGS, STORE_FEATURES],\n      useFactory: _createFeatureStore,\n    },\n    {\n      provide: _FEATURE_REDUCERS,\n      multi: true,\n      useValue:\n        featureNameOrSlice instanceof Object\n          ? featureNameOrSlice.reducer\n          : reducers,\n    },\n    {\n      provide: _FEATURE_REDUCERS_TOKEN,\n      multi: true,\n      useExisting:\n        reducers instanceof InjectionToken ? reducers : _FEATURE_REDUCERS,\n    },\n    {\n      provide: FEATURE_REDUCERS,\n      multi: true,\n      deps: [_FEATURE_REDUCERS, [new Inject(_FEATURE_REDUCERS_TOKEN)]],\n      useFactory: _createFeatureReducers,\n    },\n    checkForActionTypeUniqueness(),\n  ];\n}\n","import {\n  Inject,\n  InjectionToken,\n  ModuleWithProviders,\n  NgModule,\n  OnDestroy,\n  Optional,\n} from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  StoreFeature,\n} from './models';\nimport {\n  _ACTION_TYPE_UNIQUENESS_CHECK,\n  _ROOT_STORE_GUARD,\n  _STORE_FEATURES,\n  FEATURE_REDUCERS,\n} from './tokens';\nimport { ActionsSubject } from './actions_subject';\nimport { ReducerManager, ReducerObservable } from './reducer_manager';\nimport { ScannedActionsSubject } from './scanned_actions_subject';\nimport { Store } from './store';\nimport {\n  _initialStateFactory,\n  FeatureSlice,\n  RootStoreConfig,\n  StoreConfig,\n} from './store_config';\nimport { _provideState, _provideStore } from './provide_store';\n\n@NgModule({})\nexport class StoreRootModule {\n  constructor(\n    actions$: ActionsSubject,\n    reducer$: ReducerObservable,\n    scannedActions$: ScannedActionsSubject,\n    store: Store<any>,\n    @Optional()\n    @Inject(_ROOT_STORE_GUARD)\n    guard: any,\n    @Optional()\n    @Inject(_ACTION_TYPE_UNIQUENESS_CHECK)\n    actionCheck: any\n  ) {}\n}\n\n@NgModule({})\nexport class StoreFeatureModule implements OnDestroy {\n  constructor(\n    @Inject(_STORE_FEATURES) private features: StoreFeature<any, any>[],\n    @Inject(FEATURE_REDUCERS) private featureReducers: ActionReducerMap<any>[],\n    private reducerManager: ReducerManager,\n    root: StoreRootModule,\n    @Optional()\n    @Inject(_ACTION_TYPE_UNIQUENESS_CHECK)\n    actionCheck: any\n  ) {\n    const feats = features.map((feature, index) => {\n      const featureReducerCollection = featureReducers.shift();\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const reducers = featureReducerCollection! /*TODO(#823)*/[index];\n\n      return {\n        ...feature,\n        reducers,\n        initialState: _initialStateFactory(feature.initialState),\n      };\n    });\n\n    reducerManager.addFeatures(feats);\n  }\n\n  // eslint-disable-next-line @angular-eslint/contextual-lifecycle\n  ngOnDestroy() {\n    this.reducerManager.removeFeatures(this.features);\n  }\n}\n\n@NgModule({})\nexport class StoreModule {\n  static forRoot<T, V extends Action = Action>(\n    reducers?: ActionReducerMap<T, V> | InjectionToken<ActionReducerMap<T, V>>,\n    config?: RootStoreConfig<T, V>\n  ): ModuleWithProviders<StoreRootModule> {\n    return {\n      ngModule: StoreRootModule,\n      providers: [..._provideStore(reducers, config)],\n    };\n  }\n\n  static forFeature<T, V extends Action = Action>(\n    featureName: string,\n    reducers: ActionReducerMap<T, V> | InjectionToken<ActionReducerMap<T, V>>,\n    config?: StoreConfig<T, V> | InjectionToken<StoreConfig<T, V>>\n  ): ModuleWithProviders<StoreFeatureModule>;\n  static forFeature<T, V extends Action = Action>(\n    featureName: string,\n    reducer: ActionReducer<T, V> | InjectionToken<ActionReducer<T, V>>,\n    config?: StoreConfig<T, V> | InjectionToken<StoreConfig<T, V>>\n  ): ModuleWithProviders<StoreFeatureModule>;\n  static forFeature<T, V extends Action = Action>(\n    slice: FeatureSlice<T, V>\n  ): ModuleWithProviders<StoreFeatureModule>;\n  static forFeature<T, V extends Action = Action>(\n    featureNameOrSlice: string | FeatureSlice<T, V>,\n    reducers?:\n      | ActionReducerMap<T, V>\n      | InjectionToken<ActionReducerMap<T, V>>\n      | ActionReducer<T, V>\n      | InjectionToken<ActionReducer<T, V>>,\n    config: StoreConfig<T, V> | InjectionToken<StoreConfig<T, V>> = {}\n  ): ModuleWithProviders<StoreFeatureModule> {\n    return {\n      ngModule: StoreFeatureModule,\n      providers: [..._provideState(featureNameOrSlice, reducers, config)],\n    };\n  }\n}\n","import { ActionCreator, ActionReducer, ActionType, Action } from './models';\n\n// Goes over the array of ActionCreators, pulls the action type out of each one\n// and returns the array of these action types.\ntype ExtractActionTypes<Creators extends readonly ActionCreator[]> = {\n  [Key in keyof Creators]: Creators[Key] extends ActionCreator<infer T>\n    ? T\n    : never;\n};\n\n/**\n * Return type of the `on` fn.\n * Contains the action reducer coupled to one or more action types.\n */\nexport interface ReducerTypes<\n  State,\n  Creators extends readonly ActionCreator[]\n> {\n  reducer: OnReducer<State, Creators>;\n  types: ExtractActionTypes<Creators>;\n}\n\n/**\n *  Specialized Reducer that is aware of the Action type it needs to handle\n */\nexport interface OnReducer<\n  // State type that is being passed from consumer of `on` fn, e.g. from `createReducer` factory\n  State,\n  Creators extends readonly ActionCreator[],\n  // Inferred type from within OnReducer function if `State` is unknown\n  InferredState = State,\n  // Resulting state would be either a State or if State is unknown then the inferred state from the function itself\n  ResultState = unknown extends State ? InferredState : State\n> {\n  (\n    // if State is unknown then set the InferredState type\n    state: unknown extends State ? InferredState : State,\n    action: ActionType<Creators[number]>\n  ): ResultState;\n}\n\n/**\n * @description\n * Associates actions with a given state change function.\n * A state change function must be provided as the last parameter.\n *\n * @param args `ActionCreator`'s followed by a state change function.\n *\n * @returns an association of action types with a state change function.\n *\n * @usageNotes\n * ```ts\n * on(AuthApiActions.loginSuccess, (state, { user }) => ({ ...state, user }))\n * ```\n */\nexport function on<\n  // State type that is being passed from `createReducer` when created within that factory function\n  State,\n  // Action creators\n  Creators extends readonly ActionCreator[],\n  // Inferred type from within OnReducer function if `State` is unknown. This is typically the case when `on` function\n  // is created outside of `createReducer` and state type is either explicitly set OR inferred by return type.\n  // For example: `const onFn = on(action, (state: State, {prop}) => ({ ...state, name: prop }));`\n  InferredState = State\n>(\n  ...args: [\n    ...creators: Creators,\n    reducer: OnReducer<\n      State extends infer S ? S : never,\n      Creators,\n      InferredState\n    >\n  ]\n): ReducerTypes<unknown extends State ? InferredState : State, Creators> {\n  const reducer = args.pop() as unknown as OnReducer<\n    unknown extends State ? InferredState : State,\n    Creators\n  >;\n  const types = (args as unknown as Creators).map(\n    (creator) => creator.type\n  ) as unknown as ExtractActionTypes<Creators>;\n  return { reducer, types };\n}\n\n/**\n * @description\n * Creates a reducer function to handle state transitions.\n *\n * Reducer creators reduce the explicitness of reducer functions with switch statements.\n *\n * @param initialState Provides a state value if the current state is `undefined`, as it is initially.\n * @param ons Associations between actions and state changes.\n * @returns A reducer function.\n *\n * @usageNotes\n *\n * - Must be used with `ActionCreator`'s (returned by `createAction`). Cannot be used with class-based action creators.\n * - The returned `ActionReducer` does not require being wrapped with another function.\n *\n * **Declaring a reducer creator**\n *\n * ```ts\n * export const reducer = createReducer(\n *   initialState,\n *   on(\n *     featureActions.actionOne,\n *     featureActions.actionTwo,\n *     (state, { updatedValue }) => ({ ...state, prop: updatedValue })\n *   ),\n *   on(featureActions.actionThree, () => initialState);\n * );\n * ```\n */\nexport function createReducer<\n  S,\n  A extends Action = Action,\n  // Additional generic for the return type is introduced to enable correct\n  // type inference when `createReducer` is used within `createFeature`.\n  // For more info see: https://github.com/microsoft/TypeScript/issues/52114\n  R extends ActionReducer<S, A> = ActionReducer<S, A>\n>(initialState: S, ...ons: ReducerTypes<S, readonly ActionCreator[]>[]): R {\n  const map = new Map<string, OnReducer<S, ActionCreator[]>>();\n  for (const on of ons) {\n    for (const type of on.types) {\n      const existingReducer = map.get(type);\n      if (existingReducer) {\n        const newReducer: typeof existingReducer = (state, action) =>\n          on.reducer(existingReducer(state, action), action);\n        map.set(type, newReducer);\n      } else {\n        map.set(type, on.reducer);\n      }\n    }\n  }\n\n  return function (state: S = initialState, action: A): S {\n    const reducer = map.get(action.type);\n    return reducer ? reducer(state, action) : state;\n  } as R;\n}\n","/**\n * DO NOT EDIT\n *\n * This file is automatically generated at build\n */\n\nexport * from './public_api';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}