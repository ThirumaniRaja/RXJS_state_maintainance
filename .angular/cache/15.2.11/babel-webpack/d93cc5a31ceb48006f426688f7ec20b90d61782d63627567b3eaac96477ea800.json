{"ast":null,"code":"import { Subscriber } from '../Subscriber';\nimport { async } from '../scheduler/async';\nexport function debounceTime(dueTime, scheduler = async) {\n  return source => source.lift(new DebounceTimeOperator(dueTime, scheduler));\n}\nclass DebounceTimeOperator {\n  constructor(dueTime, scheduler) {\n    this.dueTime = dueTime;\n    this.scheduler = scheduler;\n  }\n  call(subscriber, source) {\n    return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n  }\n}\nclass DebounceTimeSubscriber extends Subscriber {\n  constructor(destination, dueTime, scheduler) {\n    super(destination);\n    this.dueTime = dueTime;\n    this.scheduler = scheduler;\n    this.debouncedSubscription = null;\n    this.lastValue = null;\n    this.hasValue = false;\n  }\n  _next(value) {\n    this.clearDebounce();\n    this.lastValue = value;\n    this.hasValue = true;\n    this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n  }\n  _complete() {\n    this.debouncedNext();\n    this.destination.complete();\n  }\n  debouncedNext() {\n    this.clearDebounce();\n    if (this.hasValue) {\n      const {\n        lastValue\n      } = this;\n      this.lastValue = null;\n      this.hasValue = false;\n      this.destination.next(lastValue);\n    }\n  }\n  clearDebounce() {\n    const debouncedSubscription = this.debouncedSubscription;\n    if (debouncedSubscription !== null) {\n      this.remove(debouncedSubscription);\n      debouncedSubscription.unsubscribe();\n      this.debouncedSubscription = null;\n    }\n  }\n}\nfunction dispatchNext(subscriber) {\n  subscriber.debouncedNext();\n}","map":{"version":3,"names":["Subscriber","async","debounceTime","dueTime","scheduler","source","lift","DebounceTimeOperator","constructor","call","subscriber","subscribe","DebounceTimeSubscriber","destination","debouncedSubscription","lastValue","hasValue","_next","value","clearDebounce","add","schedule","dispatchNext","_complete","debouncedNext","complete","next","remove","unsubscribe"],"sources":["C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\node_modules\\rxjs\\src\\internal\\operators\\debounceTime.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { async } from '../scheduler/async';\nimport { MonoTypeOperatorFunction, SchedulerLike, TeardownLogic } from '../types';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * ![](debounceTime.png)\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link SchedulerLike} for\n * managing timers.\n *\n * ## Example\n * Emit the most recent click after a burst of clicks\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { debounceTime } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(debounceTime(1000));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nexport function debounceTime<T>(dueTime: number, scheduler: SchedulerLike = async): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DebounceTimeOperator(dueTime, scheduler));\n}\n\nclass DebounceTimeOperator<T> implements Operator<T, T> {\n  constructor(private dueTime: number, private scheduler: SchedulerLike) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceTimeSubscriber<T> extends Subscriber<T> {\n  private debouncedSubscription: Subscription = null;\n  private lastValue: T = null;\n  private hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private dueTime: number,\n              private scheduler: SchedulerLike) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.clearDebounce();\n    this.lastValue = value;\n    this.hasValue = true;\n    this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n  }\n\n  protected _complete() {\n    this.debouncedNext();\n    this.destination.complete();\n  }\n\n  debouncedNext(): void {\n    this.clearDebounce();\n\n    if (this.hasValue) {\n      const { lastValue } = this;\n      // This must be done *before* passing the value\n      // along to the destination because it's possible for\n      // the value to synchronously re-enter this operator\n      // recursively when scheduled with things like\n      // VirtualScheduler/TestScheduler.\n      this.lastValue = null;\n      this.hasValue = false;\n      this.destination.next(lastValue);\n    }\n  }\n\n  private clearDebounce(): void {\n    const debouncedSubscription = this.debouncedSubscription;\n\n    if (debouncedSubscription !== null) {\n      this.remove(debouncedSubscription);\n      debouncedSubscription.unsubscribe();\n      this.debouncedSubscription = null;\n    }\n  }\n}\n\nfunction dispatchNext(subscriber: DebounceTimeSubscriber<any>) {\n  subscriber.debouncedNext();\n}\n"],"mappings":"AAEA,SAASA,UAAU,QAAQ,eAAe;AAE1C,SAASC,KAAK,QAAQ,oBAAoB;AAuD1C,OAAM,SAAUC,YAAYA,CAAIC,OAAe,EAAEC,SAAA,GAA2BH,KAAK;EAC/E,OAAQI,MAAqB,IAAKA,MAAM,CAACC,IAAI,CAAC,IAAIC,oBAAoB,CAACJ,OAAO,EAAEC,SAAS,CAAC,CAAC;AAC7F;AAEA,MAAMG,oBAAoB;EACxBC,YAAoBL,OAAe,EAAUC,SAAwB;IAAjD,KAAAD,OAAO,GAAPA,OAAO;IAAkB,KAAAC,SAAS,GAATA,SAAS;EACtD;EAEAK,IAAIA,CAACC,UAAyB,EAAEL,MAAW;IACzC,OAAOA,MAAM,CAACM,SAAS,CAAC,IAAIC,sBAAsB,CAACF,UAAU,EAAE,IAAI,CAACP,OAAO,EAAE,IAAI,CAACC,SAAS,CAAC,CAAC;EAC/F;;AAQF,MAAMQ,sBAA0B,SAAQZ,UAAa;EAKnDQ,YAAYK,WAA0B,EAClBV,OAAe,EACfC,SAAwB;IAC1C,KAAK,CAACS,WAAW,CAAC;IAFA,KAAAV,OAAO,GAAPA,OAAO;IACP,KAAAC,SAAS,GAATA,SAAS;IANrB,KAAAU,qBAAqB,GAAiB,IAAI;IAC1C,KAAAC,SAAS,GAAM,IAAI;IACnB,KAAAC,QAAQ,GAAY,KAAK;EAMjC;EAEUC,KAAKA,CAACC,KAAQ;IACtB,IAAI,CAACC,aAAa,EAAE;IACpB,IAAI,CAACJ,SAAS,GAAGG,KAAK;IACtB,IAAI,CAACF,QAAQ,GAAG,IAAI;IACpB,IAAI,CAACI,GAAG,CAAC,IAAI,CAACN,qBAAqB,GAAG,IAAI,CAACV,SAAS,CAACiB,QAAQ,CAACC,YAAY,EAAE,IAAI,CAACnB,OAAO,EAAE,IAAI,CAAC,CAAC;EAClG;EAEUoB,SAASA,CAAA;IACjB,IAAI,CAACC,aAAa,EAAE;IACpB,IAAI,CAACX,WAAW,CAACY,QAAQ,EAAE;EAC7B;EAEAD,aAAaA,CAAA;IACX,IAAI,CAACL,aAAa,EAAE;IAEpB,IAAI,IAAI,CAACH,QAAQ,EAAE;MACjB,MAAM;QAAED;MAAS,CAAE,GAAG,IAAI;MAM1B,IAAI,CAACA,SAAS,GAAG,IAAI;MACrB,IAAI,CAACC,QAAQ,GAAG,KAAK;MACrB,IAAI,CAACH,WAAW,CAACa,IAAI,CAACX,SAAS,CAAC;;EAEpC;EAEQI,aAAaA,CAAA;IACnB,MAAML,qBAAqB,GAAG,IAAI,CAACA,qBAAqB;IAExD,IAAIA,qBAAqB,KAAK,IAAI,EAAE;MAClC,IAAI,CAACa,MAAM,CAACb,qBAAqB,CAAC;MAClCA,qBAAqB,CAACc,WAAW,EAAE;MACnC,IAAI,CAACd,qBAAqB,GAAG,IAAI;;EAErC;;AAGF,SAASQ,YAAYA,CAACZ,UAAuC;EAC3DA,UAAU,CAACc,aAAa,EAAE;AAC5B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}