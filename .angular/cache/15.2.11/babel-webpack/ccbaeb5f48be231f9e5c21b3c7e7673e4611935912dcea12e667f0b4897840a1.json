{"ast":null,"code":"import { Action } from './Action';\nexport class AsyncAction extends Action {\n  constructor(scheduler, work) {\n    super(scheduler, work);\n    this.scheduler = scheduler;\n    this.work = work;\n    this.pending = false;\n  }\n  schedule(state, delay = 0) {\n    if (this.closed) {\n      return this;\n    }\n    this.state = state;\n    const id = this.id;\n    const scheduler = this.scheduler;\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, delay);\n    }\n    this.pending = true;\n    this.delay = delay;\n    this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n    return this;\n  }\n  requestAsyncId(scheduler, id, delay = 0) {\n    return setInterval(scheduler.flush.bind(scheduler, this), delay);\n  }\n  recycleAsyncId(scheduler, id, delay = 0) {\n    if (delay !== null && this.delay === delay && this.pending === false) {\n      return id;\n    }\n    clearInterval(id);\n    return undefined;\n  }\n  execute(state, delay) {\n    if (this.closed) {\n      return new Error('executing a cancelled action');\n    }\n    this.pending = false;\n    const error = this._execute(state, delay);\n    if (error) {\n      return error;\n    } else if (this.pending === false && this.id != null) {\n      this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n    }\n  }\n  _execute(state, delay) {\n    let errored = false;\n    let errorValue = undefined;\n    try {\n      this.work(state);\n    } catch (e) {\n      errored = true;\n      errorValue = !!e && e || new Error(e);\n    }\n    if (errored) {\n      this.unsubscribe();\n      return errorValue;\n    }\n  }\n  _unsubscribe() {\n    const id = this.id;\n    const scheduler = this.scheduler;\n    const actions = scheduler.actions;\n    const index = actions.indexOf(this);\n    this.work = null;\n    this.state = null;\n    this.pending = false;\n    this.scheduler = null;\n    if (index !== -1) {\n      actions.splice(index, 1);\n    }\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, null);\n    }\n    this.delay = null;\n  }\n}","map":{"version":3,"names":["Action","AsyncAction","constructor","scheduler","work","pending","schedule","state","delay","closed","id","recycleAsyncId","requestAsyncId","setInterval","flush","bind","clearInterval","undefined","execute","Error","error","_execute","errored","errorValue","e","unsubscribe","_unsubscribe","actions","index","indexOf","splice"],"sources":["C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\node_modules\\rxjs\\src\\internal\\scheduler\\AsyncAction.ts"],"sourcesContent":["import { Action } from './Action';\nimport { SchedulerAction } from '../types';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsyncAction<T> extends Action<T> {\n\n  public id: any;\n  public state: T;\n  public delay: number;\n  protected pending: boolean = false;\n\n  constructor(protected scheduler: AsyncScheduler,\n              protected work: (this: SchedulerAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n\n    if (this.closed) {\n      return this;\n    }\n\n    // Always replace the current state with the new state.\n    this.state = state;\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n\n    //\n    // Important implementation note:\n    //\n    // Actions only execute once by default, unless rescheduled from within the\n    // scheduled callback. This allows us to implement single and repeat\n    // actions via the same code path, without adding API surface area, as well\n    // as mimic traditional recursion but across asynchronous boundaries.\n    //\n    // However, JS runtimes and timers distinguish between intervals achieved by\n    // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n    // serial `setTimeout` calls can be individually delayed, which delays\n    // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n    // guarantee the interval callback will be invoked more precisely to the\n    // interval period, regardless of load.\n    //\n    // Therefore, we use `setInterval` to schedule single and repeat actions.\n    // If the action reschedules itself with the same delay, the interval is not\n    // canceled. If the action doesn't reschedule, or reschedules with a\n    // different delay, the interval will be canceled after scheduled callback\n    // execution.\n    //\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, delay);\n    }\n\n    // Set the pending flag indicating that this action has been scheduled, or\n    // has recursively rescheduled itself.\n    this.pending = true;\n\n    this.delay = delay;\n    // If this action has already an async Id, don't request a new one.\n    this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n\n    return this;\n  }\n\n  protected requestAsyncId(scheduler: AsyncScheduler, id?: any, delay: number = 0): any {\n    return setInterval(scheduler.flush.bind(scheduler, this), delay);\n  }\n\n  protected recycleAsyncId(scheduler: AsyncScheduler, id: any, delay: number = 0): any {\n    // If this action is rescheduled with the same delay time, don't clear the interval id.\n    if (delay !== null && this.delay === delay && this.pending === false) {\n      return id;\n    }\n    // Otherwise, if the action's delay time is different from the current delay,\n    // or the action has been rescheduled before it's executed, clear the interval id\n    clearInterval(id);\n    return undefined;\n  }\n\n  /**\n   * Immediately executes this action and the `work` it contains.\n   * @return {any}\n   */\n  public execute(state: T, delay: number): any {\n\n    if (this.closed) {\n      return new Error('executing a cancelled action');\n    }\n\n    this.pending = false;\n    const error = this._execute(state, delay);\n    if (error) {\n      return error;\n    } else if (this.pending === false && this.id != null) {\n      // Dequeue if the action didn't reschedule itself. Don't call\n      // unsubscribe(), because the action could reschedule later.\n      // For example:\n      // ```\n      // scheduler.schedule(function doWork(counter) {\n      //   /* ... I'm a busy worker bee ... */\n      //   var originalAction = this;\n      //   /* wait 100ms before rescheduling the action */\n      //   setTimeout(function () {\n      //     originalAction.schedule(counter + 1);\n      //   }, 100);\n      // }, 1000);\n      // ```\n      this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n    }\n  }\n\n  protected _execute(state: T, delay: number): any {\n    let errored: boolean = false;\n    let errorValue: any = undefined;\n    try {\n      this.work(state);\n    } catch (e) {\n      errored = true;\n      errorValue = !!e && e || new Error(e);\n    }\n    if (errored) {\n      this.unsubscribe();\n      return errorValue;\n    }\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribe() {\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n    const actions = scheduler.actions;\n    const index = actions.indexOf(this);\n\n    this.work  = null;\n    this.state = null;\n    this.pending = false;\n    this.scheduler = null;\n\n    if (index !== -1) {\n      actions.splice(index, 1);\n    }\n\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, null);\n    }\n\n    this.delay = null;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}