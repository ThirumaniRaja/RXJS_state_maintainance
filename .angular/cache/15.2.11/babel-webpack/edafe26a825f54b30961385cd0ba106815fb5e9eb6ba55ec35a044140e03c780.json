{"ast":null,"code":"import { Subject } from '../Subject';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function repeatWhen(notifier) {\n  return source => source.lift(new RepeatWhenOperator(notifier));\n}\nclass RepeatWhenOperator {\n  constructor(notifier) {\n    this.notifier = notifier;\n  }\n  call(subscriber, source) {\n    return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n  }\n}\nclass RepeatWhenSubscriber extends SimpleOuterSubscriber {\n  constructor(destination, notifier, source) {\n    super(destination);\n    this.notifier = notifier;\n    this.source = source;\n    this.sourceIsBeingSubscribedTo = true;\n  }\n  notifyNext() {\n    this.sourceIsBeingSubscribedTo = true;\n    this.source.subscribe(this);\n  }\n  notifyComplete() {\n    if (this.sourceIsBeingSubscribedTo === false) {\n      return super.complete();\n    }\n  }\n  complete() {\n    this.sourceIsBeingSubscribedTo = false;\n    if (!this.isStopped) {\n      if (!this.retries) {\n        this.subscribeToRetries();\n      }\n      if (!this.retriesSubscription || this.retriesSubscription.closed) {\n        return super.complete();\n      }\n      this._unsubscribeAndRecycle();\n      this.notifications.next(undefined);\n    }\n  }\n  _unsubscribe() {\n    const {\n      notifications,\n      retriesSubscription\n    } = this;\n    if (notifications) {\n      notifications.unsubscribe();\n      this.notifications = undefined;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = undefined;\n    }\n    this.retries = undefined;\n  }\n  _unsubscribeAndRecycle() {\n    const {\n      _unsubscribe\n    } = this;\n    this._unsubscribe = null;\n    super._unsubscribeAndRecycle();\n    this._unsubscribe = _unsubscribe;\n    return this;\n  }\n  subscribeToRetries() {\n    this.notifications = new Subject();\n    let retries;\n    try {\n      const {\n        notifier\n      } = this;\n      retries = notifier(this.notifications);\n    } catch (e) {\n      return super.complete();\n    }\n    this.retries = retries;\n    this.retriesSubscription = innerSubscribe(retries, new SimpleInnerSubscriber(this));\n  }\n}","map":{"version":3,"names":["Subject","SimpleOuterSubscriber","innerSubscribe","SimpleInnerSubscriber","repeatWhen","notifier","source","lift","RepeatWhenOperator","constructor","call","subscriber","subscribe","RepeatWhenSubscriber","destination","sourceIsBeingSubscribedTo","notifyNext","notifyComplete","complete","isStopped","retries","subscribeToRetries","retriesSubscription","closed","_unsubscribeAndRecycle","notifications","next","undefined","_unsubscribe","unsubscribe","e"],"sources":["C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\node_modules\\rxjs\\src\\internal\\operators\\repeatWhen.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\n\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * ![](repeatWhen.png)\n *\n * ## Example\n * Repeat a message stream on click\n * ```ts\n * import { of, fromEvent } from 'rxjs';\n * import { repeatWhen } from 'rxjs/operators';\n *\n * const source = of('Repeat message');\n * const documentClick$ = fromEvent(document, 'click');\n *\n * source.pipe(repeatWhen(() => documentClick$)\n * ).subscribe(data => console.log(data))\n * ```\n * @see {@link repeat}\n * @see {@link retry}\n * @see {@link retryWhen}\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nexport function repeatWhen<T>(notifier: (notifications: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RepeatWhenOperator(notifier));\n}\n\nclass RepeatWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (notifications: Observable<any>) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatWhenSubscriber<T, R> extends SimpleOuterSubscriber<T, R> {\n\n  private notifications?: Subject<any>;\n  private retries?: Observable<any>;\n  private retriesSubscription?: Subscription;\n  private sourceIsBeingSubscribedTo: boolean = true;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (notifications: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  notifyNext(): void {\n    this.sourceIsBeingSubscribedTo = true;\n    this.source.subscribe(this);\n  }\n\n  notifyComplete(): void {\n    if (this.sourceIsBeingSubscribedTo === false) {\n      return super.complete();\n    }\n  }\n\n  complete() {\n    this.sourceIsBeingSubscribedTo = false;\n\n    if (!this.isStopped) {\n      if (!this.retries) {\n        this.subscribeToRetries();\n      }\n      if (!this.retriesSubscription || this.retriesSubscription.closed) {\n        return super.complete();\n      }\n\n      this._unsubscribeAndRecycle();\n      this.notifications!.next(undefined);\n    }\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribe() {\n    const { notifications, retriesSubscription } = this;\n    if (notifications) {\n      notifications.unsubscribe();\n      this.notifications = undefined;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = undefined;\n    }\n    this.retries = undefined;\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribeAndRecycle(): Subscriber<T> {\n    const { _unsubscribe } = this;\n\n    this._unsubscribe = null!;\n    super._unsubscribeAndRecycle();\n    this._unsubscribe = _unsubscribe;\n\n    return this;\n  }\n\n  private subscribeToRetries() {\n    this.notifications = new Subject();\n    let retries;\n    try {\n      const { notifier } = this;\n      retries = notifier(this.notifications);\n    } catch (e) {\n      return super.complete();\n    }\n    this.retries = retries;\n    this.retriesSubscription = innerSubscribe(retries, new SimpleInnerSubscriber(this));\n  }\n}\n"],"mappings":"AAGA,SAASA,OAAO,QAAQ,YAAY;AAIpC,SAASC,qBAAqB,EAAEC,cAAc,EAAEC,qBAAqB,QAAQ,mBAAmB;AAgChG,OAAM,SAAUC,UAAUA,CAAIC,QAA6D;EACzF,OAAQC,MAAqB,IAAKA,MAAM,CAACC,IAAI,CAAC,IAAIC,kBAAkB,CAACH,QAAQ,CAAC,CAAC;AACjF;AAEA,MAAMG,kBAAkB;EACtBC,YAAsBJ,QAA6D;IAA7D,KAAAA,QAAQ,GAARA,QAAQ;EAC9B;EAEAK,IAAIA,CAACC,UAAyB,EAAEL,MAAW;IACzC,OAAOA,MAAM,CAACM,SAAS,CAAC,IAAIC,oBAAoB,CAACF,UAAU,EAAE,IAAI,CAACN,QAAQ,EAAEC,MAAM,CAAC,CAAC;EACtF;;AAQF,MAAMO,oBAA2B,SAAQZ,qBAA2B;EAOlEQ,YAAYK,WAA0B,EAClBT,QAA6D,EAC7DC,MAAqB;IACvC,KAAK,CAACQ,WAAW,CAAC;IAFA,KAAAT,QAAQ,GAARA,QAAQ;IACR,KAAAC,MAAM,GAANA,MAAM;IAJlB,KAAAS,yBAAyB,GAAY,IAAI;EAMjD;EAEAC,UAAUA,CAAA;IACR,IAAI,CAACD,yBAAyB,GAAG,IAAI;IACrC,IAAI,CAACT,MAAM,CAACM,SAAS,CAAC,IAAI,CAAC;EAC7B;EAEAK,cAAcA,CAAA;IACZ,IAAI,IAAI,CAACF,yBAAyB,KAAK,KAAK,EAAE;MAC5C,OAAO,KAAK,CAACG,QAAQ,EAAE;;EAE3B;EAEAA,QAAQA,CAAA;IACN,IAAI,CAACH,yBAAyB,GAAG,KAAK;IAEtC,IAAI,CAAC,IAAI,CAACI,SAAS,EAAE;MACnB,IAAI,CAAC,IAAI,CAACC,OAAO,EAAE;QACjB,IAAI,CAACC,kBAAkB,EAAE;;MAE3B,IAAI,CAAC,IAAI,CAACC,mBAAmB,IAAI,IAAI,CAACA,mBAAmB,CAACC,MAAM,EAAE;QAChE,OAAO,KAAK,CAACL,QAAQ,EAAE;;MAGzB,IAAI,CAACM,sBAAsB,EAAE;MAC7B,IAAI,CAACC,aAAc,CAACC,IAAI,CAACC,SAAS,CAAC;;EAEvC;EAGAC,YAAYA,CAAA;IACV,MAAM;MAAEH,aAAa;MAAEH;IAAmB,CAAE,GAAG,IAAI;IACnD,IAAIG,aAAa,EAAE;MACjBA,aAAa,CAACI,WAAW,EAAE;MAC3B,IAAI,CAACJ,aAAa,GAAGE,SAAS;;IAEhC,IAAIL,mBAAmB,EAAE;MACvBA,mBAAmB,CAACO,WAAW,EAAE;MACjC,IAAI,CAACP,mBAAmB,GAAGK,SAAS;;IAEtC,IAAI,CAACP,OAAO,GAAGO,SAAS;EAC1B;EAGAH,sBAAsBA,CAAA;IACpB,MAAM;MAAEI;IAAY,CAAE,GAAG,IAAI;IAE7B,IAAI,CAACA,YAAY,GAAG,IAAK;IACzB,KAAK,CAACJ,sBAAsB,EAAE;IAC9B,IAAI,CAACI,YAAY,GAAGA,YAAY;IAEhC,OAAO,IAAI;EACb;EAEQP,kBAAkBA,CAAA;IACxB,IAAI,CAACI,aAAa,GAAG,IAAIzB,OAAO,EAAE;IAClC,IAAIoB,OAAO;IACX,IAAI;MACF,MAAM;QAAEf;MAAQ,CAAE,GAAG,IAAI;MACzBe,OAAO,GAAGf,QAAQ,CAAC,IAAI,CAACoB,aAAa,CAAC;KACvC,CAAC,OAAOK,CAAC,EAAE;MACV,OAAO,KAAK,CAACZ,QAAQ,EAAE;;IAEzB,IAAI,CAACE,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACE,mBAAmB,GAAGpB,cAAc,CAACkB,OAAO,EAAE,IAAIjB,qBAAqB,CAAC,IAAI,CAAC,CAAC;EACrF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}