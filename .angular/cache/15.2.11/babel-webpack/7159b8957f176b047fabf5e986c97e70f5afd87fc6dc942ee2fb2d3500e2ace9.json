{"ast":null,"code":"import { Subject } from '../Subject';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function window(windowBoundaries) {\n  return function windowOperatorFunction(source) {\n    return source.lift(new WindowOperator(windowBoundaries));\n  };\n}\nclass WindowOperator {\n  constructor(windowBoundaries) {\n    this.windowBoundaries = windowBoundaries;\n  }\n  call(subscriber, source) {\n    const windowSubscriber = new WindowSubscriber(subscriber);\n    const sourceSubscription = source.subscribe(windowSubscriber);\n    if (!sourceSubscription.closed) {\n      windowSubscriber.add(innerSubscribe(this.windowBoundaries, new SimpleInnerSubscriber(windowSubscriber)));\n    }\n    return sourceSubscription;\n  }\n}\nclass WindowSubscriber extends SimpleOuterSubscriber {\n  constructor(destination) {\n    super(destination);\n    this.window = new Subject();\n    destination.next(this.window);\n  }\n  notifyNext() {\n    this.openWindow();\n  }\n  notifyError(error) {\n    this._error(error);\n  }\n  notifyComplete() {\n    this._complete();\n  }\n  _next(value) {\n    this.window.next(value);\n  }\n  _error(err) {\n    this.window.error(err);\n    this.destination.error(err);\n  }\n  _complete() {\n    this.window.complete();\n    this.destination.complete();\n  }\n  _unsubscribe() {\n    this.window = null;\n  }\n  openWindow() {\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n    const destination = this.destination;\n    const newWindow = this.window = new Subject();\n    destination.next(newWindow);\n  }\n}","map":{"version":3,"names":["Subject","SimpleOuterSubscriber","innerSubscribe","SimpleInnerSubscriber","window","windowBoundaries","windowOperatorFunction","source","lift","WindowOperator","constructor","call","subscriber","windowSubscriber","WindowSubscriber","sourceSubscription","subscribe","closed","add","destination","next","notifyNext","openWindow","notifyError","error","_error","notifyComplete","_complete","_next","value","err","complete","_unsubscribe","prevWindow","newWindow"],"sources":["C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\node_modules\\rxjs\\src\\internal\\operators\\window.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { OperatorFunction } from '../types';\nimport { Subject } from '../Subject';\nimport { Subscriber } from '../Subscriber';\nimport { Operator } from '../Operator';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\n\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * ![](window.png)\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * ## Example\n * In every window of 1 second each, emit at most 2 click events\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { window, mergeAll, map, take } from 'rxjs/operators';\n *\n *  const clicks = fromEvent(document, 'click');\n *  const sec = interval(1000);\n *  const result = clicks.pipe(\n *      window(sec),\n *      map(win => win.pipe(take(2))), // each window has at most 2 emissions\n *      mergeAll(),              // flatten the Observable-of-Observables\n *  );\n *  result.subscribe(x => console.log(x));\n * ```\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nexport function window<T>(windowBoundaries: Observable<any>): OperatorFunction<T, Observable<T>> {\n  return function windowOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowOperator(windowBoundaries));\n  };\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowBoundaries: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    const windowSubscriber = new WindowSubscriber(subscriber);\n    const sourceSubscription = source.subscribe(windowSubscriber);\n    if (!sourceSubscription.closed) {\n      windowSubscriber.add(innerSubscribe(this.windowBoundaries, new SimpleInnerSubscriber(windowSubscriber)));\n    }\n    return sourceSubscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends SimpleOuterSubscriber<T, any> {\n\n  private window: Subject<T> = new Subject<T>();\n\n  constructor(destination: Subscriber<Observable<T>>) {\n    super(destination);\n    destination.next(this.window);\n  }\n\n  notifyNext(): void {\n    this.openWindow();\n  }\n\n  notifyError(error: any): void {\n    this._error(error);\n  }\n\n  notifyComplete(): void {\n    this._complete();\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error!(err);\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete!();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribe() {\n    this.window = null!;\n  }\n\n  private openWindow(): void  {\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n    const destination = this.destination;\n    const newWindow = this.window = new Subject<T>();\n    destination.next!(newWindow);\n  }\n}\n"],"mappings":"AAEA,SAASA,OAAO,QAAQ,YAAY;AAGpC,SAASC,qBAAqB,EAAEC,cAAc,EAAEC,qBAAqB,QAAQ,mBAAmB;AA6ChG,OAAM,SAAUC,MAAMA,CAAIC,gBAAiC;EACzD,OAAO,SAASC,sBAAsBA,CAACC,MAAqB;IAC1D,OAAOA,MAAM,CAACC,IAAI,CAAC,IAAIC,cAAc,CAACJ,gBAAgB,CAAC,CAAC;EAC1D,CAAC;AACH;AAEA,MAAMI,cAAc;EAElBC,YAAoBL,gBAAiC;IAAjC,KAAAA,gBAAgB,GAAhBA,gBAAgB;EACpC;EAEAM,IAAIA,CAACC,UAAqC,EAAEL,MAAW;IACrD,MAAMM,gBAAgB,GAAG,IAAIC,gBAAgB,CAACF,UAAU,CAAC;IACzD,MAAMG,kBAAkB,GAAGR,MAAM,CAACS,SAAS,CAACH,gBAAgB,CAAC;IAC7D,IAAI,CAACE,kBAAkB,CAACE,MAAM,EAAE;MAC9BJ,gBAAgB,CAACK,GAAG,CAAChB,cAAc,CAAC,IAAI,CAACG,gBAAgB,EAAE,IAAIF,qBAAqB,CAACU,gBAAgB,CAAC,CAAC,CAAC;;IAE1G,OAAOE,kBAAkB;EAC3B;;AAQF,MAAMD,gBAAoB,SAAQb,qBAA6B;EAI7DS,YAAYS,WAAsC;IAChD,KAAK,CAACA,WAAW,CAAC;IAHZ,KAAAf,MAAM,GAAe,IAAIJ,OAAO,EAAK;IAI3CmB,WAAW,CAACC,IAAI,CAAC,IAAI,CAAChB,MAAM,CAAC;EAC/B;EAEAiB,UAAUA,CAAA;IACR,IAAI,CAACC,UAAU,EAAE;EACnB;EAEAC,WAAWA,CAACC,KAAU;IACpB,IAAI,CAACC,MAAM,CAACD,KAAK,CAAC;EACpB;EAEAE,cAAcA,CAAA;IACZ,IAAI,CAACC,SAAS,EAAE;EAClB;EAEUC,KAAKA,CAACC,KAAQ;IACtB,IAAI,CAACzB,MAAM,CAACgB,IAAI,CAACS,KAAK,CAAC;EACzB;EAEUJ,MAAMA,CAACK,GAAQ;IACvB,IAAI,CAAC1B,MAAM,CAACoB,KAAK,CAACM,GAAG,CAAC;IACtB,IAAI,CAACX,WAAW,CAACK,KAAM,CAACM,GAAG,CAAC;EAC9B;EAEUH,SAASA,CAAA;IACjB,IAAI,CAACvB,MAAM,CAAC2B,QAAQ,EAAE;IACtB,IAAI,CAACZ,WAAW,CAACY,QAAS,EAAE;EAC9B;EAGAC,YAAYA,CAAA;IACV,IAAI,CAAC5B,MAAM,GAAG,IAAK;EACrB;EAEQkB,UAAUA,CAAA;IAChB,MAAMW,UAAU,GAAG,IAAI,CAAC7B,MAAM;IAC9B,IAAI6B,UAAU,EAAE;MACdA,UAAU,CAACF,QAAQ,EAAE;;IAEvB,MAAMZ,WAAW,GAAG,IAAI,CAACA,WAAW;IACpC,MAAMe,SAAS,GAAG,IAAI,CAAC9B,MAAM,GAAG,IAAIJ,OAAO,EAAK;IAChDmB,WAAW,CAACC,IAAK,CAACc,SAAS,CAAC;EAC9B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}