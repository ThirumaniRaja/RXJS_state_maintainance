{"ast":null,"code":"import { Subscriber } from '../Subscriber';\nimport { async } from '../scheduler/async';\nimport { defaultThrottleConfig } from './throttle';\nexport function throttleTime(duration, scheduler = async, config = defaultThrottleConfig) {\n  return source => source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing));\n}\nclass ThrottleTimeOperator {\n  constructor(duration, scheduler, leading, trailing) {\n    this.duration = duration;\n    this.scheduler = scheduler;\n    this.leading = leading;\n    this.trailing = trailing;\n  }\n  call(subscriber, source) {\n    return source.subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing));\n  }\n}\nclass ThrottleTimeSubscriber extends Subscriber {\n  constructor(destination, duration, scheduler, leading, trailing) {\n    super(destination);\n    this.duration = duration;\n    this.scheduler = scheduler;\n    this.leading = leading;\n    this.trailing = trailing;\n    this._hasTrailingValue = false;\n    this._trailingValue = null;\n  }\n  _next(value) {\n    if (this.throttled) {\n      if (this.trailing) {\n        this._trailingValue = value;\n        this._hasTrailingValue = true;\n      }\n    } else {\n      this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, {\n        subscriber: this\n      }));\n      if (this.leading) {\n        this.destination.next(value);\n      } else if (this.trailing) {\n        this._trailingValue = value;\n        this._hasTrailingValue = true;\n      }\n    }\n  }\n  _complete() {\n    if (this._hasTrailingValue) {\n      this.destination.next(this._trailingValue);\n      this.destination.complete();\n    } else {\n      this.destination.complete();\n    }\n  }\n  clearThrottle() {\n    const throttled = this.throttled;\n    if (throttled) {\n      if (this.trailing && this._hasTrailingValue) {\n        this.destination.next(this._trailingValue);\n        this._trailingValue = null;\n        this._hasTrailingValue = false;\n      }\n      throttled.unsubscribe();\n      this.remove(throttled);\n      this.throttled = null;\n    }\n  }\n}\nfunction dispatchNext(arg) {\n  const {\n    subscriber\n  } = arg;\n  subscriber.clearThrottle();\n}","map":{"version":3,"names":["Subscriber","async","defaultThrottleConfig","throttleTime","duration","scheduler","config","source","lift","ThrottleTimeOperator","leading","trailing","constructor","call","subscriber","subscribe","ThrottleTimeSubscriber","destination","_hasTrailingValue","_trailingValue","_next","value","throttled","add","schedule","dispatchNext","next","_complete","complete","clearThrottle","unsubscribe","remove","arg"],"sources":["C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\node_modules\\rxjs\\src\\internal\\operators\\throttleTime.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { ThrottleConfig, defaultThrottleConfig } from './throttle';\nimport { MonoTypeOperatorFunction, SchedulerLike, TeardownLogic } from '../types';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * ![](throttleTime.png)\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link SchedulerLike} for managing timers.\n *\n * ## Examples\n *\n * #### Limit click rate\n *\n * Emit clicks at a rate of at most one click per second\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { throttleTime } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(throttleTime(1000));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * #### Double Click\n *\n * The following example only emits clicks which happen within a subsequent\n * delay of 400ms of the previous click. This for example can emulate a double\n * click. It makes use of the `trailing` parameter of the throttle configuration.\n *\n * ```ts\n * import { fromEvent, asyncScheduler } from 'rxjs';\n * import { throttleTime, withLatestFrom } from 'rxjs/operators';\n *\n * // defaultThottleConfig = { leading: true, trailing: false }\n * const throttleConfig = {\n *   leading: false,\n *   trailing: true\n * }\n *\n * const click = fromEvent(document, 'click');\n * const doubleClick = click.pipe(\n *   throttleTime(400, asyncScheduler, throttleConfig)\n * );\n *\n * doubleClick.subscribe((throttleValue: Event) => {\n *   console.log(`Double-clicked! Timestamp: ${throttleValue.timeStamp}`);\n * });\n * ```\n *\n * If you enable the `leading` parameter in this example, the output would be the primary click and\n * the double click, but restricts additional clicks within 400ms.\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for\n * managing the timers that handle the throttling.\n * @param {Object} config a configuration object to define `leading` and\n * `trailing` behavior. Defaults to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nexport function throttleTime<T>(duration: number,\n                                scheduler: SchedulerLike = async,\n                                config: ThrottleConfig = defaultThrottleConfig): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing));\n}\n\nclass ThrottleTimeOperator<T> implements Operator<T, T> {\n  constructor(private duration: number,\n              private scheduler: SchedulerLike,\n              private leading: boolean,\n              private trailing: boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(\n      new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing)\n    );\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleTimeSubscriber<T> extends Subscriber<T> {\n  private throttled: Subscription;\n  private _hasTrailingValue: boolean = false;\n  private _trailingValue: T = null;\n\n  constructor(destination: Subscriber<T>,\n              private duration: number,\n              private scheduler: SchedulerLike,\n              private leading: boolean,\n              private trailing: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    if (this.throttled) {\n      if (this.trailing) {\n        this._trailingValue = value;\n        this._hasTrailingValue = true;\n      }\n    } else {\n      this.add(this.throttled = this.scheduler.schedule<DispatchArg<T>>(dispatchNext, this.duration, { subscriber: this }));\n      if (this.leading) {\n        this.destination.next(value);\n      } else if (this.trailing) {\n        this._trailingValue = value;\n        this._hasTrailingValue = true;\n      }\n    }\n  }\n\n  protected _complete() {\n    if (this._hasTrailingValue) {\n      this.destination.next(this._trailingValue);\n      this.destination.complete();\n    } else {\n      this.destination.complete();\n    }\n  }\n\n  clearThrottle() {\n    const throttled = this.throttled;\n    if (throttled) {\n      if (this.trailing && this._hasTrailingValue) {\n        this.destination.next(this._trailingValue);\n        this._trailingValue = null;\n        this._hasTrailingValue = false;\n      }\n      throttled.unsubscribe();\n      this.remove(throttled);\n      this.throttled = null;\n    }\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: ThrottleTimeSubscriber<T>;\n}\n\nfunction dispatchNext<T>(arg: DispatchArg<T>) {\n  const { subscriber } = arg;\n  subscriber.clearThrottle();\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}