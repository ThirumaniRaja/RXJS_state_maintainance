{"ast":null,"code":"import { Subscriber } from '../Subscriber';\nexport function dematerialize() {\n  return function dematerializeOperatorFunction(source) {\n    return source.lift(new DeMaterializeOperator());\n  };\n}\nclass DeMaterializeOperator {\n  call(subscriber, source) {\n    return source.subscribe(new DeMaterializeSubscriber(subscriber));\n  }\n}\nclass DeMaterializeSubscriber extends Subscriber {\n  constructor(destination) {\n    super(destination);\n  }\n  _next(value) {\n    value.observe(this.destination);\n  }\n}","map":{"version":3,"names":["Subscriber","dematerialize","dematerializeOperatorFunction","source","lift","DeMaterializeOperator","call","subscriber","subscribe","DeMaterializeSubscriber","constructor","destination","_next","value","observe"],"sources":["C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\node_modules\\rxjs\\src\\internal\\operators\\dematerialize.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { OperatorFunction } from '../types';\n\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * ![](dematerialize.png)\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * ## Example\n * Convert an Observable of Notifications to an actual Observable\n * ```ts\n * import { of, Notification } from 'rxjs';\n * import { dematerialize } from 'rxjs/operators';\n *\n * const notifA = new Notification('N', 'A');\n * const notifB = new Notification('N', 'B');\n * const notifE = new Notification('E', undefined,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * const materialized = of(notifA, notifB, notifE);\n * const upperCase = materialized.pipe(dematerialize());\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Results in:\n * // A\n * // B\n * // TypeError: x.toUpperCase is not a function\n * ```\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nexport function dematerialize<T>(): OperatorFunction<Notification<T>, T> {\n  return function dematerializeOperatorFunction(source: Observable<Notification<T>>) {\n    return source.lift(new DeMaterializeOperator());\n  };\n}\n\nclass DeMaterializeOperator<T extends Notification<any>, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<any>, source: any): any {\n    return source.subscribe(new DeMaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DeMaterializeSubscriber<T extends Notification<any>> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    value.observe(this.destination);\n  }\n}\n"],"mappings":"AAEA,SAASA,UAAU,QAAQ,eAAe;AAkD1C,OAAM,SAAUC,aAAaA,CAAA;EAC3B,OAAO,SAASC,6BAA6BA,CAACC,MAAmC;IAC/E,OAAOA,MAAM,CAACC,IAAI,CAAC,IAAIC,qBAAqB,EAAE,CAAC;EACjD,CAAC;AACH;AAEA,MAAMA,qBAAqB;EACzBC,IAAIA,CAACC,UAA2B,EAAEJ,MAAW;IAC3C,OAAOA,MAAM,CAACK,SAAS,CAAC,IAAIC,uBAAuB,CAACF,UAAU,CAAC,CAAC;EAClE;;AAQF,MAAME,uBAAqD,SAAQT,UAAa;EAC9EU,YAAYC,WAA4B;IACtC,KAAK,CAACA,WAAW,CAAC;EACpB;EAEUC,KAAKA,CAACC,KAAQ;IACtBA,KAAK,CAACC,OAAO,CAAC,IAAI,CAACH,WAAW,CAAC;EACjC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}