{"ast":null,"code":"import { Subscriber } from '../Subscriber';\nexport function ignoreElements() {\n  return function ignoreElementsOperatorFunction(source) {\n    return source.lift(new IgnoreElementsOperator());\n  };\n}\nclass IgnoreElementsOperator {\n  call(subscriber, source) {\n    return source.subscribe(new IgnoreElementsSubscriber(subscriber));\n  }\n}\nclass IgnoreElementsSubscriber extends Subscriber {\n  _next(unused) {}\n}","map":{"version":3,"names":["Subscriber","ignoreElements","ignoreElementsOperatorFunction","source","lift","IgnoreElementsOperator","call","subscriber","subscribe","IgnoreElementsSubscriber","_next","unused"],"sources":["C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\node_modules\\rxjs\\src\\internal\\operators\\ignoreElements.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../types';\n\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * ![](ignoreElements.png)\n *\n * ## Examples\n * ### Ignores emitted values, reacts to observable's completion.\n * ```ts\n * import { of } from 'rxjs';\n * import { ignoreElements } from 'rxjs/operators';\n *\n * of('you', 'talking', 'to', 'me').pipe(\n *   ignoreElements(),\n * )\n * .subscribe(\n *   word => console.log(word),\n *   err => console.log('error:', err),\n *   () => console.log('the end'),\n * );\n * // result:\n * // 'the end'\n * ```\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nexport function ignoreElements(): OperatorFunction<any, never> {\n  return function ignoreElementsOperatorFunction(source: Observable<any>) {\n    return source.lift(new IgnoreElementsOperator());\n  };\n}\n\nclass IgnoreElementsOperator<T, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new IgnoreElementsSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IgnoreElementsSubscriber<T> extends Subscriber<T> {\n  protected _next(unused: T): void {\n    // Do nothing\n  }\n}\n"],"mappings":"AAEA,SAASA,UAAU,QAAQ,eAAe;AA8B1C,OAAM,SAAUC,cAAcA,CAAA;EAC5B,OAAO,SAASC,8BAA8BA,CAACC,MAAuB;IACpE,OAAOA,MAAM,CAACC,IAAI,CAAC,IAAIC,sBAAsB,EAAE,CAAC;EAClD,CAAC;AACH;AAEA,MAAMA,sBAAsB;EAC1BC,IAAIA,CAACC,UAAyB,EAAEJ,MAAW;IACzC,OAAOA,MAAM,CAACK,SAAS,CAAC,IAAIC,wBAAwB,CAACF,UAAU,CAAC,CAAC;EACnE;;AAQF,MAAME,wBAA4B,SAAQT,UAAa;EAC3CU,KAAKA,CAACC,MAAS,GAEzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}