{"ast":null,"code":"import { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nexport function materialize() {\n  return function materializeOperatorFunction(source) {\n    return source.lift(new MaterializeOperator());\n  };\n}\nclass MaterializeOperator {\n  call(subscriber, source) {\n    return source.subscribe(new MaterializeSubscriber(subscriber));\n  }\n}\nclass MaterializeSubscriber extends Subscriber {\n  constructor(destination) {\n    super(destination);\n  }\n  _next(value) {\n    this.destination.next(Notification.createNext(value));\n  }\n  _error(err) {\n    const destination = this.destination;\n    destination.next(Notification.createError(err));\n    destination.complete();\n  }\n  _complete() {\n    const destination = this.destination;\n    destination.next(Notification.createComplete());\n    destination.complete();\n  }\n}","map":{"version":3,"names":["Subscriber","Notification","materialize","materializeOperatorFunction","source","lift","MaterializeOperator","call","subscriber","subscribe","MaterializeSubscriber","constructor","destination","_next","value","next","createNext","_error","err","createError","complete","_complete","createComplete"],"sources":["C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\node_modules\\rxjs\\src\\internal\\operators\\materialize.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { OperatorFunction } from '../types';\n\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * ![](materialize.png)\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * ## Example\n * Convert a faulty Observable to an Observable of Notifications\n * ```ts\n * import { of } from 'rxjs';\n * import { materialize, map } from 'rxjs/operators';\n *\n * const letters = of('a', 'b', 13, 'd');\n * const upperCase = letters.pipe(map(x => x.toUpperCase()));\n * const materialized = upperCase.pipe(materialize());\n * materialized.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\n * //   [as project] (http://1â€¦, hasValue: false}\n * ```\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nexport function materialize<T>(): OperatorFunction<T, Notification<T>> {\n  return function materializeOperatorFunction(source: Observable<T>) {\n    return source.lift(new MaterializeOperator());\n  };\n}\n\nclass MaterializeOperator<T> implements Operator<T, Notification<T>> {\n  call(subscriber: Subscriber<Notification<T>>, source: any): any {\n    return source.subscribe(new MaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MaterializeSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<Notification<T>>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.destination.next(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    const destination = this.destination;\n    destination.next(Notification.createError(err));\n    destination.complete();\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    destination.next(Notification.createComplete());\n    destination.complete();\n  }\n}\n"],"mappings":"AAEA,SAASA,UAAU,QAAQ,eAAe;AAC1C,SAASC,YAAY,QAAQ,iBAAiB;AAqD9C,OAAM,SAAUC,WAAWA,CAAA;EACzB,OAAO,SAASC,2BAA2BA,CAACC,MAAqB;IAC/D,OAAOA,MAAM,CAACC,IAAI,CAAC,IAAIC,mBAAmB,EAAE,CAAC;EAC/C,CAAC;AACH;AAEA,MAAMA,mBAAmB;EACvBC,IAAIA,CAACC,UAAuC,EAAEJ,MAAW;IACvD,OAAOA,MAAM,CAACK,SAAS,CAAC,IAAIC,qBAAqB,CAACF,UAAU,CAAC,CAAC;EAChE;;AAQF,MAAME,qBAAyB,SAAQV,UAAa;EAClDW,YAAYC,WAAwC;IAClD,KAAK,CAACA,WAAW,CAAC;EACpB;EAEUC,KAAKA,CAACC,KAAQ;IACtB,IAAI,CAACF,WAAW,CAACG,IAAI,CAACd,YAAY,CAACe,UAAU,CAACF,KAAK,CAAC,CAAC;EACvD;EAEUG,MAAMA,CAACC,GAAQ;IACvB,MAAMN,WAAW,GAAG,IAAI,CAACA,WAAW;IACpCA,WAAW,CAACG,IAAI,CAACd,YAAY,CAACkB,WAAW,CAACD,GAAG,CAAC,CAAC;IAC/CN,WAAW,CAACQ,QAAQ,EAAE;EACxB;EAEUC,SAASA,CAAA;IACjB,MAAMT,WAAW,GAAG,IAAI,CAACA,WAAW;IACpCA,WAAW,CAACG,IAAI,CAACd,YAAY,CAACqB,cAAc,EAAE,CAAC;IAC/CV,WAAW,CAACQ,QAAQ,EAAE;EACxB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}