{"ast":null,"code":"import { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\nexport class SubjectSubscriber extends Subscriber {\n  constructor(destination) {\n    super(destination);\n    this.destination = destination;\n  }\n}\nexport let Subject = /*#__PURE__*/(() => {\n  class Subject extends Observable {\n    constructor() {\n      super();\n      this.observers = [];\n      this.closed = false;\n      this.isStopped = false;\n      this.hasError = false;\n      this.thrownError = null;\n    }\n    [rxSubscriberSymbol]() {\n      return new SubjectSubscriber(this);\n    }\n    lift(operator) {\n      const subject = new AnonymousSubject(this, this);\n      subject.operator = operator;\n      return subject;\n    }\n    next(value) {\n      if (this.closed) {\n        throw new ObjectUnsubscribedError();\n      }\n      if (!this.isStopped) {\n        const {\n          observers\n        } = this;\n        const len = observers.length;\n        const copy = observers.slice();\n        for (let i = 0; i < len; i++) {\n          copy[i].next(value);\n        }\n      }\n    }\n    error(err) {\n      if (this.closed) {\n        throw new ObjectUnsubscribedError();\n      }\n      this.hasError = true;\n      this.thrownError = err;\n      this.isStopped = true;\n      const {\n        observers\n      } = this;\n      const len = observers.length;\n      const copy = observers.slice();\n      for (let i = 0; i < len; i++) {\n        copy[i].error(err);\n      }\n      this.observers.length = 0;\n    }\n    complete() {\n      if (this.closed) {\n        throw new ObjectUnsubscribedError();\n      }\n      this.isStopped = true;\n      const {\n        observers\n      } = this;\n      const len = observers.length;\n      const copy = observers.slice();\n      for (let i = 0; i < len; i++) {\n        copy[i].complete();\n      }\n      this.observers.length = 0;\n    }\n    unsubscribe() {\n      this.isStopped = true;\n      this.closed = true;\n      this.observers = null;\n    }\n    _trySubscribe(subscriber) {\n      if (this.closed) {\n        throw new ObjectUnsubscribedError();\n      } else {\n        return super._trySubscribe(subscriber);\n      }\n    }\n    _subscribe(subscriber) {\n      if (this.closed) {\n        throw new ObjectUnsubscribedError();\n      } else if (this.hasError) {\n        subscriber.error(this.thrownError);\n        return Subscription.EMPTY;\n      } else if (this.isStopped) {\n        subscriber.complete();\n        return Subscription.EMPTY;\n      } else {\n        this.observers.push(subscriber);\n        return new SubjectSubscription(this, subscriber);\n      }\n    }\n    asObservable() {\n      const observable = new Observable();\n      observable.source = this;\n      return observable;\n    }\n  }\n  Subject.create = (destination, source) => {\n    return new AnonymousSubject(destination, source);\n  };\n  return Subject;\n})();\nexport class AnonymousSubject extends Subject {\n  constructor(destination, source) {\n    super();\n    this.destination = destination;\n    this.source = source;\n  }\n  next(value) {\n    const {\n      destination\n    } = this;\n    if (destination && destination.next) {\n      destination.next(value);\n    }\n  }\n  error(err) {\n    const {\n      destination\n    } = this;\n    if (destination && destination.error) {\n      this.destination.error(err);\n    }\n  }\n  complete() {\n    const {\n      destination\n    } = this;\n    if (destination && destination.complete) {\n      this.destination.complete();\n    }\n  }\n  _subscribe(subscriber) {\n    const {\n      source\n    } = this;\n    if (source) {\n      return this.source.subscribe(subscriber);\n    } else {\n      return Subscription.EMPTY;\n    }\n  }\n}","map":{"version":3,"names":["Observable","Subscriber","Subscription","ObjectUnsubscribedError","SubjectSubscription","rxSubscriber","rxSubscriberSymbol","SubjectSubscriber","constructor","destination","Subject","observers","closed","isStopped","hasError","thrownError","lift","operator","subject","AnonymousSubject","next","value","len","length","copy","slice","i","error","err","complete","unsubscribe","_trySubscribe","subscriber","_subscribe","EMPTY","push","asObservable","observable","source","create","subscribe"],"sources":["C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\node_modules\\rxjs\\src\\internal\\Subject.ts"],"sourcesContent":["import { Operator } from './Operator';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { Observer, SubscriptionLike, TeardownLogic } from './types';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\n\n/**\n * @class SubjectSubscriber<T>\n */\nexport class SubjectSubscriber<T> extends Subscriber<T> {\n  constructor(protected destination: Subject<T>) {\n    super(destination);\n  }\n}\n\n/**\n * A Subject is a special type of Observable that allows values to be\n * multicasted to many Observers. Subjects are like EventEmitters.\n *\n * Every Subject is an Observable and an Observer. You can subscribe to a\n * Subject, and you can call next to feed values as well as error and complete.\n *\n * @class Subject<T>\n */\nexport class Subject<T> extends Observable<T> implements SubscriptionLike {\n\n  [rxSubscriberSymbol]() {\n    return new SubjectSubscriber(this);\n  }\n\n  observers: Observer<T>[] = [];\n\n  closed = false;\n\n  isStopped = false;\n\n  hasError = false;\n\n  thrownError: any = null;\n\n  constructor() {\n    super();\n  }\n\n  /**@nocollapse\n   * @deprecated use new Subject() instead\n  */\n  static create: Function = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  }\n\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = <any>operator;\n    return <any>subject;\n  }\n\n  next(value?: T) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    if (!this.isStopped) {\n      const { observers } = this;\n      const len = observers.length;\n      const copy = observers.slice();\n      for (let i = 0; i < len; i++) {\n        copy[i].next(value);\n      }\n    }\n  }\n\n  error(err: any) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.hasError = true;\n    this.thrownError = err;\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].error(err);\n    }\n    this.observers.length = 0;\n  }\n\n  complete() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].complete();\n    }\n    this.observers.length = 0;\n  }\n\n  unsubscribe() {\n    this.isStopped = true;\n    this.closed = true;\n    this.observers = null;\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _trySubscribe(subscriber: Subscriber<T>): TeardownLogic {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return super._trySubscribe(subscriber);\n    }\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>): Subscription {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      return new SubjectSubscription(this, subscriber);\n    }\n  }\n\n  /**\n   * Creates a new Observable with this Subject as the source. You can do this\n   * to create customize Observer-side logic of the Subject and conceal it from\n   * code that uses the Observable.\n   * @return {Observable} Observable that the Subject casts to\n   */\n  asObservable(): Observable<T> {\n    const observable = new Observable<T>();\n    (<any>observable).source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(protected destination?: Observer<T>, source?: Observable<T>) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    const { destination } = this;\n    if (destination && destination.next) {\n      destination.next(value);\n    }\n  }\n\n  error(err: any) {\n    const { destination } = this;\n    if (destination && destination.error) {\n      this.destination.error(err);\n    }\n  }\n\n  complete() {\n    const { destination } = this;\n    if (destination && destination.complete) {\n      this.destination.complete();\n    }\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return this.source.subscribe(subscriber);\n    } else {\n      return Subscription.EMPTY;\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}