{"ast":null,"code":"import { empty } from './observable/empty';\nimport { of } from './observable/of';\nimport { throwError } from './observable/throwError';\nexport var NotificationKind = /*#__PURE__*/(() => {\n  (function (NotificationKind) {\n    NotificationKind[\"NEXT\"] = \"N\";\n    NotificationKind[\"ERROR\"] = \"E\";\n    NotificationKind[\"COMPLETE\"] = \"C\";\n  })(NotificationKind || (NotificationKind = {}));\n  return NotificationKind;\n})();\nexport class Notification {\n  constructor(kind, value, error) {\n    this.kind = kind;\n    this.value = value;\n    this.error = error;\n    this.hasValue = kind === 'N';\n  }\n  observe(observer) {\n    switch (this.kind) {\n      case 'N':\n        return observer.next && observer.next(this.value);\n      case 'E':\n        return observer.error && observer.error(this.error);\n      case 'C':\n        return observer.complete && observer.complete();\n    }\n  }\n  do(next, error, complete) {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return next && next(this.value);\n      case 'E':\n        return error && error(this.error);\n      case 'C':\n        return complete && complete();\n    }\n  }\n  accept(nextOrObserver, error, complete) {\n    if (nextOrObserver && typeof nextOrObserver.next === 'function') {\n      return this.observe(nextOrObserver);\n    } else {\n      return this.do(nextOrObserver, error, complete);\n    }\n  }\n  toObservable() {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return of(this.value);\n      case 'E':\n        return throwError(this.error);\n      case 'C':\n        return empty();\n    }\n    throw new Error('unexpected notification kind value');\n  }\n  static createNext(value) {\n    if (typeof value !== 'undefined') {\n      return new Notification('N', value);\n    }\n    return Notification.undefinedValueNotification;\n  }\n  static createError(err) {\n    return new Notification('E', undefined, err);\n  }\n  static createComplete() {\n    return Notification.completeNotification;\n  }\n}\nNotification.completeNotification = new Notification('C');\nNotification.undefinedValueNotification = new Notification('N', undefined);","map":{"version":3,"names":["empty","of","throwError","NotificationKind","Notification","constructor","kind","value","error","hasValue","observe","observer","next","complete","do","accept","nextOrObserver","toObservable","Error","createNext","undefinedValueNotification","createError","err","undefined","createComplete","completeNotification"],"sources":["C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\node_modules\\rxjs\\src\\internal\\Notification.ts"],"sourcesContent":["import { PartialObserver } from './types';\nimport { Observable } from './Observable';\nimport { empty } from './observable/empty';\nimport { of } from './observable/of';\nimport { throwError } from './observable/throwError';\nimport { deprecate } from 'util';\n\n// TODO: When this enum is removed, replace it with a type alias. See #4556.\n/**\n * @deprecated NotificationKind is deprecated as const enums are not compatible with isolated modules. Use a string literal instead.\n */\nexport enum NotificationKind {\n  NEXT = 'N',\n  ERROR = 'E',\n  COMPLETE = 'C',\n}\n\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nexport class Notification<T> {\n  hasValue: boolean;\n\n  constructor(public kind: 'N' | 'E' | 'C', public value?: T, public error?: any) {\n    this.hasValue = kind === 'N';\n  }\n\n  /**\n   * Delivers to the given `observer` the value wrapped by this Notification.\n   * @param {Observer} observer\n   * @return\n   */\n  observe(observer: PartialObserver<T>): any {\n    switch (this.kind) {\n      case 'N':\n        return observer.next && observer.next(this.value);\n      case 'E':\n        return observer.error && observer.error(this.error);\n      case 'C':\n        return observer.complete && observer.complete();\n    }\n  }\n\n  /**\n   * Given some {@link Observer} callbacks, deliver the value represented by the\n   * current Notification to the correctly corresponding callback.\n   * @param {function(value: T): void} next An Observer `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  do(next: (value: T) => void, error?: (err: any) => void, complete?: () => void): any {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return next && next(this.value);\n      case 'E':\n        return error && error(this.error);\n      case 'C':\n        return complete && complete();\n    }\n  }\n\n  /**\n   * Takes an Observer or its individual callback functions, and calls `observe`\n   * or `do` methods accordingly.\n   * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n   * the `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  accept(nextOrObserver: PartialObserver<T> | ((value: T) => void), error?: (err: any) => void, complete?: () => void) {\n    if (nextOrObserver && typeof (<PartialObserver<T>>nextOrObserver).next === 'function') {\n      return this.observe(<PartialObserver<T>>nextOrObserver);\n    } else {\n      return this.do(<(value: T) => void>nextOrObserver, error, complete);\n    }\n  }\n\n  /**\n   * Returns a simple Observable that just delivers the notification represented\n   * by this Notification instance.\n   * @return {any}\n   */\n  toObservable(): Observable<T> {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return of(this.value);\n      case 'E':\n        return throwError(this.error);\n      case 'C':\n        return empty();\n    }\n    throw new Error('unexpected notification kind value');\n  }\n\n  private static completeNotification: Notification<any> = new Notification('C');\n  private static undefinedValueNotification: Notification<any> = new Notification('N', undefined);\n\n  /**\n   * A shortcut to create a Notification instance of the type `next` from a\n   * given value.\n   * @param {T} value The `next` value.\n   * @return {Notification<T>} The \"next\" Notification representing the\n   * argument.\n   * @nocollapse\n   */\n  static createNext<T>(value: T): Notification<T> {\n    if (typeof value !== 'undefined') {\n      return new Notification('N', value);\n    }\n    return Notification.undefinedValueNotification;\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `error` from a\n   * given error.\n   * @param {any} [err] The `error` error.\n   * @return {Notification<T>} The \"error\" Notification representing the\n   * argument.\n   * @nocollapse\n   */\n  static createError<T>(err?: any): Notification<T> {\n    return new Notification('E', undefined, err);\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `complete`.\n   * @return {Notification<any>} The valueless \"complete\" Notification.\n   * @nocollapse\n   */\n  static createComplete(): Notification<any> {\n    return Notification.completeNotification;\n  }\n}\n"],"mappings":"AAEA,SAASA,KAAK,QAAQ,oBAAoB;AAC1C,SAASC,EAAE,QAAQ,iBAAiB;AACpC,SAASC,UAAU,QAAQ,yBAAyB;AAOpD,WAAYC,gBAIX;EAJD,WAAYA,gBAAgB;IAC1BA,gBAAA,cAAU;IACVA,gBAAA,eAAW;IACXA,gBAAA,kBAAc;EAChB,CAAC,EAJWA,gBAAgB,KAAhBA,gBAAgB;EAAA,OAAhBA,gBAIX;AAAA;AAgBD,OAAM,MAAOC,YAAY;EAGvBC,YAAmBC,IAAqB,EAASC,KAAS,EAASC,KAAW;IAA3D,KAAAF,IAAI,GAAJA,IAAI;IAA0B,KAAAC,KAAK,GAALA,KAAK;IAAa,KAAAC,KAAK,GAALA,KAAK;IACtE,IAAI,CAACC,QAAQ,GAAGH,IAAI,KAAK,GAAG;EAC9B;EAOAI,OAAOA,CAACC,QAA4B;IAClC,QAAQ,IAAI,CAACL,IAAI;MACf,KAAK,GAAG;QACN,OAAOK,QAAQ,CAACC,IAAI,IAAID,QAAQ,CAACC,IAAI,CAAC,IAAI,CAACL,KAAK,CAAC;MACnD,KAAK,GAAG;QACN,OAAOI,QAAQ,CAACH,KAAK,IAAIG,QAAQ,CAACH,KAAK,CAAC,IAAI,CAACA,KAAK,CAAC;MACrD,KAAK,GAAG;QACN,OAAOG,QAAQ,CAACE,QAAQ,IAAIF,QAAQ,CAACE,QAAQ,EAAE;;EAErD;EAUAC,EAAEA,CAACF,IAAwB,EAAEJ,KAA0B,EAAEK,QAAqB;IAC5E,MAAMP,IAAI,GAAG,IAAI,CAACA,IAAI;IACtB,QAAQA,IAAI;MACV,KAAK,GAAG;QACN,OAAOM,IAAI,IAAIA,IAAI,CAAC,IAAI,CAACL,KAAK,CAAC;MACjC,KAAK,GAAG;QACN,OAAOC,KAAK,IAAIA,KAAK,CAAC,IAAI,CAACA,KAAK,CAAC;MACnC,KAAK,GAAG;QACN,OAAOK,QAAQ,IAAIA,QAAQ,EAAE;;EAEnC;EAWAE,MAAMA,CAACC,cAAyD,EAAER,KAA0B,EAAEK,QAAqB;IACjH,IAAIG,cAAc,IAAI,OAA4BA,cAAe,CAACJ,IAAI,KAAK,UAAU,EAAE;MACrF,OAAO,IAAI,CAACF,OAAO,CAAqBM,cAAc,CAAC;KACxD,MAAM;MACL,OAAO,IAAI,CAACF,EAAE,CAAqBE,cAAc,EAAER,KAAK,EAAEK,QAAQ,CAAC;;EAEvE;EAOAI,YAAYA,CAAA;IACV,MAAMX,IAAI,GAAG,IAAI,CAACA,IAAI;IACtB,QAAQA,IAAI;MACV,KAAK,GAAG;QACN,OAAOL,EAAE,CAAC,IAAI,CAACM,KAAK,CAAC;MACvB,KAAK,GAAG;QACN,OAAOL,UAAU,CAAC,IAAI,CAACM,KAAK,CAAC;MAC/B,KAAK,GAAG;QACN,OAAOR,KAAK,EAAE;;IAElB,MAAM,IAAIkB,KAAK,CAAC,oCAAoC,CAAC;EACvD;EAaA,OAAOC,UAAUA,CAAIZ,KAAQ;IAC3B,IAAI,OAAOA,KAAK,KAAK,WAAW,EAAE;MAChC,OAAO,IAAIH,YAAY,CAAC,GAAG,EAAEG,KAAK,CAAC;;IAErC,OAAOH,YAAY,CAACgB,0BAA0B;EAChD;EAUA,OAAOC,WAAWA,CAAIC,GAAS;IAC7B,OAAO,IAAIlB,YAAY,CAAC,GAAG,EAAEmB,SAAS,EAAED,GAAG,CAAC;EAC9C;EAOA,OAAOE,cAAcA,CAAA;IACnB,OAAOpB,YAAY,CAACqB,oBAAoB;EAC1C;;AArCerB,YAAA,CAAAqB,oBAAoB,GAAsB,IAAIrB,YAAY,CAAC,GAAG,CAAC;AAC/DA,YAAA,CAAAgB,0BAA0B,GAAsB,IAAIhB,YAAY,CAAC,GAAG,EAAEmB,SAAS,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}