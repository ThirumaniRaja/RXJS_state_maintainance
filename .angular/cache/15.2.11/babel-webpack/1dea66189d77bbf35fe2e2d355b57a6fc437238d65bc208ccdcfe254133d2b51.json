{"ast":null,"code":"import { Subscriber } from './Subscriber';\nimport { Observable } from './Observable';\nimport { subscribeTo } from './util/subscribeTo';\nexport class SimpleInnerSubscriber extends Subscriber {\n  constructor(parent) {\n    super();\n    this.parent = parent;\n  }\n  _next(value) {\n    this.parent.notifyNext(value);\n  }\n  _error(error) {\n    this.parent.notifyError(error);\n    this.unsubscribe();\n  }\n  _complete() {\n    this.parent.notifyComplete();\n    this.unsubscribe();\n  }\n}\nexport class ComplexInnerSubscriber extends Subscriber {\n  constructor(parent, outerValue, outerIndex) {\n    super();\n    this.parent = parent;\n    this.outerValue = outerValue;\n    this.outerIndex = outerIndex;\n  }\n  _next(value) {\n    this.parent.notifyNext(this.outerValue, value, this.outerIndex, this);\n  }\n  _error(error) {\n    this.parent.notifyError(error);\n    this.unsubscribe();\n  }\n  _complete() {\n    this.parent.notifyComplete(this);\n    this.unsubscribe();\n  }\n}\nexport class SimpleOuterSubscriber extends Subscriber {\n  notifyNext(innerValue) {\n    this.destination.next(innerValue);\n  }\n  notifyError(err) {\n    this.destination.error(err);\n  }\n  notifyComplete() {\n    this.destination.complete();\n  }\n}\nexport class ComplexOuterSubscriber extends Subscriber {\n  notifyNext(_outerValue, innerValue, _outerIndex, _innerSub) {\n    this.destination.next(innerValue);\n  }\n  notifyError(error) {\n    this.destination.error(error);\n  }\n  notifyComplete(_innerSub) {\n    this.destination.complete();\n  }\n}\nexport function innerSubscribe(result, innerSubscriber) {\n  if (innerSubscriber.closed) {\n    return undefined;\n  }\n  if (result instanceof Observable) {\n    return result.subscribe(innerSubscriber);\n  }\n  let subscription;\n  try {\n    subscription = subscribeTo(result)(innerSubscriber);\n  } catch (error) {\n    innerSubscriber.error(error);\n  }\n  return subscription;\n}","map":{"version":3,"names":["Subscriber","Observable","subscribeTo","SimpleInnerSubscriber","constructor","parent","_next","value","notifyNext","_error","error","notifyError","unsubscribe","_complete","notifyComplete","ComplexInnerSubscriber","outerValue","outerIndex","SimpleOuterSubscriber","innerValue","destination","next","err","complete","ComplexOuterSubscriber","_outerValue","_outerIndex","_innerSub","innerSubscribe","result","innerSubscriber","closed","undefined","subscribe","subscription"],"sources":["C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\node_modules\\rxjs\\src\\internal\\innerSubscribe.ts"],"sourcesContent":["/** @prettier */\nimport { Subscription } from './Subscription';\nimport { Subscriber } from './Subscriber';\nimport { Observable } from './Observable';\nimport { subscribeTo } from './util/subscribeTo';\n\ninterface SimpleOuterSubscriberLike<T> {\n  /**\n   * A handler for inner next notifications from the inner subscription\n   * @param innerValue the value nexted by the inner producer\n   */\n  notifyNext(innerValue: T): void;\n  /**\n   * A handler for inner error notifications from the inner subscription\n   * @param err the error from the inner producer\n   */\n  notifyError(err: any): void;\n  /**\n   * A handler for inner complete notifications from the inner subscription.\n   */\n  notifyComplete(): void;\n}\n\nexport class SimpleInnerSubscriber<T> extends Subscriber<T> {\n  constructor(private parent: SimpleOuterSubscriberLike<any>) {\n    super();\n  }\n\n  protected _next(value: T): void {\n    this.parent.notifyNext(value);\n  }\n\n  protected _error(error: any): void {\n    this.parent.notifyError(error);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.parent.notifyComplete();\n    this.unsubscribe();\n  }\n}\n\nexport class ComplexInnerSubscriber<T, R> extends Subscriber<R> {\n  constructor(private parent: ComplexOuterSubscriber<T, R>, public outerValue: T, public outerIndex: number) {\n    super();\n  }\n\n  protected _next(value: R): void {\n    this.parent.notifyNext(this.outerValue, value, this.outerIndex, this);\n  }\n\n  protected _error(error: any): void {\n    this.parent.notifyError(error);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.parent.notifyComplete(this);\n    this.unsubscribe();\n  }\n}\n\nexport class SimpleOuterSubscriber<T, R> extends Subscriber<T> implements SimpleOuterSubscriberLike<R> {\n  notifyNext(innerValue: R): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(): void {\n    this.destination.complete();\n  }\n}\n\n/**\n * DO NOT USE (formerly \"OuterSubscriber\")\n * TODO: We want to refactor this and remove it. It is retaining values it shouldn't for long\n * periods of time.\n */\nexport class ComplexOuterSubscriber<T, R> extends Subscriber<T> {\n  /**\n   * @param _outerValue Used by: bufferToggle, delayWhen, windowToggle\n   * @param innerValue Used by: subclass default, combineLatest, race, bufferToggle, windowToggle, withLatestFrom\n   * @param _outerIndex Used by: combineLatest, race, withLatestFrom\n   * @param _innerSub Used by: delayWhen\n   */\n  notifyNext(_outerValue: T, innerValue: R, _outerIndex: number, _innerSub: ComplexInnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(error: any): void {\n    this.destination.error(error);\n  }\n\n  /**\n   * @param _innerSub Used by: race, bufferToggle, delayWhen, windowToggle, windowWhen\n   */\n  notifyComplete(_innerSub: ComplexInnerSubscriber<T, R>): void {\n    this.destination.complete();\n  }\n}\n\nexport function innerSubscribe(result: any, innerSubscriber: Subscriber<any>): Subscription | undefined {\n  if (innerSubscriber.closed) {\n    return undefined;\n  }\n  if (result instanceof Observable) {\n    return result.subscribe(innerSubscriber);\n  }\n  let subscription: Subscription;\n  try {\n    subscription = subscribeTo(result)(innerSubscriber) as Subscription;\n  } catch (error) {\n    innerSubscriber.error(error);\n  }\n  return subscription;\n}\n"],"mappings":"AAEA,SAASA,UAAU,QAAQ,cAAc;AACzC,SAASC,UAAU,QAAQ,cAAc;AACzC,SAASC,WAAW,QAAQ,oBAAoB;AAmBhD,OAAM,MAAOC,qBAAyB,SAAQH,UAAa;EACzDI,YAAoBC,MAAsC;IACxD,KAAK,EAAE;IADW,KAAAA,MAAM,GAANA,MAAM;EAE1B;EAEUC,KAAKA,CAACC,KAAQ;IACtB,IAAI,CAACF,MAAM,CAACG,UAAU,CAACD,KAAK,CAAC;EAC/B;EAEUE,MAAMA,CAACC,KAAU;IACzB,IAAI,CAACL,MAAM,CAACM,WAAW,CAACD,KAAK,CAAC;IAC9B,IAAI,CAACE,WAAW,EAAE;EACpB;EAEUC,SAASA,CAAA;IACjB,IAAI,CAACR,MAAM,CAACS,cAAc,EAAE;IAC5B,IAAI,CAACF,WAAW,EAAE;EACpB;;AAGF,OAAM,MAAOG,sBAA6B,SAAQf,UAAa;EAC7DI,YAAoBC,MAAoC,EAASW,UAAa,EAASC,UAAkB;IACvG,KAAK,EAAE;IADW,KAAAZ,MAAM,GAANA,MAAM;IAAuC,KAAAW,UAAU,GAAVA,UAAU;IAAY,KAAAC,UAAU,GAAVA,UAAU;EAEjG;EAEUX,KAAKA,CAACC,KAAQ;IACtB,IAAI,CAACF,MAAM,CAACG,UAAU,CAAC,IAAI,CAACQ,UAAU,EAAET,KAAK,EAAE,IAAI,CAACU,UAAU,EAAE,IAAI,CAAC;EACvE;EAEUR,MAAMA,CAACC,KAAU;IACzB,IAAI,CAACL,MAAM,CAACM,WAAW,CAACD,KAAK,CAAC;IAC9B,IAAI,CAACE,WAAW,EAAE;EACpB;EAEUC,SAASA,CAAA;IACjB,IAAI,CAACR,MAAM,CAACS,cAAc,CAAC,IAAI,CAAC;IAChC,IAAI,CAACF,WAAW,EAAE;EACpB;;AAGF,OAAM,MAAOM,qBAA4B,SAAQlB,UAAa;EAC5DQ,UAAUA,CAACW,UAAa;IACtB,IAAI,CAACC,WAAW,CAACC,IAAI,CAACF,UAAU,CAAC;EACnC;EAEAR,WAAWA,CAACW,GAAQ;IAClB,IAAI,CAACF,WAAW,CAACV,KAAK,CAACY,GAAG,CAAC;EAC7B;EAEAR,cAAcA,CAAA;IACZ,IAAI,CAACM,WAAW,CAACG,QAAQ,EAAE;EAC7B;;AAQF,OAAM,MAAOC,sBAA6B,SAAQxB,UAAa;EAO7DQ,UAAUA,CAACiB,WAAc,EAAEN,UAAa,EAAEO,WAAmB,EAAEC,SAAuC;IACpG,IAAI,CAACP,WAAW,CAACC,IAAI,CAACF,UAAU,CAAC;EACnC;EAEAR,WAAWA,CAACD,KAAU;IACpB,IAAI,CAACU,WAAW,CAACV,KAAK,CAACA,KAAK,CAAC;EAC/B;EAKAI,cAAcA,CAACa,SAAuC;IACpD,IAAI,CAACP,WAAW,CAACG,QAAQ,EAAE;EAC7B;;AAGF,OAAM,SAAUK,cAAcA,CAACC,MAAW,EAAEC,eAAgC;EAC1E,IAAIA,eAAe,CAACC,MAAM,EAAE;IAC1B,OAAOC,SAAS;;EAElB,IAAIH,MAAM,YAAY5B,UAAU,EAAE;IAChC,OAAO4B,MAAM,CAACI,SAAS,CAACH,eAAe,CAAC;;EAE1C,IAAII,YAA0B;EAC9B,IAAI;IACFA,YAAY,GAAGhC,WAAW,CAAC2B,MAAM,CAAC,CAACC,eAAe,CAAiB;GACpE,CAAC,OAAOpB,KAAK,EAAE;IACdoB,eAAe,CAACpB,KAAK,CAACA,KAAK,CAAC;;EAE9B,OAAOwB,YAAY;AACrB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}