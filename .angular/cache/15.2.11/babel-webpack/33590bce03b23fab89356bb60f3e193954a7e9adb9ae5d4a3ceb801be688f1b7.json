{"ast":null,"code":"import { Subscriber } from '../Subscriber';\nexport function distinctUntilChanged(compare, keySelector) {\n  return source => source.lift(new DistinctUntilChangedOperator(compare, keySelector));\n}\nclass DistinctUntilChangedOperator {\n  constructor(compare, keySelector) {\n    this.compare = compare;\n    this.keySelector = keySelector;\n  }\n  call(subscriber, source) {\n    return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n  }\n}\nclass DistinctUntilChangedSubscriber extends Subscriber {\n  constructor(destination, compare, keySelector) {\n    super(destination);\n    this.keySelector = keySelector;\n    this.hasKey = false;\n    if (typeof compare === 'function') {\n      this.compare = compare;\n    }\n  }\n  compare(x, y) {\n    return x === y;\n  }\n  _next(value) {\n    let key;\n    try {\n      const {\n        keySelector\n      } = this;\n      key = keySelector ? keySelector(value) : value;\n    } catch (err) {\n      return this.destination.error(err);\n    }\n    let result = false;\n    if (this.hasKey) {\n      try {\n        const {\n          compare\n        } = this;\n        result = compare(this.key, key);\n      } catch (err) {\n        return this.destination.error(err);\n      }\n    } else {\n      this.hasKey = true;\n    }\n    if (!result) {\n      this.key = key;\n      this.destination.next(value);\n    }\n  }\n}","map":{"version":3,"names":["Subscriber","distinctUntilChanged","compare","keySelector","source","lift","DistinctUntilChangedOperator","constructor","call","subscriber","subscribe","DistinctUntilChangedSubscriber","destination","hasKey","x","y","_next","value","key","err","error","result","next"],"sources":["C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\node_modules\\rxjs\\src\\internal\\operators\\distinctUntilChanged.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilChanged<T>(compare?: (x: T, y: T) => boolean): MonoTypeOperatorFunction<T>;\nexport function distinctUntilChanged<T, K>(compare: (x: K, y: K) => boolean, keySelector: (x: T) => K): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * ## Example\n * A simple example with numbers\n * ```ts\n * import { of } from 'rxjs';\n * import { distinctUntilChanged } from 'rxjs/operators';\n *\n * of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4).pipe(\n *     distinctUntilChanged(),\n *   )\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n * ```\n *\n * An example using a compare function\n * ```typescript\n * import { of } from 'rxjs';\n * import { distinctUntilChanged } from 'rxjs/operators';\n *\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'},\n *     { age: 6, name: 'Foo'},\n *   ).pipe(\n *     distinctUntilChanged((p: Person, q: Person) => p.name === q.name),\n *   )\n *   .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n * ```\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nexport function distinctUntilChanged<T, K>(compare?: (x: K, y: K) => boolean, keySelector?: (x: T) => K): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DistinctUntilChangedOperator<T, K>(compare, keySelector));\n}\n\nclass DistinctUntilChangedOperator<T, K> implements Operator<T, T> {\n  constructor(private compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DistinctUntilChangedSubscriber<T, K> extends Subscriber<T> {\n  private key: K;\n  private hasKey: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n    super(destination);\n    if (typeof compare === 'function') {\n      this.compare = compare;\n    }\n  }\n\n  private compare(x: any, y: any): boolean {\n    return x === y;\n  }\n\n  protected _next(value: T): void {\n    let key: any;\n    try {\n      const { keySelector } = this;\n      key = keySelector ? keySelector(value) : value;\n    } catch (err) {\n      return this.destination.error(err);\n    }\n    let result = false;\n    if (this.hasKey) {\n      try {\n        const { compare } = this;\n        result = compare(this.key, key);\n      } catch (err) {\n        return this.destination.error(err);\n      }\n    } else {\n      this.hasKey = true;\n    }\n    if (!result) {\n      this.key = key;\n      this.destination.next(value);\n    }\n  }\n}\n"],"mappings":"AACA,SAASA,UAAU,QAAQ,eAAe;AA8D1C,OAAM,SAAUC,oBAAoBA,CAAOC,OAAiC,EAAEC,WAAyB;EACrG,OAAQC,MAAqB,IAAKA,MAAM,CAACC,IAAI,CAAC,IAAIC,4BAA4B,CAAOJ,OAAO,EAAEC,WAAW,CAAC,CAAC;AAC7G;AAEA,MAAMG,4BAA4B;EAChCC,YAAoBL,OAAgC,EAChCC,WAAwB;IADxB,KAAAD,OAAO,GAAPA,OAAO;IACP,KAAAC,WAAW,GAAXA,WAAW;EAC/B;EAEAK,IAAIA,CAACC,UAAyB,EAAEL,MAAW;IACzC,OAAOA,MAAM,CAACM,SAAS,CAAC,IAAIC,8BAA8B,CAACF,UAAU,EAAE,IAAI,CAACP,OAAO,EAAE,IAAI,CAACC,WAAW,CAAC,CAAC;EACzG;;AAQF,MAAMQ,8BAAqC,SAAQX,UAAa;EAI9DO,YAAYK,WAA0B,EAC1BV,OAAgC,EACxBC,WAAwB;IAC1C,KAAK,CAACS,WAAW,CAAC;IADA,KAAAT,WAAW,GAAXA,WAAW;IAJvB,KAAAU,MAAM,GAAY,KAAK;IAM7B,IAAI,OAAOX,OAAO,KAAK,UAAU,EAAE;MACjC,IAAI,CAACA,OAAO,GAAGA,OAAO;;EAE1B;EAEQA,OAAOA,CAACY,CAAM,EAAEC,CAAM;IAC5B,OAAOD,CAAC,KAAKC,CAAC;EAChB;EAEUC,KAAKA,CAACC,KAAQ;IACtB,IAAIC,GAAQ;IACZ,IAAI;MACF,MAAM;QAAEf;MAAW,CAAE,GAAG,IAAI;MAC5Be,GAAG,GAAGf,WAAW,GAAGA,WAAW,CAACc,KAAK,CAAC,GAAGA,KAAK;KAC/C,CAAC,OAAOE,GAAG,EAAE;MACZ,OAAO,IAAI,CAACP,WAAW,CAACQ,KAAK,CAACD,GAAG,CAAC;;IAEpC,IAAIE,MAAM,GAAG,KAAK;IAClB,IAAI,IAAI,CAACR,MAAM,EAAE;MACf,IAAI;QACF,MAAM;UAAEX;QAAO,CAAE,GAAG,IAAI;QACxBmB,MAAM,GAAGnB,OAAO,CAAC,IAAI,CAACgB,GAAG,EAAEA,GAAG,CAAC;OAChC,CAAC,OAAOC,GAAG,EAAE;QACZ,OAAO,IAAI,CAACP,WAAW,CAACQ,KAAK,CAACD,GAAG,CAAC;;KAErC,MAAM;MACL,IAAI,CAACN,MAAM,GAAG,IAAI;;IAEpB,IAAI,CAACQ,MAAM,EAAE;MACX,IAAI,CAACH,GAAG,GAAGA,GAAG;MACd,IAAI,CAACN,WAAW,CAACU,IAAI,CAACL,KAAK,CAAC;;EAEhC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}