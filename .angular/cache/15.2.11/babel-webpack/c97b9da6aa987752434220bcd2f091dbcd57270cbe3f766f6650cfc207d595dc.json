{"ast":null,"code":"import { Subscriber } from '../Subscriber';\nexport function canReportError(observer) {\n  while (observer) {\n    const {\n      closed,\n      destination,\n      isStopped\n    } = observer;\n    if (closed || isStopped) {\n      return false;\n    } else if (destination && destination instanceof Subscriber) {\n      observer = destination;\n    } else {\n      observer = null;\n    }\n  }\n  return true;\n}","map":{"version":3,"names":["Subscriber","canReportError","observer","closed","destination","isStopped"],"sources":["C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\node_modules\\rxjs\\src\\internal\\util\\canReportError.ts"],"sourcesContent":["import { Subscriber } from '../Subscriber';\nimport { Subject } from '../Subject';\n\n/**\n * Determines whether the ErrorObserver is closed or stopped or has a\n * destination that is closed or stopped - in which case errors will\n * need to be reported via a different mechanism.\n * @param observer the observer\n */\nexport function canReportError(observer: Subscriber<any> | Subject<any>): boolean {\n  while (observer) {\n    const { closed, destination, isStopped } = observer as any;\n    if (closed || isStopped) {\n      return false;\n    } else if (destination && destination instanceof Subscriber) {\n      observer = destination;\n    } else {\n      observer = null;\n    }\n  }\n  return true;\n}\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,eAAe;AAS1C,OAAM,SAAUC,cAAcA,CAACC,QAAwC;EACrE,OAAOA,QAAQ,EAAE;IACf,MAAM;MAAEC,MAAM;MAAEC,WAAW;MAAEC;IAAS,CAAE,GAAGH,QAAe;IAC1D,IAAIC,MAAM,IAAIE,SAAS,EAAE;MACvB,OAAO,KAAK;KACb,MAAM,IAAID,WAAW,IAAIA,WAAW,YAAYJ,UAAU,EAAE;MAC3DE,QAAQ,GAAGE,WAAW;KACvB,MAAM;MACLF,QAAQ,GAAG,IAAI;;;EAGnB,OAAO,IAAI;AACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}