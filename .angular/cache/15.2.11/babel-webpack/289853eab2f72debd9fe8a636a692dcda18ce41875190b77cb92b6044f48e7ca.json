{"ast":null,"code":"import { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function windowToggle(openings, closingSelector) {\n  return source => source.lift(new WindowToggleOperator(openings, closingSelector));\n}\nclass WindowToggleOperator {\n  constructor(openings, closingSelector) {\n    this.openings = openings;\n    this.closingSelector = closingSelector;\n  }\n  call(subscriber, source) {\n    return source.subscribe(new WindowToggleSubscriber(subscriber, this.openings, this.closingSelector));\n  }\n}\nclass WindowToggleSubscriber extends OuterSubscriber {\n  constructor(destination, openings, closingSelector) {\n    super(destination);\n    this.openings = openings;\n    this.closingSelector = closingSelector;\n    this.contexts = [];\n    this.add(this.openSubscription = subscribeToResult(this, openings, openings));\n  }\n  _next(value) {\n    const {\n      contexts\n    } = this;\n    if (contexts) {\n      const len = contexts.length;\n      for (let i = 0; i < len; i++) {\n        contexts[i].window.next(value);\n      }\n    }\n  }\n  _error(err) {\n    const {\n      contexts\n    } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.error(err);\n        context.subscription.unsubscribe();\n      }\n    }\n    super._error(err);\n  }\n  _complete() {\n    const {\n      contexts\n    } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.complete();\n        context.subscription.unsubscribe();\n      }\n    }\n    super._complete();\n  }\n  _unsubscribe() {\n    const {\n      contexts\n    } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.unsubscribe();\n        context.subscription.unsubscribe();\n      }\n    }\n  }\n  notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    if (outerValue === this.openings) {\n      let closingNotifier;\n      try {\n        const {\n          closingSelector\n        } = this;\n        closingNotifier = closingSelector(innerValue);\n      } catch (e) {\n        return this.error(e);\n      }\n      const window = new Subject();\n      const subscription = new Subscription();\n      const context = {\n        window,\n        subscription\n      };\n      this.contexts.push(context);\n      const innerSubscription = subscribeToResult(this, closingNotifier, context);\n      if (innerSubscription.closed) {\n        this.closeWindow(this.contexts.length - 1);\n      } else {\n        innerSubscription.context = context;\n        subscription.add(innerSubscription);\n      }\n      this.destination.next(window);\n    } else {\n      this.closeWindow(this.contexts.indexOf(outerValue));\n    }\n  }\n  notifyError(err) {\n    this.error(err);\n  }\n  notifyComplete(inner) {\n    if (inner !== this.openSubscription) {\n      this.closeWindow(this.contexts.indexOf(inner.context));\n    }\n  }\n  closeWindow(index) {\n    if (index === -1) {\n      return;\n    }\n    const {\n      contexts\n    } = this;\n    const context = contexts[index];\n    const {\n      window,\n      subscription\n    } = context;\n    contexts.splice(index, 1);\n    window.complete();\n    subscription.unsubscribe();\n  }\n}","map":{"version":3,"names":["Subject","Subscription","OuterSubscriber","subscribeToResult","windowToggle","openings","closingSelector","source","lift","WindowToggleOperator","constructor","call","subscriber","subscribe","WindowToggleSubscriber","destination","contexts","add","openSubscription","_next","value","len","length","i","window","next","_error","err","index","context","error","subscription","unsubscribe","_complete","complete","_unsubscribe","notifyNext","outerValue","innerValue","outerIndex","innerIndex","innerSub","closingNotifier","e","push","innerSubscription","closed","closeWindow","indexOf","notifyError","notifyComplete","inner","splice"],"sources":["C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\node_modules\\rxjs\\src\\internal\\operators\\windowToggle.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../types';\n\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * ![](windowToggle.png)\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * ## Example\n * Every other second, emit the click events from the next 500ms\n * ```ts\n * import { fromEvent, interval, EMPTY } from 'rxjs';\n * import { windowToggle, mergeAll } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const openings = interval(1000);\n * const result = clicks.pipe(\n *   windowToggle(openings, i => i % 2 ? interval(500) : EMPTY),\n *   mergeAll()\n * );\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nexport function windowToggle<T, O>(openings: Observable<O>,\n                                   closingSelector: (openValue: O) => Observable<any>): OperatorFunction<T, Observable<T>> {\n  return (source: Observable<T>) => source.lift(new WindowToggleOperator<T, O>(openings, closingSelector));\n}\n\nclass WindowToggleOperator<T, O> implements Operator<T, Observable<T>> {\n\n  constructor(private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowToggleSubscriber(\n      subscriber, this.openings, this.closingSelector\n    ));\n  }\n}\n\ninterface WindowContext<T> {\n  window: Subject<T>;\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowToggleSubscriber<T, O> extends OuterSubscriber<T, any> {\n  private contexts: WindowContext<T>[] = [];\n  private openSubscription: Subscription;\n\n  constructor(destination: Subscriber<Observable<T>>,\n              private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n    super(destination);\n    this.add(this.openSubscription = subscribeToResult(this, openings, openings as any));\n  }\n\n  protected _next(value: T) {\n    const { contexts } = this;\n    if (contexts) {\n      const len = contexts.length;\n      for (let i = 0; i < len; i++) {\n        contexts[i].window.next(value);\n      }\n    }\n  }\n\n  protected _error(err: any) {\n\n    const { contexts } = this;\n    this.contexts = null;\n\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.error(err);\n        context.subscription.unsubscribe();\n      }\n    }\n\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.complete();\n        context.subscription.unsubscribe();\n      }\n    }\n    super._complete();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribe() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.unsubscribe();\n        context.subscription.unsubscribe();\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n\n    if (outerValue === this.openings) {\n      let closingNotifier;\n      try {\n        const { closingSelector } = this;\n        closingNotifier = closingSelector(innerValue);\n      } catch (e) {\n        return this.error(e);\n      }\n\n      const window = new Subject<T>();\n      const subscription = new Subscription();\n      const context = { window, subscription };\n      this.contexts.push(context);\n      const innerSubscription = subscribeToResult(this, closingNotifier, context as any);\n\n      if (innerSubscription.closed) {\n        this.closeWindow(this.contexts.length - 1);\n      } else {\n        (<any>innerSubscription).context = context;\n        subscription.add(innerSubscription);\n      }\n\n      this.destination.next(window);\n    } else {\n      this.closeWindow(this.contexts.indexOf(outerValue));\n    }\n  }\n\n  notifyError(err: any): void {\n    this.error(err);\n  }\n\n  notifyComplete(inner: Subscription): void {\n    if (inner !== this.openSubscription) {\n      this.closeWindow(this.contexts.indexOf((<any> inner).context));\n    }\n  }\n\n  private closeWindow(index: number): void {\n    if (index === -1) {\n      return;\n    }\n\n    const { contexts } = this;\n    const context = contexts[index];\n    const { window, subscription } = context;\n    contexts.splice(index, 1);\n    window.complete();\n    subscription.unsubscribe();\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}