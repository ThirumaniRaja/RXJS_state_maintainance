{"ast":null,"code":"import { ReplaySubject } from '../ReplaySubject';\nexport function shareReplay(configOrBufferSize, windowTime, scheduler) {\n  let config;\n  if (configOrBufferSize && typeof configOrBufferSize === 'object') {\n    config = configOrBufferSize;\n  } else {\n    config = {\n      bufferSize: configOrBufferSize,\n      windowTime,\n      refCount: false,\n      scheduler\n    };\n  }\n  return source => source.lift(shareReplayOperator(config));\n}\nfunction shareReplayOperator({\n  bufferSize = Number.POSITIVE_INFINITY,\n  windowTime = Number.POSITIVE_INFINITY,\n  refCount: useRefCount,\n  scheduler\n}) {\n  let subject;\n  let refCount = 0;\n  let subscription;\n  let hasError = false;\n  let isComplete = false;\n  return function shareReplayOperation(source) {\n    refCount++;\n    let innerSub;\n    if (!subject || hasError) {\n      hasError = false;\n      subject = new ReplaySubject(bufferSize, windowTime, scheduler);\n      innerSub = subject.subscribe(this);\n      subscription = source.subscribe({\n        next(value) {\n          subject.next(value);\n        },\n        error(err) {\n          hasError = true;\n          subject.error(err);\n        },\n        complete() {\n          isComplete = true;\n          subscription = undefined;\n          subject.complete();\n        }\n      });\n      if (isComplete) {\n        subscription = undefined;\n      }\n    } else {\n      innerSub = subject.subscribe(this);\n    }\n    this.add(() => {\n      refCount--;\n      innerSub.unsubscribe();\n      innerSub = undefined;\n      if (subscription && !isComplete && useRefCount && refCount === 0) {\n        subscription.unsubscribe();\n        subscription = undefined;\n        subject = undefined;\n      }\n    });\n  };\n}","map":{"version":3,"names":["ReplaySubject","shareReplay","configOrBufferSize","windowTime","scheduler","config","bufferSize","refCount","source","lift","shareReplayOperator","Number","POSITIVE_INFINITY","useRefCount","subject","subscription","hasError","isComplete","shareReplayOperation","innerSub","subscribe","next","value","error","err","complete","undefined","add","unsubscribe"],"sources":["C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\node_modules\\rxjs\\src\\internal\\operators\\shareReplay.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { ReplaySubject } from '../ReplaySubject';\nimport { Subscription } from '../Subscription';\nimport { MonoTypeOperatorFunction, SchedulerLike } from '../types';\nimport { Subscriber } from '../Subscriber';\n\nexport interface ShareReplayConfig {\n  bufferSize?: number;\n  windowTime?: number;\n  refCount: boolean;\n  scheduler?: SchedulerLike;\n}\n\n/**\n * Share source and replay specified number of emissions on subscription.\n *\n * This operator is a specialization of `replay` that connects to a source observable\n * and multicasts through a `ReplaySubject` constructed with the specified arguments.\n * A successfully completed source will stay cached in the `shareReplayed observable` forever,\n * but an errored source can be retried.\n *\n * ## Why use shareReplay?\n * You generally want to use `shareReplay` when you have side-effects or taxing computations\n * that you do not wish to be executed amongst multiple subscribers.\n * It may also be valuable in situations where you know you will have late subscribers to\n * a stream that need access to previously emitted values.\n * This ability to replay values on subscription is what differentiates {@link share} and `shareReplay`.\n *\n * ![](shareReplay.png)\n *\n * ## Example\n * ```ts\n * import { interval } from 'rxjs';\n * import { shareReplay, take } from 'rxjs/operators';\n *\n * const obs$ = interval(1000);\n * const shared$ = obs$.pipe(\n *   take(4),\n *   shareReplay(3)\n * );\n * shared$.subscribe(x => console.log('source A: ', x));\n * shared$.subscribe(y => console.log('source B: ', y));\n *\n * ```\n *\n * @see {@link publish}\n * @see {@link share}\n * @see {@link publishReplay}\n *\n * @param {Number} [bufferSize=Number.POSITIVE_INFINITY] Maximum element count of the replay buffer.\n * @param {Number} [windowTime=Number.POSITIVE_INFINITY] Maximum time length of the replay buffer in milliseconds.\n * @param {Scheduler} [scheduler] Scheduler where connected observers within the selector function\n * will be invoked on.\n * @return {Observable} An observable sequence that contains the elements of a sequence produced\n * by multicasting the source sequence within a selector function.\n * @method shareReplay\n * @owner Observable\n */\nexport function shareReplay<T>(\n  config: ShareReplayConfig\n): MonoTypeOperatorFunction<T>;\nexport function shareReplay<T>(\n  bufferSize?: number,\n  windowTime?: number,\n  scheduler?: SchedulerLike\n): MonoTypeOperatorFunction<T>;\nexport function shareReplay<T>(\n  configOrBufferSize?: ShareReplayConfig | number,\n  windowTime?: number,\n  scheduler?: SchedulerLike\n): MonoTypeOperatorFunction<T> {\n  let config: ShareReplayConfig;\n  if (configOrBufferSize && typeof configOrBufferSize === 'object') {\n    config = configOrBufferSize as ShareReplayConfig;\n  } else {\n    config = {\n      bufferSize: configOrBufferSize as number | undefined,\n      windowTime,\n      refCount: false,\n      scheduler,\n    };\n  }\n  return (source: Observable<T>) => source.lift(shareReplayOperator(config));\n}\n\nfunction shareReplayOperator<T>({\n  bufferSize = Number.POSITIVE_INFINITY,\n  windowTime = Number.POSITIVE_INFINITY,\n  refCount: useRefCount,\n  scheduler,\n}: ShareReplayConfig) {\n  let subject: ReplaySubject<T> | undefined;\n  let refCount = 0;\n  let subscription: Subscription | undefined;\n  let hasError = false;\n  let isComplete = false;\n\n  return function shareReplayOperation(\n    this: Subscriber<T>,\n    source: Observable<T>\n  ) {\n    refCount++;\n    let innerSub: Subscription;\n    if (!subject || hasError) {\n      hasError = false;\n      subject = new ReplaySubject<T>(bufferSize, windowTime, scheduler);\n      innerSub = subject.subscribe(this);\n      subscription = source.subscribe({\n        next(value) {\n          subject.next(value);\n        },\n        error(err) {\n          hasError = true;\n          subject.error(err);\n        },\n        complete() {\n          isComplete = true;\n          subscription = undefined;\n          subject.complete();\n        },\n      });\n\n      // Here we need to check to see if the source synchronously completed. Although\n      // we're setting `subscription = undefined` in the completion handler, if the source\n      // is synchronous, that will happen *before* subscription is set by the return of\n      // the `subscribe` call.\n      if (isComplete) {\n        subscription = undefined;\n      }\n    } else {\n      innerSub = subject.subscribe(this);\n    }\n\n    this.add(() => {\n      refCount--;\n      innerSub.unsubscribe();\n      innerSub = undefined;\n      if (subscription && !isComplete && useRefCount && refCount === 0) {\n        subscription.unsubscribe();\n        subscription = undefined;\n        subject = undefined;\n      }\n    });\n  };\n}\n"],"mappings":"AACA,SAASA,aAAa,QAAQ,kBAAkB;AAiEhD,OAAM,SAAUC,WAAWA,CACzBC,kBAA+C,EAC/CC,UAAmB,EACnBC,SAAyB;EAEzB,IAAIC,MAAyB;EAC7B,IAAIH,kBAAkB,IAAI,OAAOA,kBAAkB,KAAK,QAAQ,EAAE;IAChEG,MAAM,GAAGH,kBAAuC;GACjD,MAAM;IACLG,MAAM,GAAG;MACPC,UAAU,EAAEJ,kBAAwC;MACpDC,UAAU;MACVI,QAAQ,EAAE,KAAK;MACfH;KACD;;EAEH,OAAQI,MAAqB,IAAKA,MAAM,CAACC,IAAI,CAACC,mBAAmB,CAACL,MAAM,CAAC,CAAC;AAC5E;AAEA,SAASK,mBAAmBA,CAAI;EAC9BJ,UAAU,GAAGK,MAAM,CAACC,iBAAiB;EACrCT,UAAU,GAAGQ,MAAM,CAACC,iBAAiB;EACrCL,QAAQ,EAAEM,WAAW;EACrBT;AAAS,CACS;EAClB,IAAIU,OAAqC;EACzC,IAAIP,QAAQ,GAAG,CAAC;EAChB,IAAIQ,YAAsC;EAC1C,IAAIC,QAAQ,GAAG,KAAK;EACpB,IAAIC,UAAU,GAAG,KAAK;EAEtB,OAAO,SAASC,oBAAoBA,CAElCV,MAAqB;IAErBD,QAAQ,EAAE;IACV,IAAIY,QAAsB;IAC1B,IAAI,CAACL,OAAO,IAAIE,QAAQ,EAAE;MACxBA,QAAQ,GAAG,KAAK;MAChBF,OAAO,GAAG,IAAId,aAAa,CAAIM,UAAU,EAAEH,UAAU,EAAEC,SAAS,CAAC;MACjEe,QAAQ,GAAGL,OAAO,CAACM,SAAS,CAAC,IAAI,CAAC;MAClCL,YAAY,GAAGP,MAAM,CAACY,SAAS,CAAC;QAC9BC,IAAIA,CAACC,KAAK;UACRR,OAAO,CAACO,IAAI,CAACC,KAAK,CAAC;QACrB,CAAC;QACDC,KAAKA,CAACC,GAAG;UACPR,QAAQ,GAAG,IAAI;UACfF,OAAO,CAACS,KAAK,CAACC,GAAG,CAAC;QACpB,CAAC;QACDC,QAAQA,CAAA;UACNR,UAAU,GAAG,IAAI;UACjBF,YAAY,GAAGW,SAAS;UACxBZ,OAAO,CAACW,QAAQ,EAAE;QACpB;OACD,CAAC;MAMF,IAAIR,UAAU,EAAE;QACdF,YAAY,GAAGW,SAAS;;KAE3B,MAAM;MACLP,QAAQ,GAAGL,OAAO,CAACM,SAAS,CAAC,IAAI,CAAC;;IAGpC,IAAI,CAACO,GAAG,CAAC,MAAK;MACZpB,QAAQ,EAAE;MACVY,QAAQ,CAACS,WAAW,EAAE;MACtBT,QAAQ,GAAGO,SAAS;MACpB,IAAIX,YAAY,IAAI,CAACE,UAAU,IAAIJ,WAAW,IAAIN,QAAQ,KAAK,CAAC,EAAE;QAChEQ,YAAY,CAACa,WAAW,EAAE;QAC1Bb,YAAY,GAAGW,SAAS;QACxBZ,OAAO,GAAGY,SAAS;;IAEvB,CAAC,CAAC;EACJ,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}