{"ast":null,"code":"import { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\nexport function catchError(selector) {\n  return function catchErrorOperatorFunction(source) {\n    const operator = new CatchOperator(selector);\n    const caught = source.lift(operator);\n    return operator.caught = caught;\n  };\n}\nclass CatchOperator {\n  constructor(selector) {\n    this.selector = selector;\n  }\n  call(subscriber, source) {\n    return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n  }\n}\nclass CatchSubscriber extends SimpleOuterSubscriber {\n  constructor(destination, selector, caught) {\n    super(destination);\n    this.selector = selector;\n    this.caught = caught;\n  }\n  error(err) {\n    if (!this.isStopped) {\n      let result;\n      try {\n        result = this.selector(err, this.caught);\n      } catch (err2) {\n        super.error(err2);\n        return;\n      }\n      this._unsubscribeAndRecycle();\n      const innerSubscriber = new SimpleInnerSubscriber(this);\n      this.add(innerSubscriber);\n      const innerSubscription = innerSubscribe(result, innerSubscriber);\n      if (innerSubscription !== innerSubscriber) {\n        this.add(innerSubscription);\n      }\n    }\n  }\n}","map":{"version":3,"names":["SimpleOuterSubscriber","SimpleInnerSubscriber","innerSubscribe","catchError","selector","catchErrorOperatorFunction","source","operator","CatchOperator","caught","lift","constructor","call","subscriber","subscribe","CatchSubscriber","destination","error","err","isStopped","result","err2","_unsubscribeAndRecycle","innerSubscriber","add","innerSubscription"],"sources":["C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\node_modules\\rxjs\\src\\internal\\operators\\catchError.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\nimport { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\nimport { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\n\n/* tslint:disable:max-line-length */\nexport function catchError<T, O extends ObservableInput<any>>(selector: (err: any, caught: Observable<T>) => O): OperatorFunction<T, T | ObservedValueOf<O>>;\n/* tslint:enable:max-line-length */\n\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * ![](catch.png)\n *\n * ## Examples\n * Continues with a different Observable when there's an error\n *\n * ```ts\n * import { of } from 'rxjs';\n * import { map, catchError } from 'rxjs/operators';\n *\n * of(1, 2, 3, 4, 5).pipe(\n *     map(n => {\n *   \t   if (n === 4) {\n * \t       throw 'four!';\n *       }\n *\t     return n;\n *     }),\n *     catchError(err => of('I', 'II', 'III', 'IV', 'V')),\n *   )\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n * ```\n *\n * Retries the caught source Observable again in case of error, similar to retry() operator\n *\n * ```ts\n * import { of } from 'rxjs';\n * import { map, catchError, take } from 'rxjs/operators';\n *\n * of(1, 2, 3, 4, 5).pipe(\n *     map(n => {\n *   \t   if (n === 4) {\n *   \t     throw 'four!';\n *       }\n * \t     return n;\n *     }),\n *     catchError((err, caught) => caught),\n *     take(30),\n *   )\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n * ```\n *\n * Throws a new error when the source Observable throws an error\n *\n * ```ts\n * import { of } from 'rxjs';\n * import { map, catchError } from 'rxjs/operators';\n *\n * of(1, 2, 3, 4, 5).pipe(\n *     map(n => {\n *       if (n === 4) {\n *         throw 'four!';\n *       }\n *       return n;\n *     }),\n *     catchError(err => {\n *       throw 'error in source. Details: ' + err;\n *     }),\n *   )\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n * ```\n *\n *  @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} An observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @name catchError\n */\nexport function catchError<T, O extends ObservableInput<any>>(\n  selector: (err: any, caught: Observable<T>) => O\n): OperatorFunction<T, T | ObservedValueOf<O>> {\n  return function catchErrorOperatorFunction(source: Observable<T>): Observable<T | ObservedValueOf<O>> {\n    const operator = new CatchOperator(selector);\n    const caught = source.lift(operator);\n    return (operator.caught = caught as Observable<T>);\n  };\n}\n\nclass CatchOperator<T, R> implements Operator<T, T | R> {\n  caught: Observable<T>;\n\n  constructor(private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CatchSubscriber<T, R> extends SimpleOuterSubscriber<T, T | R> {\n  constructor(destination: Subscriber<any>,\n              private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>,\n              private caught: Observable<T>) {\n    super(destination);\n  }\n\n  // NOTE: overriding `error` instead of `_error` because we don't want\n  // to have this flag this subscriber as `isStopped`. We can mimic the\n  // behavior of the RetrySubscriber (from the `retry` operator), where\n  // we unsubscribe from our source chain, reset our Subscriber flags,\n  // then subscribe to the selector result.\n  error(err: any) {\n    if (!this.isStopped) {\n      let result: any;\n      try {\n        result = this.selector(err, this.caught);\n      } catch (err2) {\n        super.error(err2);\n        return;\n      }\n      this._unsubscribeAndRecycle();\n      const innerSubscriber = new SimpleInnerSubscriber(this);\n      this.add(innerSubscriber);\n      const innerSubscription = innerSubscribe(result, innerSubscriber);\n      // The returned subscription will usually be the subscriber that was\n      // passed. However, interop subscribers will be wrapped and for\n      // unsubscriptions to chain correctly, the wrapper needs to be added, too.\n      if (innerSubscription !== innerSubscriber) {\n        this.add(innerSubscription);\n      }\n    }\n  }\n}\n"],"mappings":"AAKA,SAASA,qBAAqB,EAAEC,qBAAqB,EAAEC,cAAc,QAAQ,mBAAmB;AAkFhG,OAAM,SAAUC,UAAUA,CACxBC,QAAgD;EAEhD,OAAO,SAASC,0BAA0BA,CAACC,MAAqB;IAC9D,MAAMC,QAAQ,GAAG,IAAIC,aAAa,CAACJ,QAAQ,CAAC;IAC5C,MAAMK,MAAM,GAAGH,MAAM,CAACI,IAAI,CAACH,QAAQ,CAAC;IACpC,OAAQA,QAAQ,CAACE,MAAM,GAAGA,MAAuB;EACnD,CAAC;AACH;AAEA,MAAMD,aAAa;EAGjBG,YAAoBP,QAAqE;IAArE,KAAAA,QAAQ,GAARA,QAAQ;EAC5B;EAEAQ,IAAIA,CAACC,UAAyB,EAAEP,MAAW;IACzC,OAAOA,MAAM,CAACQ,SAAS,CAAC,IAAIC,eAAe,CAACF,UAAU,EAAE,IAAI,CAACT,QAAQ,EAAE,IAAI,CAACK,MAAM,CAAC,CAAC;EACtF;;AAQF,MAAMM,eAAsB,SAAQf,qBAA+B;EACjEW,YAAYK,WAA4B,EACpBZ,QAAqE,EACrEK,MAAqB;IACvC,KAAK,CAACO,WAAW,CAAC;IAFA,KAAAZ,QAAQ,GAARA,QAAQ;IACR,KAAAK,MAAM,GAANA,MAAM;EAE1B;EAOAQ,KAAKA,CAACC,GAAQ;IACZ,IAAI,CAAC,IAAI,CAACC,SAAS,EAAE;MACnB,IAAIC,MAAW;MACf,IAAI;QACFA,MAAM,GAAG,IAAI,CAAChB,QAAQ,CAACc,GAAG,EAAE,IAAI,CAACT,MAAM,CAAC;OACzC,CAAC,OAAOY,IAAI,EAAE;QACb,KAAK,CAACJ,KAAK,CAACI,IAAI,CAAC;QACjB;;MAEF,IAAI,CAACC,sBAAsB,EAAE;MAC7B,MAAMC,eAAe,GAAG,IAAItB,qBAAqB,CAAC,IAAI,CAAC;MACvD,IAAI,CAACuB,GAAG,CAACD,eAAe,CAAC;MACzB,MAAME,iBAAiB,GAAGvB,cAAc,CAACkB,MAAM,EAAEG,eAAe,CAAC;MAIjE,IAAIE,iBAAiB,KAAKF,eAAe,EAAE;QACzC,IAAI,CAACC,GAAG,CAACC,iBAAiB,CAAC;;;EAGjC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}