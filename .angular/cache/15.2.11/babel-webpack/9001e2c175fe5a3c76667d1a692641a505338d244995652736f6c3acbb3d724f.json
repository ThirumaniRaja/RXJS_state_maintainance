{"ast":null,"code":"import { multicast } from './multicast';\nimport { refCount } from './refCount';\nimport { Subject } from '../Subject';\nfunction shareSubjectFactory() {\n  return new Subject();\n}\nexport function share() {\n  return source => refCount()(multicast(shareSubjectFactory)(source));\n}","map":{"version":3,"names":["multicast","refCount","Subject","shareSubjectFactory","share","source"],"sources":["C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\node_modules\\rxjs\\src\\internal\\operators\\share.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { multicast } from './multicast';\nimport { refCount } from './refCount';\nimport { Subject } from '../Subject';\n\nimport { MonoTypeOperatorFunction } from '../types';\n\nfunction shareSubjectFactory() {\n  return new Subject();\n}\n\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for `multicast(() => new Subject()), refCount()`.\n *\n * ![](share.png)\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\nexport function share<T>(): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => refCount()(multicast(shareSubjectFactory)(source)) as Observable<T>;\n}\n"],"mappings":"AACA,SAASA,SAAS,QAAQ,aAAa;AACvC,SAASC,QAAQ,QAAQ,YAAY;AACrC,SAASC,OAAO,QAAQ,YAAY;AAIpC,SAASC,mBAAmBA,CAAA;EAC1B,OAAO,IAAID,OAAO,EAAE;AACtB;AAcA,OAAM,SAAUE,KAAKA,CAAA;EACnB,OAAQC,MAAqB,IAAKJ,QAAQ,EAAE,CAACD,SAAS,CAACG,mBAAmB,CAAC,CAACE,MAAM,CAAC,CAAkB;AACvG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}