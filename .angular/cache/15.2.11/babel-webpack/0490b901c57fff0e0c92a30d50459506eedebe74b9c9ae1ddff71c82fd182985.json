{"ast":null,"code":"import { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nexport function finalize(callback) {\n  return source => source.lift(new FinallyOperator(callback));\n}\nclass FinallyOperator {\n  constructor(callback) {\n    this.callback = callback;\n  }\n  call(subscriber, source) {\n    return source.subscribe(new FinallySubscriber(subscriber, this.callback));\n  }\n}\nclass FinallySubscriber extends Subscriber {\n  constructor(destination, callback) {\n    super(destination);\n    this.add(new Subscription(callback));\n  }\n}","map":{"version":3,"names":["Subscriber","Subscription","finalize","callback","source","lift","FinallyOperator","constructor","call","subscriber","subscribe","FinallySubscriber","destination","add"],"sources":["C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\node_modules\\rxjs\\src\\internal\\operators\\finalize.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback Function to be called when source terminates.\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nexport function finalize<T>(callback: () => void): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new FinallyOperator(callback));\n}\n\nclass FinallyOperator<T> implements Operator<T, T> {\n  constructor(private callback: () => void) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FinallySubscriber(subscriber, this.callback));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FinallySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<T>, callback: () => void) {\n    super(destination);\n    this.add(new Subscription(callback));\n  }\n}\n"],"mappings":"AACA,SAASA,UAAU,QAAQ,eAAe;AAC1C,SAASC,YAAY,QAAQ,iBAAiB;AAY9C,OAAM,SAAUC,QAAQA,CAAIC,QAAoB;EAC9C,OAAQC,MAAqB,IAAKA,MAAM,CAACC,IAAI,CAAC,IAAIC,eAAe,CAACH,QAAQ,CAAC,CAAC;AAC9E;AAEA,MAAMG,eAAe;EACnBC,YAAoBJ,QAAoB;IAApB,KAAAA,QAAQ,GAARA,QAAQ;EAC5B;EAEAK,IAAIA,CAACC,UAAyB,EAAEL,MAAW;IACzC,OAAOA,MAAM,CAACM,SAAS,CAAC,IAAIC,iBAAiB,CAACF,UAAU,EAAE,IAAI,CAACN,QAAQ,CAAC,CAAC;EAC3E;;AAQF,MAAMQ,iBAAqB,SAAQX,UAAa;EAC9CO,YAAYK,WAA0B,EAAET,QAAoB;IAC1D,KAAK,CAACS,WAAW,CAAC;IAClB,IAAI,CAACC,GAAG,CAAC,IAAIZ,YAAY,CAACE,QAAQ,CAAC,CAAC;EACtC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}