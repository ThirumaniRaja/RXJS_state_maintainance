{"ast":null,"code":"import { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { empty } from '../observable/empty';\nexport function take(count) {\n  return source => {\n    if (count === 0) {\n      return empty();\n    } else {\n      return source.lift(new TakeOperator(count));\n    }\n  };\n}\nclass TakeOperator {\n  constructor(total) {\n    this.total = total;\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError();\n    }\n  }\n  call(subscriber, source) {\n    return source.subscribe(new TakeSubscriber(subscriber, this.total));\n  }\n}\nclass TakeSubscriber extends Subscriber {\n  constructor(destination, total) {\n    super(destination);\n    this.total = total;\n    this.count = 0;\n  }\n  _next(value) {\n    const total = this.total;\n    const count = ++this.count;\n    if (count <= total) {\n      this.destination.next(value);\n      if (count === total) {\n        this.destination.complete();\n        this.unsubscribe();\n      }\n    }\n  }\n}","map":{"version":3,"names":["Subscriber","ArgumentOutOfRangeError","empty","take","count","source","lift","TakeOperator","constructor","total","call","subscriber","subscribe","TakeSubscriber","destination","_next","value","next","complete","unsubscribe"],"sources":["C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\node_modules\\rxjs\\src\\internal\\operators\\take.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { empty } from '../observable/empty';\nimport { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * ![](take.png)\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * ## Example\n * Take the first 5 seconds of an infinite 1-second interval Observable\n * ```ts\n * import { interval } from 'rxjs';\n * import { take } from 'rxjs/operators';\n *\n * const intervalCount = interval(1000);\n * const takeFive = intervalCount.pipe(take(5));\n * takeFive.subscribe(x => console.log(x));\n *\n * // Logs:\n * // 0\n * // 1\n * // 2\n * // 3\n * // 4\n * ```\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport function take<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    if (count === 0) {\n      return empty();\n    } else {\n      return source.lift(new TakeOperator(count));\n    }\n  };\n}\n\nclass TakeOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const total = this.total;\n    const count = ++this.count;\n    if (count <= total) {\n      this.destination.next(value);\n      if (count === total) {\n        this.destination.complete();\n        this.unsubscribe();\n      }\n    }\n  }\n}\n"],"mappings":"AACA,SAASA,UAAU,QAAQ,eAAe;AAC1C,SAASC,uBAAuB,QAAQ,iCAAiC;AACzE,SAASC,KAAK,QAAQ,qBAAqB;AAkD3C,OAAM,SAAUC,IAAIA,CAAIC,KAAa;EACnC,OAAQC,MAAqB,IAAI;IAC/B,IAAID,KAAK,KAAK,CAAC,EAAE;MACf,OAAOF,KAAK,EAAE;KACf,MAAM;MACL,OAAOG,MAAM,CAACC,IAAI,CAAC,IAAIC,YAAY,CAACH,KAAK,CAAC,CAAC;;EAE/C,CAAC;AACH;AAEA,MAAMG,YAAY;EAChBC,YAAoBC,KAAa;IAAb,KAAAA,KAAK,GAALA,KAAK;IACvB,IAAI,IAAI,CAACA,KAAK,GAAG,CAAC,EAAE;MAClB,MAAM,IAAIR,uBAAuB,CAAvB,CAAuB;;EAErC;EAEAS,IAAIA,CAACC,UAAyB,EAAEN,MAAW;IACzC,OAAOA,MAAM,CAACO,SAAS,CAAC,IAAIC,cAAc,CAACF,UAAU,EAAE,IAAI,CAACF,KAAK,CAAC,CAAC;EACrE;;AAQF,MAAMI,cAAkB,SAAQb,UAAa;EAG3CQ,YAAYM,WAA0B,EAAUL,KAAa;IAC3D,KAAK,CAACK,WAAW,CAAC;IAD4B,KAAAL,KAAK,GAALA,KAAK;IAF7C,KAAAL,KAAK,GAAW,CAAC;EAIzB;EAEUW,KAAKA,CAACC,KAAQ;IACtB,MAAMP,KAAK,GAAG,IAAI,CAACA,KAAK;IACxB,MAAML,KAAK,GAAG,EAAE,IAAI,CAACA,KAAK;IAC1B,IAAIA,KAAK,IAAIK,KAAK,EAAE;MAClB,IAAI,CAACK,WAAW,CAACG,IAAI,CAACD,KAAK,CAAC;MAC5B,IAAIZ,KAAK,KAAKK,KAAK,EAAE;QACnB,IAAI,CAACK,WAAW,CAACI,QAAQ,EAAE;QAC3B,IAAI,CAACC,WAAW,EAAE;;;EAGxB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}