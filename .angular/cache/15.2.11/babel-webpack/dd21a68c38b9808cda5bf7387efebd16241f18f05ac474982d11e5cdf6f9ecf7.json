{"ast":null,"code":"import { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\nexport function single(predicate) {\n  return source => source.lift(new SingleOperator(predicate, source));\n}\nclass SingleOperator {\n  constructor(predicate, source) {\n    this.predicate = predicate;\n    this.source = source;\n  }\n  call(subscriber, source) {\n    return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n  }\n}\nclass SingleSubscriber extends Subscriber {\n  constructor(destination, predicate, source) {\n    super(destination);\n    this.predicate = predicate;\n    this.source = source;\n    this.seenValue = false;\n    this.index = 0;\n  }\n  applySingleValue(value) {\n    if (this.seenValue) {\n      this.destination.error('Sequence contains more than one element');\n    } else {\n      this.seenValue = true;\n      this.singleValue = value;\n    }\n  }\n  _next(value) {\n    const index = this.index++;\n    if (this.predicate) {\n      this.tryNext(value, index);\n    } else {\n      this.applySingleValue(value);\n    }\n  }\n  tryNext(value, index) {\n    try {\n      if (this.predicate(value, index, this.source)) {\n        this.applySingleValue(value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n  _complete() {\n    const destination = this.destination;\n    if (this.index > 0) {\n      destination.next(this.seenValue ? this.singleValue : undefined);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError());\n    }\n  }\n}","map":{"version":3,"names":["Subscriber","EmptyError","single","predicate","source","lift","SingleOperator","constructor","call","subscriber","subscribe","SingleSubscriber","destination","seenValue","index","applySingleValue","value","error","singleValue","_next","tryNext","err","_complete","next","undefined","complete"],"sources":["C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\node_modules\\rxjs\\src\\internal\\operators\\single.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\n\nimport { Observer, MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * items, notify of an IllegalArgumentException or NoSuchElementException respectively. If the source Observable\n * emits items but none match the specified predicate then `undefined` is emitted.\n *\n * <span class=\"informal\">Like {@link first}, but emit with error notification if there is more than one value.</span>\n * ![](single.png)\n *\n * ## Example\n * emits 'error'\n * ```ts\n * import { range } from 'rxjs';\n * import { single } from 'rxjs/operators';\n *\n * const numbers = range(1,5).pipe(single());\n * numbers.subscribe(x => console.log('never get called'), e => console.log('error'));\n * // result\n * // 'error'\n * ```\n *\n * emits 'undefined'\n * ```ts\n * import { range } from 'rxjs';\n * import { single } from 'rxjs/operators';\n *\n * const numbers = range(1,5).pipe(single(x => x === 10));\n * numbers.subscribe(x => console.log(x));\n * // result\n * // 'undefined'\n * ```\n *\n * @see {@link first}\n * @see {@link find}\n * @see {@link findIndex}\n * @see {@link elementAt}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches\n * the predicate or `undefined` when no items match.\n *\n * @method single\n * @owner Observable\n */\nexport function single<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SingleOperator(predicate, source));\n}\n\nclass SingleOperator<T> implements Operator<T, T> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SingleSubscriber<T> extends Subscriber<T> {\n  private seenValue: boolean = false;\n  private singleValue: T;\n  private index: number = 0;\n\n  constructor(destination: Observer<T>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  private applySingleValue(value: T): void {\n    if (this.seenValue) {\n      this.destination.error('Sequence contains more than one element');\n    } else {\n      this.seenValue = true;\n      this.singleValue = value;\n    }\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n\n    if (this.predicate) {\n      this.tryNext(value, index);\n    } else {\n      this.applySingleValue(value);\n    }\n  }\n\n  private tryNext(value: T, index: number): void {\n    try {\n      if (this.predicate(value, index, this.source)) {\n        this.applySingleValue(value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n\n    if (this.index > 0) {\n      destination.next(this.seenValue ? this.singleValue : undefined);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n"],"mappings":"AAEA,SAASA,UAAU,QAAQ,eAAe;AAC1C,SAASC,UAAU,QAAQ,oBAAoB;AAkD/C,OAAM,SAAUC,MAAMA,CAAIC,SAAuE;EAC/F,OAAQC,MAAqB,IAAKA,MAAM,CAACC,IAAI,CAAC,IAAIC,cAAc,CAACH,SAAS,EAAEC,MAAM,CAAC,CAAC;AACtF;AAEA,MAAME,cAAc;EAClBC,YAAoBJ,SAAuE,EACvEC,MAAsB;IADtB,KAAAD,SAAS,GAATA,SAAS;IACT,KAAAC,MAAM,GAANA,MAAM;EAC1B;EAEAI,IAAIA,CAACC,UAAyB,EAAEL,MAAW;IACzC,OAAOA,MAAM,CAACM,SAAS,CAAC,IAAIC,gBAAgB,CAACF,UAAU,EAAE,IAAI,CAACN,SAAS,EAAE,IAAI,CAACC,MAAM,CAAC,CAAC;EACxF;;AAQF,MAAMO,gBAAoB,SAAQX,UAAa;EAK7CO,YAAYK,WAAwB,EAChBT,SAAuE,EACvEC,MAAsB;IACxC,KAAK,CAACQ,WAAW,CAAC;IAFA,KAAAT,SAAS,GAATA,SAAS;IACT,KAAAC,MAAM,GAANA,MAAM;IANlB,KAAAS,SAAS,GAAY,KAAK;IAE1B,KAAAC,KAAK,GAAW,CAAC;EAMzB;EAEQC,gBAAgBA,CAACC,KAAQ;IAC/B,IAAI,IAAI,CAACH,SAAS,EAAE;MAClB,IAAI,CAACD,WAAW,CAACK,KAAK,CAAC,yCAAyC,CAAC;KAClE,MAAM;MACL,IAAI,CAACJ,SAAS,GAAG,IAAI;MACrB,IAAI,CAACK,WAAW,GAAGF,KAAK;;EAE5B;EAEUG,KAAKA,CAACH,KAAQ;IACtB,MAAMF,KAAK,GAAG,IAAI,CAACA,KAAK,EAAE;IAE1B,IAAI,IAAI,CAACX,SAAS,EAAE;MAClB,IAAI,CAACiB,OAAO,CAACJ,KAAK,EAAEF,KAAK,CAAC;KAC3B,MAAM;MACL,IAAI,CAACC,gBAAgB,CAACC,KAAK,CAAC;;EAEhC;EAEQI,OAAOA,CAACJ,KAAQ,EAAEF,KAAa;IACrC,IAAI;MACF,IAAI,IAAI,CAACX,SAAS,CAACa,KAAK,EAAEF,KAAK,EAAE,IAAI,CAACV,MAAM,CAAC,EAAE;QAC7C,IAAI,CAACW,gBAAgB,CAACC,KAAK,CAAC;;KAE/B,CAAC,OAAOK,GAAG,EAAE;MACZ,IAAI,CAACT,WAAW,CAACK,KAAK,CAACI,GAAG,CAAC;;EAE/B;EAEUC,SAASA,CAAA;IACjB,MAAMV,WAAW,GAAG,IAAI,CAACA,WAAW;IAEpC,IAAI,IAAI,CAACE,KAAK,GAAG,CAAC,EAAE;MAClBF,WAAW,CAACW,IAAI,CAAC,IAAI,CAACV,SAAS,GAAG,IAAI,CAACK,WAAW,GAAGM,SAAS,CAAC;MAC/DZ,WAAW,CAACa,QAAQ,EAAE;KACvB,MAAM;MACLb,WAAW,CAACK,KAAK,CAAC,IAAIhB,UAAU,CAAV,CAAU,CAAC;;EAErC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}