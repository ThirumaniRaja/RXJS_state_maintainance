{"ast":null,"code":"import { async } from '../scheduler/async';\nimport { scan } from './scan';\nimport { defer } from '../observable/defer';\nimport { map } from './map';\nexport function timeInterval(scheduler = async) {\n  return source => defer(() => {\n    return source.pipe(scan(({\n      current\n    }, value) => ({\n      value,\n      current: scheduler.now(),\n      last: current\n    }), {\n      current: scheduler.now(),\n      value: undefined,\n      last: undefined\n    }), map(({\n      current,\n      last,\n      value\n    }) => new TimeInterval(value, current - last)));\n  });\n}\nexport class TimeInterval {\n  constructor(value, interval) {\n    this.value = value;\n    this.interval = interval;\n  }\n}","map":{"version":3,"names":["async","scan","defer","map","timeInterval","scheduler","source","pipe","current","value","now","last","undefined","TimeInterval","constructor","interval"],"sources":["C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\node_modules\\rxjs\\src\\internal\\operators\\timeInterval.ts"],"sourcesContent":["\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { SchedulerLike, OperatorFunction } from '../types';\nimport { scan } from './scan';\nimport { defer } from '../observable/defer';\nimport { map } from './map';\n\n/**\n *\n * Emits an object containing the current value, and the time that has\n * passed between emitting the current value and the previous value, which is\n * calculated by using the provided `scheduler`'s `now()` method to retrieve\n * the current time at each emission, then calculating the difference. The `scheduler`\n * defaults to {@link asyncScheduler}, so by default, the `interval` will be in\n * milliseconds.\n *\n * <span class=\"informal\">Convert an Observable that emits items into one that\n * emits indications of the amount of time elapsed between those emissions.</span>\n *\n * ![](timeinterval.png)\n *\n * ## Examples\n * Emit inteval between current value with the last value\n *\n * ```ts\n * const seconds = interval(1000);\n *\n * seconds.pipe(timeInterval())\n * .subscribe(\n *     value => console.log(value),\n *     err => console.log(err),\n * );\n *\n * seconds.pipe(timeout(900))\n * .subscribe(\n *     value => console.log(value),\n *     err => console.log(err),\n * );\n *\n * // NOTE: The values will never be this precise,\n * // intervals created with `interval` or `setInterval`\n * // are non-deterministic.\n *\n * // {value: 0, interval: 1000}\n * // {value: 1, interval: 1000}\n * // {value: 2, interval: 1000}\n * ```\n *\n * @param {SchedulerLike} [scheduler] Scheduler used to get the current time.\n * @return {Observable<{ interval: number, value: T }>} Observable that emit infomation about value and interval\n * @method timeInterval\n */\nexport function timeInterval<T>(scheduler: SchedulerLike = async): OperatorFunction<T, TimeInterval<T>> {\n  return (source: Observable<T>) => defer(() => {\n    return source.pipe(\n      // TODO(benlesh): correct these typings.\n      scan(\n        ({ current }, value) => ({ value, current: scheduler.now(), last: current }),\n        { current: scheduler.now(), value: undefined,  last: undefined }\n      ) as any,\n      map<any, TimeInterval<T>>(({ current, last, value }) => new TimeInterval(value, current - last)),\n    );\n  });\n}\n\n// TODO(benlesh): make this an interface, export the interface, but not the implemented class,\n// there's no reason users should be manually creating this type.\n\n/**\n * @deprecated exposed API, use as interface only.\n */\nexport class TimeInterval<T> {\n  constructor(public value: T, public interval: number) {}\n}\n"],"mappings":"AAEA,SAASA,KAAK,QAAQ,oBAAoB;AAE1C,SAASC,IAAI,QAAQ,QAAQ;AAC7B,SAASC,KAAK,QAAQ,qBAAqB;AAC3C,SAASC,GAAG,QAAQ,OAAO;AA+C3B,OAAM,SAAUC,YAAYA,CAAIC,SAAA,GAA2BL,KAAK;EAC9D,OAAQM,MAAqB,IAAKJ,KAAK,CAAC,MAAK;IAC3C,OAAOI,MAAM,CAACC,IAAI,CAEhBN,IAAI,CACF,CAAC;MAAEO;IAAO,CAAE,EAAEC,KAAK,MAAM;MAAEA,KAAK;MAAED,OAAO,EAAEH,SAAS,CAACK,GAAG,EAAE;MAAEC,IAAI,EAAEH;IAAO,CAAE,CAAC,EAC5E;MAAEA,OAAO,EAAEH,SAAS,CAACK,GAAG,EAAE;MAAED,KAAK,EAAEG,SAAS;MAAGD,IAAI,EAAEC;IAAS,CAAE,CAC1D,EACRT,GAAG,CAAuB,CAAC;MAAEK,OAAO;MAAEG,IAAI;MAAEF;IAAK,CAAE,KAAK,IAAII,YAAY,CAACJ,KAAK,EAAED,OAAO,GAAGG,IAAI,CAAC,CAAC,CACjG;EACH,CAAC,CAAC;AACJ;AAQA,OAAM,MAAOE,YAAY;EACvBC,YAAmBL,KAAQ,EAASM,QAAgB;IAAjC,KAAAN,KAAK,GAALA,KAAK;IAAY,KAAAM,QAAQ,GAARA,QAAQ;EAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}