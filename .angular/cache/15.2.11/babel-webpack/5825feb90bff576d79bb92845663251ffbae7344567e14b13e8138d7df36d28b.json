{"ast":null,"code":"import { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nexport function delay(delay, scheduler = async) {\n  const absoluteDelay = isDate(delay);\n  const delayFor = absoluteDelay ? +delay - scheduler.now() : Math.abs(delay);\n  return source => source.lift(new DelayOperator(delayFor, scheduler));\n}\nclass DelayOperator {\n  constructor(delay, scheduler) {\n    this.delay = delay;\n    this.scheduler = scheduler;\n  }\n  call(subscriber, source) {\n    return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n  }\n}\nclass DelaySubscriber extends Subscriber {\n  constructor(destination, delay, scheduler) {\n    super(destination);\n    this.delay = delay;\n    this.scheduler = scheduler;\n    this.queue = [];\n    this.active = false;\n    this.errored = false;\n  }\n  static dispatch(state) {\n    const source = state.source;\n    const queue = source.queue;\n    const scheduler = state.scheduler;\n    const destination = state.destination;\n    while (queue.length > 0 && queue[0].time - scheduler.now() <= 0) {\n      queue.shift().notification.observe(destination);\n    }\n    if (queue.length > 0) {\n      const delay = Math.max(0, queue[0].time - scheduler.now());\n      this.schedule(state, delay);\n    } else {\n      this.unsubscribe();\n      source.active = false;\n    }\n  }\n  _schedule(scheduler) {\n    this.active = true;\n    const destination = this.destination;\n    destination.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {\n      source: this,\n      destination: this.destination,\n      scheduler: scheduler\n    }));\n  }\n  scheduleNotification(notification) {\n    if (this.errored === true) {\n      return;\n    }\n    const scheduler = this.scheduler;\n    const message = new DelayMessage(scheduler.now() + this.delay, notification);\n    this.queue.push(message);\n    if (this.active === false) {\n      this._schedule(scheduler);\n    }\n  }\n  _next(value) {\n    this.scheduleNotification(Notification.createNext(value));\n  }\n  _error(err) {\n    this.errored = true;\n    this.queue = [];\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n  _complete() {\n    this.scheduleNotification(Notification.createComplete());\n    this.unsubscribe();\n  }\n}\nclass DelayMessage {\n  constructor(time, notification) {\n    this.time = time;\n    this.notification = notification;\n  }\n}","map":{"version":3,"names":["async","isDate","Subscriber","Notification","delay","scheduler","absoluteDelay","delayFor","now","Math","abs","source","lift","DelayOperator","constructor","call","subscriber","subscribe","DelaySubscriber","destination","queue","active","errored","dispatch","state","length","time","shift","notification","observe","max","schedule","unsubscribe","_schedule","add","scheduleNotification","message","DelayMessage","push","_next","value","createNext","_error","err","error","_complete","createComplete"],"sources":["C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\node_modules\\rxjs\\src\\internal\\operators\\delay.ts"],"sourcesContent":["import { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Notification } from '../Notification';\nimport { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction, PartialObserver, SchedulerAction, SchedulerLike, TeardownLogic } from '../types';\n\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * ![](delay.png)\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * ## Examples\n * Delay each click by one second\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { delay } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const delayedClicks = clicks.pipe(delay(1000)); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n * ```\n *\n * Delay all clicks until a future date happens\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { delay } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const date = new Date('March 15, 2050 12:00:00'); // in the future\n * const delayedClicks = clicks.pipe(delay(date)); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nexport function delay<T>(delay: number|Date,\n                         scheduler: SchedulerLike = async): MonoTypeOperatorFunction<T> {\n  const absoluteDelay = isDate(delay);\n  const delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(<number>delay);\n  return (source: Observable<T>) => source.lift(new DelayOperator(delayFor, scheduler));\n}\n\nclass DelayOperator<T> implements Operator<T, T> {\n  constructor(private delay: number,\n              private scheduler: SchedulerLike) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n  }\n}\n\ninterface DelayState<T> {\n  source: DelaySubscriber<T>;\n  destination: PartialObserver<T>;\n  scheduler: SchedulerLike;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelaySubscriber<T> extends Subscriber<T> {\n  private queue: Array<DelayMessage<T>> = [];\n  private active: boolean = false;\n  private errored: boolean = false;\n\n  private static dispatch<T>(this: SchedulerAction<DelayState<T>>, state: DelayState<T>): void {\n    const source = state.source;\n    const queue = source.queue;\n    const scheduler = state.scheduler;\n    const destination = state.destination;\n\n    while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n      queue.shift().notification.observe(destination);\n    }\n\n    if (queue.length > 0) {\n      const delay = Math.max(0, queue[0].time - scheduler.now());\n      this.schedule(state, delay);\n    } else {\n      this.unsubscribe();\n      source.active = false;\n    }\n  }\n\n  constructor(destination: Subscriber<T>,\n              private delay: number,\n              private scheduler: SchedulerLike) {\n    super(destination);\n  }\n\n  private _schedule(scheduler: SchedulerLike): void {\n    this.active = true;\n    const destination = this.destination as Subscription;\n    destination.add(scheduler.schedule<DelayState<T>>(DelaySubscriber.dispatch, this.delay, {\n      source: this, destination: this.destination, scheduler: scheduler\n    }));\n  }\n\n  private scheduleNotification(notification: Notification<T>): void {\n    if (this.errored === true) {\n      return;\n    }\n\n    const scheduler = this.scheduler;\n    const message = new DelayMessage(scheduler.now() + this.delay, notification);\n    this.queue.push(message);\n\n    if (this.active === false) {\n      this._schedule(scheduler);\n    }\n  }\n\n  protected _next(value: T) {\n    this.scheduleNotification(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    this.errored = true;\n    this.queue = [];\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete() {\n    this.scheduleNotification(Notification.createComplete());\n    this.unsubscribe();\n  }\n}\n\nclass DelayMessage<T> {\n  constructor(public readonly time: number,\n              public readonly notification: Notification<T>) {\n  }\n}\n"],"mappings":"AAAA,SAASA,KAAK,QAAQ,oBAAoB;AAC1C,SAASC,MAAM,QAAQ,gBAAgB;AAEvC,SAASC,UAAU,QAAQ,eAAe;AAE1C,SAASC,YAAY,QAAQ,iBAAiB;AAsD9C,OAAM,SAAUC,KAAKA,CAAIA,KAAkB,EAClBC,SAAA,GAA2BL,KAAK;EACvD,MAAMM,aAAa,GAAGL,MAAM,CAACG,KAAK,CAAC;EACnC,MAAMG,QAAQ,GAAGD,aAAa,GAAI,CAACF,KAAK,GAAGC,SAAS,CAACG,GAAG,EAAE,GAAIC,IAAI,CAACC,GAAG,CAASN,KAAK,CAAC;EACrF,OAAQO,MAAqB,IAAKA,MAAM,CAACC,IAAI,CAAC,IAAIC,aAAa,CAACN,QAAQ,EAAEF,SAAS,CAAC,CAAC;AACvF;AAEA,MAAMQ,aAAa;EACjBC,YAAoBV,KAAa,EACbC,SAAwB;IADxB,KAAAD,KAAK,GAALA,KAAK;IACL,KAAAC,SAAS,GAATA,SAAS;EAC7B;EAEAU,IAAIA,CAACC,UAAyB,EAAEL,MAAW;IACzC,OAAOA,MAAM,CAACM,SAAS,CAAC,IAAIC,eAAe,CAACF,UAAU,EAAE,IAAI,CAACZ,KAAK,EAAE,IAAI,CAACC,SAAS,CAAC,CAAC;EACtF;;AAcF,MAAMa,eAAmB,SAAQhB,UAAa;EAwB5CY,YAAYK,WAA0B,EAClBf,KAAa,EACbC,SAAwB;IAC1C,KAAK,CAACc,WAAW,CAAC;IAFA,KAAAf,KAAK,GAALA,KAAK;IACL,KAAAC,SAAS,GAATA,SAAS;IAzBrB,KAAAe,KAAK,GAA2B,EAAE;IAClC,KAAAC,MAAM,GAAY,KAAK;IACvB,KAAAC,OAAO,GAAY,KAAK;EAyBhC;EAvBQ,OAAOC,QAAQA,CAA0CC,KAAoB;IACnF,MAAMb,MAAM,GAAGa,KAAK,CAACb,MAAM;IAC3B,MAAMS,KAAK,GAAGT,MAAM,CAACS,KAAK;IAC1B,MAAMf,SAAS,GAAGmB,KAAK,CAACnB,SAAS;IACjC,MAAMc,WAAW,GAAGK,KAAK,CAACL,WAAW;IAErC,OAAOC,KAAK,CAACK,MAAM,GAAG,CAAC,IAAKL,KAAK,CAAC,CAAC,CAAC,CAACM,IAAI,GAAGrB,SAAS,CAACG,GAAG,EAAE,IAAK,CAAC,EAAE;MACjEY,KAAK,CAACO,KAAK,EAAE,CAACC,YAAY,CAACC,OAAO,CAACV,WAAW,CAAC;;IAGjD,IAAIC,KAAK,CAACK,MAAM,GAAG,CAAC,EAAE;MACpB,MAAMrB,KAAK,GAAGK,IAAI,CAACqB,GAAG,CAAC,CAAC,EAAEV,KAAK,CAAC,CAAC,CAAC,CAACM,IAAI,GAAGrB,SAAS,CAACG,GAAG,EAAE,CAAC;MAC1D,IAAI,CAACuB,QAAQ,CAACP,KAAK,EAAEpB,KAAK,CAAC;KAC5B,MAAM;MACL,IAAI,CAAC4B,WAAW,EAAE;MAClBrB,MAAM,CAACU,MAAM,GAAG,KAAK;;EAEzB;EAQQY,SAASA,CAAC5B,SAAwB;IACxC,IAAI,CAACgB,MAAM,GAAG,IAAI;IAClB,MAAMF,WAAW,GAAG,IAAI,CAACA,WAA2B;IACpDA,WAAW,CAACe,GAAG,CAAC7B,SAAS,CAAC0B,QAAQ,CAAgBb,eAAe,CAACK,QAAQ,EAAE,IAAI,CAACnB,KAAK,EAAE;MACtFO,MAAM,EAAE,IAAI;MAAEQ,WAAW,EAAE,IAAI,CAACA,WAAW;MAAEd,SAAS,EAAEA;KACzD,CAAC,CAAC;EACL;EAEQ8B,oBAAoBA,CAACP,YAA6B;IACxD,IAAI,IAAI,CAACN,OAAO,KAAK,IAAI,EAAE;MACzB;;IAGF,MAAMjB,SAAS,GAAG,IAAI,CAACA,SAAS;IAChC,MAAM+B,OAAO,GAAG,IAAIC,YAAY,CAAChC,SAAS,CAACG,GAAG,EAAE,GAAG,IAAI,CAACJ,KAAK,EAAEwB,YAAY,CAAC;IAC5E,IAAI,CAACR,KAAK,CAACkB,IAAI,CAACF,OAAO,CAAC;IAExB,IAAI,IAAI,CAACf,MAAM,KAAK,KAAK,EAAE;MACzB,IAAI,CAACY,SAAS,CAAC5B,SAAS,CAAC;;EAE7B;EAEUkC,KAAKA,CAACC,KAAQ;IACtB,IAAI,CAACL,oBAAoB,CAAChC,YAAY,CAACsC,UAAU,CAACD,KAAK,CAAC,CAAC;EAC3D;EAEUE,MAAMA,CAACC,GAAQ;IACvB,IAAI,CAACrB,OAAO,GAAG,IAAI;IACnB,IAAI,CAACF,KAAK,GAAG,EAAE;IACf,IAAI,CAACD,WAAW,CAACyB,KAAK,CAACD,GAAG,CAAC;IAC3B,IAAI,CAACX,WAAW,EAAE;EACpB;EAEUa,SAASA,CAAA;IACjB,IAAI,CAACV,oBAAoB,CAAChC,YAAY,CAAC2C,cAAc,EAAE,CAAC;IACxD,IAAI,CAACd,WAAW,EAAE;EACpB;;AAGF,MAAMK,YAAY;EAChBvB,YAA4BY,IAAY,EACZE,YAA6B;IAD7B,KAAAF,IAAI,GAAJA,IAAI;IACJ,KAAAE,YAAY,GAAZA,YAAY;EACxC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}