{"ast":null,"code":"import { innerSubscribe, SimpleInnerSubscriber, SimpleOuterSubscriber } from '../innerSubscribe';\nexport function takeUntil(notifier) {\n  return source => source.lift(new TakeUntilOperator(notifier));\n}\nclass TakeUntilOperator {\n  constructor(notifier) {\n    this.notifier = notifier;\n  }\n  call(subscriber, source) {\n    const takeUntilSubscriber = new TakeUntilSubscriber(subscriber);\n    const notifierSubscription = innerSubscribe(this.notifier, new SimpleInnerSubscriber(takeUntilSubscriber));\n    if (notifierSubscription && !takeUntilSubscriber.seenValue) {\n      takeUntilSubscriber.add(notifierSubscription);\n      return source.subscribe(takeUntilSubscriber);\n    }\n    return takeUntilSubscriber;\n  }\n}\nclass TakeUntilSubscriber extends SimpleOuterSubscriber {\n  constructor(destination) {\n    super(destination);\n    this.seenValue = false;\n  }\n  notifyNext() {\n    this.seenValue = true;\n    this.complete();\n  }\n  notifyComplete() {}\n}","map":{"version":3,"names":["innerSubscribe","SimpleInnerSubscriber","SimpleOuterSubscriber","takeUntil","notifier","source","lift","TakeUntilOperator","constructor","call","subscriber","takeUntilSubscriber","TakeUntilSubscriber","notifierSubscription","seenValue","add","subscribe","destination","notifyNext","complete","notifyComplete"],"sources":["C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\node_modules\\rxjs\\src\\internal\\operators\\takeUntil.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\n\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\nimport { innerSubscribe, SimpleInnerSubscriber, SimpleOuterSubscriber } from '../innerSubscribe';\n\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits a value. Then, it completes.</span>\n *\n * ![](takeUntil.png)\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value, the output Observable stops mirroring the source Observable\n * and completes. If the `notifier` doesn't emit any value and completes\n * then `takeUntil` will pass all values.\n *\n * ## Example\n * Tick every second until the first click happens\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { takeUntil } from 'rxjs/operators';\n *\n * const source = interval(1000);\n * const clicks = fromEvent(document, 'click');\n * const result = source.pipe(takeUntil(clicks));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nexport function takeUntil<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new TakeUntilOperator(notifier));\n}\n\nclass TakeUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    const takeUntilSubscriber = new TakeUntilSubscriber(subscriber);\n    const notifierSubscription = innerSubscribe(this.notifier, new SimpleInnerSubscriber(takeUntilSubscriber));\n    if (notifierSubscription && !takeUntilSubscriber.seenValue) {\n      takeUntilSubscriber.add(notifierSubscription);\n      return source.subscribe(takeUntilSubscriber);\n    }\n    return takeUntilSubscriber;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeUntilSubscriber<T, R> extends SimpleOuterSubscriber<T, R> {\n  seenValue = false;\n\n  constructor(destination: Subscriber<any>, ) {\n    super(destination);\n  }\n\n  notifyNext(): void {\n    this.seenValue = true;\n    this.complete();\n  }\n\n  notifyComplete(): void {\n    // noop\n  }\n}\n"],"mappings":"AAKA,SAASA,cAAc,EAAEC,qBAAqB,EAAEC,qBAAqB,QAAQ,mBAAmB;AA0ChG,OAAM,SAAUC,SAASA,CAAIC,QAAyB;EACpD,OAAQC,MAAqB,IAAKA,MAAM,CAACC,IAAI,CAAC,IAAIC,iBAAiB,CAACH,QAAQ,CAAC,CAAC;AAChF;AAEA,MAAMG,iBAAiB;EACrBC,YAAoBJ,QAAyB;IAAzB,KAAAA,QAAQ,GAARA,QAAQ;EAC5B;EAEAK,IAAIA,CAACC,UAAyB,EAAEL,MAAW;IACzC,MAAMM,mBAAmB,GAAG,IAAIC,mBAAmB,CAACF,UAAU,CAAC;IAC/D,MAAMG,oBAAoB,GAAGb,cAAc,CAAC,IAAI,CAACI,QAAQ,EAAE,IAAIH,qBAAqB,CAACU,mBAAmB,CAAC,CAAC;IAC1G,IAAIE,oBAAoB,IAAI,CAACF,mBAAmB,CAACG,SAAS,EAAE;MAC1DH,mBAAmB,CAACI,GAAG,CAACF,oBAAoB,CAAC;MAC7C,OAAOR,MAAM,CAACW,SAAS,CAACL,mBAAmB,CAAC;;IAE9C,OAAOA,mBAAmB;EAC5B;;AAQF,MAAMC,mBAA0B,SAAQV,qBAA2B;EAGjEM,YAAYS,WAA4B;IACtC,KAAK,CAACA,WAAW,CAAC;IAHpB,KAAAH,SAAS,GAAG,KAAK;EAIjB;EAEAI,UAAUA,CAAA;IACR,IAAI,CAACJ,SAAS,GAAG,IAAI;IACrB,IAAI,CAACK,QAAQ,EAAE;EACjB;EAEAC,cAAcA,CAAA,GAEd","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}