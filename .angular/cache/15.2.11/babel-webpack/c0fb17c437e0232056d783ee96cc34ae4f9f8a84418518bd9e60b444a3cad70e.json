{"ast":null,"code":"import { Subscriber } from '../Subscriber';\nimport { empty } from '../observable/empty';\nexport function repeat(count = -1) {\n  return source => {\n    if (count === 0) {\n      return empty();\n    } else if (count < 0) {\n      return source.lift(new RepeatOperator(-1, source));\n    } else {\n      return source.lift(new RepeatOperator(count - 1, source));\n    }\n  };\n}\nclass RepeatOperator {\n  constructor(count, source) {\n    this.count = count;\n    this.source = source;\n  }\n  call(subscriber, source) {\n    return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));\n  }\n}\nclass RepeatSubscriber extends Subscriber {\n  constructor(destination, count, source) {\n    super(destination);\n    this.count = count;\n    this.source = source;\n  }\n  complete() {\n    if (!this.isStopped) {\n      const {\n        source,\n        count\n      } = this;\n      if (count === 0) {\n        return super.complete();\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  }\n}","map":{"version":3,"names":["Subscriber","empty","repeat","count","source","lift","RepeatOperator","constructor","call","subscriber","subscribe","RepeatSubscriber","destination","complete","isStopped","_unsubscribeAndRecycle"],"sources":["C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\node_modules\\rxjs\\src\\internal\\operators\\repeat.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { empty } from '../observable/empty';\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/**\n * Returns an Observable that will resubscribe to the source stream when the source stream completes, at most count times.\n *\n * <span class=\"informal\">Repeats all values emitted on the source. It's like {@link retry}, but for non error cases.</span>\n *\n * ![](repeat.png)\n *\n * Similar to {@link retry}, this operator repeats the stream of items emitted by the source for non error cases.\n * Repeat can be useful for creating observables that are meant to have some repeated pattern or rhythm.\n *\n * Note: `repeat(0)` returns an empty observable and `repeat()` will repeat forever\n *\n * ## Example\n * Repeat a message stream\n * ```ts\n * import { of } from 'rxjs';\n * import { repeat, delay } from 'rxjs/operators';\n *\n * const source = of('Repeat message');\n * const example = source.pipe(repeat(3));\n * example.subscribe(x => console.log(x));\n *\n * // Results\n * // Repeat message\n * // Repeat message\n * // Repeat message\n * ```\n *\n * Repeat 3 values, 2 times\n * ```ts\n * import { interval } from 'rxjs';\n * import { repeat, take } from 'rxjs/operators';\n *\n * const source = interval(1000);\n * const example = source.pipe(take(3), repeat(2));\n * example.subscribe(x => console.log(x));\n *\n * // Results every second\n * // 0\n * // 1\n * // 2\n * // 0\n * // 1\n * // 2\n * ```\n *\n * @see {@link repeatWhen}\n * @see {@link retry}\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that will resubscribe to the source stream when the source stream completes\n * , at most count times.\n * @method repeat\n * @owner Observable\n */\nexport function repeat<T>(count: number = -1): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    if (count === 0) {\n      return empty();\n    } else if (count < 0) {\n      return source.lift(new RepeatOperator(-1, source));\n    } else {\n      return source.lift(new RepeatOperator(count - 1, source));\n    }\n  };\n}\n\nclass RepeatOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  complete() {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.complete();\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  }\n}\n"],"mappings":"AACA,SAASA,UAAU,QAAQ,eAAe;AAE1C,SAASC,KAAK,QAAQ,qBAAqB;AA2D3C,OAAM,SAAUC,MAAMA,CAAIC,KAAA,GAAgB,CAAC,CAAC;EAC1C,OAAQC,MAAqB,IAAI;IAC/B,IAAID,KAAK,KAAK,CAAC,EAAE;MACf,OAAOF,KAAK,EAAE;KACf,MAAM,IAAIE,KAAK,GAAG,CAAC,EAAE;MACpB,OAAOC,MAAM,CAACC,IAAI,CAAC,IAAIC,cAAc,CAAC,CAAC,CAAC,EAAEF,MAAM,CAAC,CAAC;KACnD,MAAM;MACL,OAAOA,MAAM,CAACC,IAAI,CAAC,IAAIC,cAAc,CAACH,KAAK,GAAG,CAAC,EAAEC,MAAM,CAAC,CAAC;;EAE7D,CAAC;AACH;AAEA,MAAME,cAAc;EAClBC,YAAoBJ,KAAa,EACbC,MAAqB;IADrB,KAAAD,KAAK,GAALA,KAAK;IACL,KAAAC,MAAM,GAANA,MAAM;EAC1B;EACAI,IAAIA,CAACC,UAAyB,EAAEL,MAAW;IACzC,OAAOA,MAAM,CAACM,SAAS,CAAC,IAAIC,gBAAgB,CAACF,UAAU,EAAE,IAAI,CAACN,KAAK,EAAE,IAAI,CAACC,MAAM,CAAC,CAAC;EACpF;;AAQF,MAAMO,gBAAoB,SAAQX,UAAa;EAC7CO,YAAYK,WAA4B,EACpBT,KAAa,EACbC,MAAqB;IACvC,KAAK,CAACQ,WAAW,CAAC;IAFA,KAAAT,KAAK,GAALA,KAAK;IACL,KAAAC,MAAM,GAANA,MAAM;EAE1B;EACAS,QAAQA,CAAA;IACN,IAAI,CAAC,IAAI,CAACC,SAAS,EAAE;MACnB,MAAM;QAAEV,MAAM;QAAED;MAAK,CAAE,GAAG,IAAI;MAC9B,IAAIA,KAAK,KAAK,CAAC,EAAE;QACf,OAAO,KAAK,CAACU,QAAQ,EAAE;OACxB,MAAM,IAAIV,KAAK,GAAG,CAAC,CAAC,EAAE;QACrB,IAAI,CAACA,KAAK,GAAGA,KAAK,GAAG,CAAC;;MAExBC,MAAM,CAACM,SAAS,CAAC,IAAI,CAACK,sBAAsB,EAAE,CAAC;;EAEnD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}