{"ast":null,"code":"import { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nexport function observeOn(scheduler, delay = 0) {\n  return function observeOnOperatorFunction(source) {\n    return source.lift(new ObserveOnOperator(scheduler, delay));\n  };\n}\nexport class ObserveOnOperator {\n  constructor(scheduler, delay = 0) {\n    this.scheduler = scheduler;\n    this.delay = delay;\n  }\n  call(subscriber, source) {\n    return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n  }\n}\nexport class ObserveOnSubscriber extends Subscriber {\n  constructor(destination, scheduler, delay = 0) {\n    super(destination);\n    this.scheduler = scheduler;\n    this.delay = delay;\n  }\n  static dispatch(arg) {\n    const {\n      notification,\n      destination\n    } = arg;\n    notification.observe(destination);\n    this.unsubscribe();\n  }\n  scheduleMessage(notification) {\n    const destination = this.destination;\n    destination.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));\n  }\n  _next(value) {\n    this.scheduleMessage(Notification.createNext(value));\n  }\n  _error(err) {\n    this.scheduleMessage(Notification.createError(err));\n    this.unsubscribe();\n  }\n  _complete() {\n    this.scheduleMessage(Notification.createComplete());\n    this.unsubscribe();\n  }\n}\nexport class ObserveOnMessage {\n  constructor(notification, destination) {\n    this.notification = notification;\n    this.destination = destination;\n  }\n}","map":{"version":3,"names":["Subscriber","Notification","observeOn","scheduler","delay","observeOnOperatorFunction","source","lift","ObserveOnOperator","constructor","call","subscriber","subscribe","ObserveOnSubscriber","destination","dispatch","arg","notification","observe","unsubscribe","scheduleMessage","add","schedule","ObserveOnMessage","_next","value","createNext","_error","err","createError","_complete","createComplete"],"sources":["C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\node_modules\\rxjs\\src\\internal\\operators\\observeOn.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Notification } from '../Notification';\nimport { MonoTypeOperatorFunction, PartialObserver, SchedulerAction, SchedulerLike, TeardownLogic } from '../types';\n\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * ## Example\n * Ensure values in subscribe are called just before browser repaint.\n * ```ts\n * import { interval } from 'rxjs';\n * import { observeOn } from 'rxjs/operators';\n *\n * const intervals = interval(10);                // Intervals are scheduled\n *                                                // with async scheduler by default...\n * intervals.pipe(\n *   observeOn(animationFrameScheduler),          // ...but we will observe on animationFrame\n * )                                              // scheduler to ensure smooth animation.\n * .subscribe(val => {\n *   someDiv.style.height = val + 'px';\n * });\n * ```\n *\n * @see {@link delay}\n *\n * @param {SchedulerLike} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn<T>(scheduler: SchedulerLike, delay: number = 0): MonoTypeOperatorFunction<T> {\n  return function observeOnOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new ObserveOnOperator(scheduler, delay));\n  };\n}\n\nexport class ObserveOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: SchedulerLike, private delay: number = 0) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ObserveOnSubscriber<T> extends Subscriber<T> {\n  /** @nocollapse */\n  static dispatch(this: SchedulerAction<ObserveOnMessage>, arg: ObserveOnMessage) {\n    const { notification, destination } = arg;\n    notification.observe(destination);\n    this.unsubscribe();\n  }\n\n  constructor(destination: Subscriber<T>,\n              private scheduler: SchedulerLike,\n              private delay: number = 0) {\n    super(destination);\n  }\n\n  private scheduleMessage(notification: Notification<any>): void {\n    const destination = this.destination as Subscription;\n    destination.add(this.scheduler.schedule(\n      ObserveOnSubscriber.dispatch,\n      this.delay,\n      new ObserveOnMessage(notification, this.destination)\n    ));\n  }\n\n  protected _next(value: T): void {\n    this.scheduleMessage(Notification.createNext(value));\n  }\n\n  protected _error(err: any): void {\n    this.scheduleMessage(Notification.createError(err));\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.scheduleMessage(Notification.createComplete());\n    this.unsubscribe();\n  }\n}\n\nexport class ObserveOnMessage {\n  constructor(public notification: Notification<any>,\n              public destination: PartialObserver<any>) {\n  }\n}\n"],"mappings":"AAEA,SAASA,UAAU,QAAQ,eAAe;AAE1C,SAASC,YAAY,QAAQ,iBAAiB;AAuD9C,OAAM,SAAUC,SAASA,CAAIC,SAAwB,EAAEC,KAAA,GAAgB,CAAC;EACtE,OAAO,SAASC,yBAAyBA,CAACC,MAAqB;IAC7D,OAAOA,MAAM,CAACC,IAAI,CAAC,IAAIC,iBAAiB,CAACL,SAAS,EAAEC,KAAK,CAAC,CAAC;EAC7D,CAAC;AACH;AAEA,OAAM,MAAOI,iBAAiB;EAC5BC,YAAoBN,SAAwB,EAAUC,KAAA,GAAgB,CAAC;IAAnD,KAAAD,SAAS,GAATA,SAAS;IAAyB,KAAAC,KAAK,GAALA,KAAK;EAC3D;EAEAM,IAAIA,CAACC,UAAyB,EAAEL,MAAW;IACzC,OAAOA,MAAM,CAACM,SAAS,CAAC,IAAIC,mBAAmB,CAACF,UAAU,EAAE,IAAI,CAACR,SAAS,EAAE,IAAI,CAACC,KAAK,CAAC,CAAC;EAC1F;;AAQF,OAAM,MAAOS,mBAAuB,SAAQb,UAAa;EAQvDS,YAAYK,WAA0B,EAClBX,SAAwB,EACxBC,KAAA,GAAgB,CAAC;IACnC,KAAK,CAACU,WAAW,CAAC;IAFA,KAAAX,SAAS,GAATA,SAAS;IACT,KAAAC,KAAK,GAALA,KAAK;EAEzB;EAVA,OAAOW,QAAQA,CAA0CC,GAAqB;IAC5E,MAAM;MAAEC,YAAY;MAAEH;IAAW,CAAE,GAAGE,GAAG;IACzCC,YAAY,CAACC,OAAO,CAACJ,WAAW,CAAC;IACjC,IAAI,CAACK,WAAW,EAAE;EACpB;EAQQC,eAAeA,CAACH,YAA+B;IACrD,MAAMH,WAAW,GAAG,IAAI,CAACA,WAA2B;IACpDA,WAAW,CAACO,GAAG,CAAC,IAAI,CAAClB,SAAS,CAACmB,QAAQ,CACrCT,mBAAmB,CAACE,QAAQ,EAC5B,IAAI,CAACX,KAAK,EACV,IAAImB,gBAAgB,CAACN,YAAY,EAAE,IAAI,CAACH,WAAW,CAAC,CACrD,CAAC;EACJ;EAEUU,KAAKA,CAACC,KAAQ;IACtB,IAAI,CAACL,eAAe,CAACnB,YAAY,CAACyB,UAAU,CAACD,KAAK,CAAC,CAAC;EACtD;EAEUE,MAAMA,CAACC,GAAQ;IACvB,IAAI,CAACR,eAAe,CAACnB,YAAY,CAAC4B,WAAW,CAACD,GAAG,CAAC,CAAC;IACnD,IAAI,CAACT,WAAW,EAAE;EACpB;EAEUW,SAASA,CAAA;IACjB,IAAI,CAACV,eAAe,CAACnB,YAAY,CAAC8B,cAAc,EAAE,CAAC;IACnD,IAAI,CAACZ,WAAW,EAAE;EACpB;;AAGF,OAAM,MAAOI,gBAAgB;EAC3Bd,YAAmBQ,YAA+B,EAC/BH,WAAiC;IADjC,KAAAG,YAAY,GAAZA,YAAY;IACZ,KAAAH,WAAW,GAAXA,WAAW;EAC9B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}