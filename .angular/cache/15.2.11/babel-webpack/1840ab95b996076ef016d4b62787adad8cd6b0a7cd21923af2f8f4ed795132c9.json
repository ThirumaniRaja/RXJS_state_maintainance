{"ast":null,"code":"import { scheduleObservable } from './scheduleObservable';\nimport { schedulePromise } from './schedulePromise';\nimport { scheduleArray } from './scheduleArray';\nimport { scheduleIterable } from './scheduleIterable';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isPromise } from '../util/isPromise';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isIterable } from '../util/isIterable';\nexport function scheduled(input, scheduler) {\n  if (input != null) {\n    if (isInteropObservable(input)) {\n      return scheduleObservable(input, scheduler);\n    } else if (isPromise(input)) {\n      return schedulePromise(input, scheduler);\n    } else if (isArrayLike(input)) {\n      return scheduleArray(input, scheduler);\n    } else if (isIterable(input) || typeof input === 'string') {\n      return scheduleIterable(input, scheduler);\n    }\n  }\n  throw new TypeError((input !== null && typeof input || input) + ' is not observable');\n}","map":{"version":3,"names":["scheduleObservable","schedulePromise","scheduleArray","scheduleIterable","isInteropObservable","isPromise","isArrayLike","isIterable","scheduled","input","scheduler","TypeError"],"sources":["C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\node_modules\\rxjs\\src\\internal\\scheduled\\scheduled.ts"],"sourcesContent":["import { scheduleObservable } from './scheduleObservable';\nimport { schedulePromise } from './schedulePromise';\nimport { scheduleArray } from './scheduleArray';\nimport { scheduleIterable } from './scheduleIterable';\nimport { ObservableInput, SchedulerLike, Observable } from 'rxjs';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isPromise } from '../util/isPromise';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isIterable } from '../util/isIterable';\n\n/**\n * Converts from a common {@link ObservableInput} type to an observable where subscription and emissions\n * are scheduled on the provided scheduler.\n *\n * @see from\n * @see of\n *\n * @param input The observable, array, promise, iterable, etc you would like to schedule\n * @param scheduler The scheduler to use to schedule the subscription and emissions from\n * the returned observable.\n */\nexport function scheduled<T>(input: ObservableInput<T>, scheduler: SchedulerLike): Observable<T> {\n  if (input != null) {\n    if (isInteropObservable(input)) {\n      return scheduleObservable(input, scheduler);\n    } else if (isPromise(input)) {\n      return schedulePromise(input, scheduler);\n    } else if (isArrayLike(input)) {\n      return scheduleArray(input, scheduler);\n    }  else if (isIterable(input) || typeof input === 'string') {\n      return scheduleIterable(input, scheduler);\n    }\n  }\n\n  throw new TypeError((input !== null && typeof input || input) + ' is not observable');\n}\n"],"mappings":"AAAA,SAASA,kBAAkB,QAAQ,sBAAsB;AACzD,SAASC,eAAe,QAAQ,mBAAmB;AACnD,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,SAASC,gBAAgB,QAAQ,oBAAoB;AAErD,SAASC,mBAAmB,QAAQ,6BAA6B;AACjE,SAASC,SAAS,QAAQ,mBAAmB;AAC7C,SAASC,WAAW,QAAQ,qBAAqB;AACjD,SAASC,UAAU,QAAQ,oBAAoB;AAa/C,OAAM,SAAUC,SAASA,CAAIC,KAAyB,EAAEC,SAAwB;EAC9E,IAAID,KAAK,IAAI,IAAI,EAAE;IACjB,IAAIL,mBAAmB,CAACK,KAAK,CAAC,EAAE;MAC9B,OAAOT,kBAAkB,CAACS,KAAK,EAAEC,SAAS,CAAC;KAC5C,MAAM,IAAIL,SAAS,CAACI,KAAK,CAAC,EAAE;MAC3B,OAAOR,eAAe,CAACQ,KAAK,EAAEC,SAAS,CAAC;KACzC,MAAM,IAAIJ,WAAW,CAACG,KAAK,CAAC,EAAE;MAC7B,OAAOP,aAAa,CAACO,KAAK,EAAEC,SAAS,CAAC;KACvC,MAAO,IAAIH,UAAU,CAACE,KAAK,CAAC,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MAC1D,OAAON,gBAAgB,CAACM,KAAK,EAAEC,SAAS,CAAC;;;EAI7C,MAAM,IAAIC,SAAS,CAAC,CAACF,KAAK,KAAK,IAAI,IAAI,OAAOA,KAAK,IAAIA,KAAK,IAAI,oBAAoB,CAAC;AACvF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}