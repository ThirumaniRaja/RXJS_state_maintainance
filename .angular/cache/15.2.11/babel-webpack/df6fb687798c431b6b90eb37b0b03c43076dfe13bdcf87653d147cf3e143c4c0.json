{"ast":null,"code":"import { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { isNumeric } from '../util/isNumeric';\nimport { isScheduler } from '../util/isScheduler';\nexport function timer(dueTime = 0, periodOrScheduler, scheduler) {\n  let period = -1;\n  if (isNumeric(periodOrScheduler)) {\n    period = Number(periodOrScheduler) < 1 && 1 || Number(periodOrScheduler);\n  } else if (isScheduler(periodOrScheduler)) {\n    scheduler = periodOrScheduler;\n  }\n  if (!isScheduler(scheduler)) {\n    scheduler = async;\n  }\n  return new Observable(subscriber => {\n    const due = isNumeric(dueTime) ? dueTime : +dueTime - scheduler.now();\n    return scheduler.schedule(dispatch, due, {\n      index: 0,\n      period,\n      subscriber\n    });\n  });\n}\nfunction dispatch(state) {\n  const {\n    index,\n    period,\n    subscriber\n  } = state;\n  subscriber.next(index);\n  if (subscriber.closed) {\n    return;\n  } else if (period === -1) {\n    return subscriber.complete();\n  }\n  state.index = index + 1;\n  this.schedule(state, period);\n}","map":{"version":3,"names":["Observable","async","isNumeric","isScheduler","timer","dueTime","periodOrScheduler","scheduler","period","Number","subscriber","due","now","schedule","dispatch","index","state","next","closed","complete"],"sources":["C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\node_modules\\rxjs\\src\\internal\\observable\\timer.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { SchedulerAction, SchedulerLike } from '../types';\nimport { async } from '../scheduler/async';\nimport { isNumeric } from '../util/isNumeric';\nimport { isScheduler } from '../util/isScheduler';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Creates an Observable that starts emitting after an `dueTime` and\n * emits ever increasing numbers after each `period` of time thereafter.\n *\n * <span class=\"informal\">Its like {@link index/interval}, but you can specify when\n * should the emissions start.</span>\n *\n * ![](timer.png)\n *\n * `timer` returns an Observable that emits an infinite sequence of ascending\n * integers, with a constant interval of time, `period` of your choosing\n * between those emissions. The first emission happens after the specified\n * `dueTime`. The initial delay may be a `Date`. By default, this\n * operator uses the {@link asyncScheduler} {@link SchedulerLike} to provide a notion of time, but you\n * may pass any {@link SchedulerLike} to it. If `period` is not specified, the output\n * Observable emits only one value, `0`. Otherwise, it emits an infinite\n * sequence.\n *\n * ## Examples\n * ### Emits ascending numbers, one every second (1000ms), starting after 3 seconds\n * ```ts\n * import { timer } from 'rxjs';\n *\n * const numbers = timer(3000, 1000);\n * numbers.subscribe(x => console.log(x));\n * ```\n *\n * ### Emits one number after five seconds\n * ```ts\n * import { timer } from 'rxjs';\n *\n * const numbers = timer(5000);\n * numbers.subscribe(x => console.log(x));\n * ```\n * @see {@link index/interval}\n * @see {@link delay}\n *\n * @param {number|Date} [dueTime] The initial delay time specified as a Date object or as an integer denoting\n * milliseconds to wait before emitting the first value of 0`.\n * @param {number|SchedulerLike} [periodOrScheduler] The period of time between emissions of the\n * subsequent numbers.\n * @param {SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for scheduling\n * the emission of values, and providing a notion of \"time\".\n * @return {Observable} An Observable that emits a `0` after the\n * `dueTime` and ever increasing numbers after each `period` of time\n * thereafter.\n * @static true\n * @name timer\n * @owner Observable\n */\nexport function timer(dueTime: number | Date = 0,\n                      periodOrScheduler?: number | SchedulerLike,\n                      scheduler?: SchedulerLike): Observable<number> {\n  let period = -1;\n  if (isNumeric(periodOrScheduler)) {\n    period = Number(periodOrScheduler) < 1 && 1 || Number(periodOrScheduler);\n  } else if (isScheduler(periodOrScheduler)) {\n    scheduler = periodOrScheduler as any;\n  }\n\n  if (!isScheduler(scheduler)) {\n    scheduler = async;\n  }\n\n  return new Observable(subscriber => {\n    const due = isNumeric(dueTime)\n      ? (dueTime as number)\n      : (+dueTime - scheduler.now());\n\n    return scheduler.schedule(dispatch, due, {\n      index: 0, period, subscriber\n    });\n  });\n}\n\ninterface TimerState {\n  index: number;\n  period: number;\n  subscriber: Subscriber<number>;\n}\n\nfunction dispatch(this: SchedulerAction<TimerState>, state: TimerState) {\n  const { index, period, subscriber } = state;\n  subscriber.next(index);\n\n  if (subscriber.closed) {\n    return;\n  } else if (period === -1) {\n    return subscriber.complete();\n  }\n\n  state.index = index + 1;\n  this.schedule(state, period);\n}\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,eAAe;AAE1C,SAASC,KAAK,QAAQ,oBAAoB;AAC1C,SAASC,SAAS,QAAQ,mBAAmB;AAC7C,SAASC,WAAW,QAAQ,qBAAqB;AAqDjD,OAAM,SAAUC,KAAKA,CAACC,OAAA,GAAyB,CAAC,EAC1BC,iBAA0C,EAC1CC,SAAyB;EAC7C,IAAIC,MAAM,GAAG,CAAC,CAAC;EACf,IAAIN,SAAS,CAACI,iBAAiB,CAAC,EAAE;IAChCE,MAAM,GAAGC,MAAM,CAACH,iBAAiB,CAAC,GAAG,CAAC,IAAI,CAAC,IAAIG,MAAM,CAACH,iBAAiB,CAAC;GACzE,MAAM,IAAIH,WAAW,CAACG,iBAAiB,CAAC,EAAE;IACzCC,SAAS,GAAGD,iBAAwB;;EAGtC,IAAI,CAACH,WAAW,CAACI,SAAS,CAAC,EAAE;IAC3BA,SAAS,GAAGN,KAAK;;EAGnB,OAAO,IAAID,UAAU,CAACU,UAAU,IAAG;IACjC,MAAMC,GAAG,GAAGT,SAAS,CAACG,OAAO,CAAC,GACzBA,OAAkB,GAClB,CAACA,OAAO,GAAGE,SAAS,CAACK,GAAG,EAAG;IAEhC,OAAOL,SAAS,CAACM,QAAQ,CAACC,QAAQ,EAAEH,GAAG,EAAE;MACvCI,KAAK,EAAE,CAAC;MAAEP,MAAM;MAAEE;KACnB,CAAC;EACJ,CAAC,CAAC;AACJ;AAQA,SAASI,QAAQA,CAAoCE,KAAiB;EACpE,MAAM;IAAED,KAAK;IAAEP,MAAM;IAAEE;EAAU,CAAE,GAAGM,KAAK;EAC3CN,UAAU,CAACO,IAAI,CAACF,KAAK,CAAC;EAEtB,IAAIL,UAAU,CAACQ,MAAM,EAAE;IACrB;GACD,MAAM,IAAIV,MAAM,KAAK,CAAC,CAAC,EAAE;IACxB,OAAOE,UAAU,CAACS,QAAQ,EAAE;;EAG9BH,KAAK,CAACD,KAAK,GAAGA,KAAK,GAAG,CAAC;EACvB,IAAI,CAACF,QAAQ,CAACG,KAAK,EAAER,MAAM,CAAC;AAC9B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}