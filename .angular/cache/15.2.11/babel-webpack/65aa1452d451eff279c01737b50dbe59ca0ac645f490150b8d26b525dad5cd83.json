{"ast":null,"code":"import { Subscriber } from '../Subscriber';\nexport function bufferCount(bufferSize, startBufferEvery = null) {\n  return function bufferCountOperatorFunction(source) {\n    return source.lift(new BufferCountOperator(bufferSize, startBufferEvery));\n  };\n}\nclass BufferCountOperator {\n  constructor(bufferSize, startBufferEvery) {\n    this.bufferSize = bufferSize;\n    this.startBufferEvery = startBufferEvery;\n    if (!startBufferEvery || bufferSize === startBufferEvery) {\n      this.subscriberClass = BufferCountSubscriber;\n    } else {\n      this.subscriberClass = BufferSkipCountSubscriber;\n    }\n  }\n  call(subscriber, source) {\n    return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));\n  }\n}\nclass BufferCountSubscriber extends Subscriber {\n  constructor(destination, bufferSize) {\n    super(destination);\n    this.bufferSize = bufferSize;\n    this.buffer = [];\n  }\n  _next(value) {\n    const buffer = this.buffer;\n    buffer.push(value);\n    if (buffer.length == this.bufferSize) {\n      this.destination.next(buffer);\n      this.buffer = [];\n    }\n  }\n  _complete() {\n    const buffer = this.buffer;\n    if (buffer.length > 0) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n}\nclass BufferSkipCountSubscriber extends Subscriber {\n  constructor(destination, bufferSize, startBufferEvery) {\n    super(destination);\n    this.bufferSize = bufferSize;\n    this.startBufferEvery = startBufferEvery;\n    this.buffers = [];\n    this.count = 0;\n  }\n  _next(value) {\n    const {\n      bufferSize,\n      startBufferEvery,\n      buffers,\n      count\n    } = this;\n    this.count++;\n    if (count % startBufferEvery === 0) {\n      buffers.push([]);\n    }\n    for (let i = buffers.length; i--;) {\n      const buffer = buffers[i];\n      buffer.push(value);\n      if (buffer.length === bufferSize) {\n        buffers.splice(i, 1);\n        this.destination.next(buffer);\n      }\n    }\n  }\n  _complete() {\n    const {\n      buffers,\n      destination\n    } = this;\n    while (buffers.length > 0) {\n      let buffer = buffers.shift();\n      if (buffer.length > 0) {\n        destination.next(buffer);\n      }\n    }\n    super._complete();\n  }\n}","map":{"version":3,"names":["Subscriber","bufferCount","bufferSize","startBufferEvery","bufferCountOperatorFunction","source","lift","BufferCountOperator","constructor","subscriberClass","BufferCountSubscriber","BufferSkipCountSubscriber","call","subscriber","subscribe","destination","buffer","_next","value","push","length","next","_complete","buffers","count","i","splice","shift"],"sources":["C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\node_modules\\rxjs\\src\\internal\\operators\\bufferCount.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction, TeardownLogic } from '../types';\n\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * ![](bufferCount.png)\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * ## Examples\n *\n * Emit the last two click events as an array\n *\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { bufferCount } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const buffered = clicks.pipe(bufferCount(2));\n * buffered.subscribe(x => console.log(x));\n * ```\n *\n * On every click, emit the last two click events as an array\n *\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { bufferCount } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const buffered = clicks.pipe(bufferCount(2, 1));\n * buffered.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nexport function bufferCount<T>(bufferSize: number, startBufferEvery: number = null): OperatorFunction<T, T[]> {\n  return function bufferCountOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferCountOperator<T>(bufferSize, startBufferEvery));\n  };\n}\n\nclass BufferCountOperator<T> implements Operator<T, T[]> {\n  private subscriberClass: any;\n\n  constructor(private bufferSize: number, private startBufferEvery: number) {\n    if (!startBufferEvery || bufferSize === startBufferEvery) {\n      this.subscriberClass = BufferCountSubscriber;\n    } else {\n      this.subscriberClass = BufferSkipCountSubscriber;\n    }\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): TeardownLogic {\n    return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferCountSubscriber<T> extends Subscriber<T> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const buffer = this.buffer;\n\n    buffer.push(value);\n\n    if (buffer.length == this.bufferSize) {\n      this.destination.next(buffer);\n      this.buffer = [];\n    }\n  }\n\n  protected _complete(): void {\n    const buffer = this.buffer;\n    if (buffer.length > 0) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSkipCountSubscriber<T> extends Subscriber<T> {\n  private buffers: Array<T[]> = [];\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number, private startBufferEvery: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const { bufferSize, startBufferEvery, buffers, count } = this;\n\n    this.count++;\n    if (count % startBufferEvery === 0) {\n      buffers.push([]);\n    }\n\n    for (let i = buffers.length; i--; ) {\n      const buffer = buffers[i];\n      buffer.push(value);\n      if (buffer.length === bufferSize) {\n        buffers.splice(i, 1);\n        this.destination.next(buffer);\n      }\n    }\n  }\n\n  protected _complete(): void {\n    const { buffers, destination } = this;\n\n    while (buffers.length > 0) {\n      let buffer = buffers.shift();\n      if (buffer.length > 0) {\n        destination.next(buffer);\n      }\n    }\n    super._complete();\n  }\n\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}