{"ast":null,"code":"import { Subscriber } from '../Subscriber';\nexport function sequenceEqual(compareTo, comparator) {\n  return source => source.lift(new SequenceEqualOperator(compareTo, comparator));\n}\nexport class SequenceEqualOperator {\n  constructor(compareTo, comparator) {\n    this.compareTo = compareTo;\n    this.comparator = comparator;\n  }\n  call(subscriber, source) {\n    return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparator));\n  }\n}\nexport class SequenceEqualSubscriber extends Subscriber {\n  constructor(destination, compareTo, comparator) {\n    super(destination);\n    this.compareTo = compareTo;\n    this.comparator = comparator;\n    this._a = [];\n    this._b = [];\n    this._oneComplete = false;\n    this.destination.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, this)));\n  }\n  _next(value) {\n    if (this._oneComplete && this._b.length === 0) {\n      this.emit(false);\n    } else {\n      this._a.push(value);\n      this.checkValues();\n    }\n  }\n  _complete() {\n    if (this._oneComplete) {\n      this.emit(this._a.length === 0 && this._b.length === 0);\n    } else {\n      this._oneComplete = true;\n    }\n    this.unsubscribe();\n  }\n  checkValues() {\n    const {\n      _a,\n      _b,\n      comparator\n    } = this;\n    while (_a.length > 0 && _b.length > 0) {\n      let a = _a.shift();\n      let b = _b.shift();\n      let areEqual = false;\n      try {\n        areEqual = comparator ? comparator(a, b) : a === b;\n      } catch (e) {\n        this.destination.error(e);\n      }\n      if (!areEqual) {\n        this.emit(false);\n      }\n    }\n  }\n  emit(value) {\n    const {\n      destination\n    } = this;\n    destination.next(value);\n    destination.complete();\n  }\n  nextB(value) {\n    if (this._oneComplete && this._a.length === 0) {\n      this.emit(false);\n    } else {\n      this._b.push(value);\n      this.checkValues();\n    }\n  }\n  completeB() {\n    if (this._oneComplete) {\n      this.emit(this._a.length === 0 && this._b.length === 0);\n    } else {\n      this._oneComplete = true;\n    }\n  }\n}\nclass SequenceEqualCompareToSubscriber extends Subscriber {\n  constructor(destination, parent) {\n    super(destination);\n    this.parent = parent;\n  }\n  _next(value) {\n    this.parent.nextB(value);\n  }\n  _error(err) {\n    this.parent.error(err);\n    this.unsubscribe();\n  }\n  _complete() {\n    this.parent.completeB();\n    this.unsubscribe();\n  }\n}","map":{"version":3,"names":["Subscriber","sequenceEqual","compareTo","comparator","source","lift","SequenceEqualOperator","constructor","call","subscriber","subscribe","SequenceEqualSubscriber","destination","_a","_b","_oneComplete","add","SequenceEqualCompareToSubscriber","_next","value","length","emit","push","checkValues","_complete","unsubscribe","a","shift","b","areEqual","e","error","next","complete","nextB","completeB","parent","_error","err"],"sources":["C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\node_modules\\rxjs\\src\\internal\\operators\\sequenceEqual.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\n\nimport { Observer, OperatorFunction } from '../types';\n\n/**\n * Compares all values of two observables in sequence using an optional comparator function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * ![](sequenceEqual.png)\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * ## Example\n * figure out if the Konami code matches\n * ```ts\n * import { from, fromEvent } from 'rxjs';\n * import { sequenceEqual, bufferCount, mergeMap, map } from 'rxjs/operators';\n *\n * const codes = from([\n *   'ArrowUp',\n *   'ArrowUp',\n *   'ArrowDown',\n *   'ArrowDown',\n *   'ArrowLeft',\n *   'ArrowRight',\n *   'ArrowLeft',\n *   'ArrowRight',\n *   'KeyB',\n *   'KeyA',\n *   'Enter', // no start key, clearly.\n * ]);\n *\n * const keys = fromEvent(document, 'keyup').pipe(map(e => e.code));\n * const matches = keys.pipe(\n *   bufferCount(11, 1),\n *   mergeMap(\n *     last11 => from(last11).pipe(sequenceEqual(codes)),\n *   ),\n * );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n * ```\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparator] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence.\n * @method sequenceEqual\n * @owner Observable\n */\nexport function sequenceEqual<T>(compareTo: Observable<T>,\n                                 comparator?: (a: T, b: T) => boolean): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new SequenceEqualOperator(compareTo, comparator));\n}\n\nexport class SequenceEqualOperator<T> implements Operator<T, boolean> {\n  constructor(private compareTo: Observable<T>,\n              private comparator: (a: T, b: T) => boolean) {\n  }\n\n  call(subscriber: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparator));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SequenceEqualSubscriber<T, R> extends Subscriber<T> {\n  private _a: T[] = [];\n  private _b: T[] = [];\n  private _oneComplete = false;\n\n  constructor(destination: Observer<R>,\n              private compareTo: Observable<T>,\n              private comparator: (a: T, b: T) => boolean) {\n    super(destination);\n    (this.destination as Subscription).add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, this)));\n  }\n\n  protected _next(value: T): void {\n    if (this._oneComplete && this._b.length === 0) {\n      this.emit(false);\n    } else {\n      this._a.push(value);\n      this.checkValues();\n    }\n  }\n\n  public _complete(): void {\n    if (this._oneComplete) {\n      this.emit(this._a.length === 0 && this._b.length === 0);\n    } else {\n      this._oneComplete = true;\n    }\n    this.unsubscribe();\n  }\n\n  checkValues() {\n    const { _a, _b, comparator } = this;\n    while (_a.length > 0 && _b.length > 0) {\n      let a = _a.shift();\n      let b = _b.shift();\n      let areEqual = false;\n      try {\n        areEqual = comparator ? comparator(a, b) : a === b;\n      } catch (e) {\n        this.destination.error(e);\n      }\n      if (!areEqual) {\n        this.emit(false);\n      }\n    }\n  }\n\n  emit(value: boolean) {\n    const { destination } = this;\n    destination.next(value);\n    destination.complete();\n  }\n\n  nextB(value: T) {\n    if (this._oneComplete && this._a.length === 0) {\n      this.emit(false);\n    } else {\n      this._b.push(value);\n      this.checkValues();\n    }\n  }\n\n  completeB() {\n    if (this._oneComplete) {\n      this.emit(this._a.length === 0 && this._b.length === 0);\n    } else {\n      this._oneComplete = true;\n    }\n  }\n}\n\nclass SequenceEqualCompareToSubscriber<T, R> extends Subscriber<T> {\n  constructor(destination: Observer<R>, private parent: SequenceEqualSubscriber<T, R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.parent.nextB(value);\n  }\n\n  protected _error(err: any): void {\n    this.parent.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.parent.completeB();\n    this.unsubscribe();\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}