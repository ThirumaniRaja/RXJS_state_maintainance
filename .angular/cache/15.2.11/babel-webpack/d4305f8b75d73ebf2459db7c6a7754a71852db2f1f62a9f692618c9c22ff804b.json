{"ast":null,"code":"import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nexport function scheduleIterable(input, scheduler) {\n  if (!input) {\n    throw new Error('Iterable cannot be null');\n  }\n  return new Observable(subscriber => {\n    const sub = new Subscription();\n    let iterator;\n    sub.add(() => {\n      if (iterator && typeof iterator.return === 'function') {\n        iterator.return();\n      }\n    });\n    sub.add(scheduler.schedule(() => {\n      iterator = input[Symbol_iterator]();\n      sub.add(scheduler.schedule(function () {\n        if (subscriber.closed) {\n          return;\n        }\n        let value;\n        let done;\n        try {\n          const result = iterator.next();\n          value = result.value;\n          done = result.done;\n        } catch (err) {\n          subscriber.error(err);\n          return;\n        }\n        if (done) {\n          subscriber.complete();\n        } else {\n          subscriber.next(value);\n          this.schedule();\n        }\n      }));\n    }));\n    return sub;\n  });\n}","map":{"version":3,"names":["Observable","Subscription","iterator","Symbol_iterator","scheduleIterable","input","scheduler","Error","subscriber","sub","add","return","schedule","closed","value","done","result","next","err","error","complete"],"sources":["C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\node_modules\\rxjs\\src\\internal\\scheduled\\scheduleIterable.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { Subscription } from '../Subscription';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\n\nexport function scheduleIterable<T>(input: Iterable<T>, scheduler: SchedulerLike) {\n  if (!input) {\n    throw new Error('Iterable cannot be null');\n  }\n  return new Observable<T>(subscriber => {\n    const sub = new Subscription();\n    let iterator: Iterator<T>;\n    sub.add(() => {\n      // Finalize generators\n      if (iterator && typeof iterator.return === 'function') {\n        iterator.return();\n      }\n    });\n    sub.add(scheduler.schedule(() => {\n      iterator = input[Symbol_iterator]();\n      sub.add(scheduler.schedule(function () {\n        if (subscriber.closed) {\n          return;\n        }\n        let value: T;\n        let done: boolean;\n        try {\n          const result = iterator.next();\n          value = result.value;\n          done = result.done;\n        } catch (err) {\n          subscriber.error(err);\n          return;\n        }\n        if (done) {\n          subscriber.complete();\n        } else {\n          subscriber.next(value);\n          this.schedule();\n        }\n      }));\n    }));\n    return sub;\n  });\n}\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,eAAe;AAE1C,SAASC,YAAY,QAAQ,iBAAiB;AAC9C,SAASC,QAAQ,IAAIC,eAAe,QAAQ,oBAAoB;AAEhE,OAAM,SAAUC,gBAAgBA,CAAIC,KAAkB,EAAEC,SAAwB;EAC9E,IAAI,CAACD,KAAK,EAAE;IACV,MAAM,IAAIE,KAAK,CAAC,yBAAyB,CAAC;;EAE5C,OAAO,IAAIP,UAAU,CAAIQ,UAAU,IAAG;IACpC,MAAMC,GAAG,GAAG,IAAIR,YAAY,EAAE;IAC9B,IAAIC,QAAqB;IACzBO,GAAG,CAACC,GAAG,CAAC,MAAK;MAEX,IAAIR,QAAQ,IAAI,OAAOA,QAAQ,CAACS,MAAM,KAAK,UAAU,EAAE;QACrDT,QAAQ,CAACS,MAAM,EAAE;;IAErB,CAAC,CAAC;IACFF,GAAG,CAACC,GAAG,CAACJ,SAAS,CAACM,QAAQ,CAAC,MAAK;MAC9BV,QAAQ,GAAGG,KAAK,CAACF,eAAe,CAAC,EAAE;MACnCM,GAAG,CAACC,GAAG,CAACJ,SAAS,CAACM,QAAQ,CAAC;QACzB,IAAIJ,UAAU,CAACK,MAAM,EAAE;UACrB;;QAEF,IAAIC,KAAQ;QACZ,IAAIC,IAAa;QACjB,IAAI;UACF,MAAMC,MAAM,GAAGd,QAAQ,CAACe,IAAI,EAAE;UAC9BH,KAAK,GAAGE,MAAM,CAACF,KAAK;UACpBC,IAAI,GAAGC,MAAM,CAACD,IAAI;SACnB,CAAC,OAAOG,GAAG,EAAE;UACZV,UAAU,CAACW,KAAK,CAACD,GAAG,CAAC;UACrB;;QAEF,IAAIH,IAAI,EAAE;UACRP,UAAU,CAACY,QAAQ,EAAE;SACtB,MAAM;UACLZ,UAAU,CAACS,IAAI,CAACH,KAAK,CAAC;UACtB,IAAI,CAACF,QAAQ,EAAE;;MAEnB,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IACH,OAAOH,GAAG;EACZ,CAAC,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}