{"ast":null,"code":"import { Subscriber } from '../Subscriber';\nimport { async } from '../scheduler/async';\nexport function sampleTime(period, scheduler = async) {\n  return source => source.lift(new SampleTimeOperator(period, scheduler));\n}\nclass SampleTimeOperator {\n  constructor(period, scheduler) {\n    this.period = period;\n    this.scheduler = scheduler;\n  }\n  call(subscriber, source) {\n    return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));\n  }\n}\nclass SampleTimeSubscriber extends Subscriber {\n  constructor(destination, period, scheduler) {\n    super(destination);\n    this.period = period;\n    this.scheduler = scheduler;\n    this.hasValue = false;\n    this.add(scheduler.schedule(dispatchNotification, period, {\n      subscriber: this,\n      period\n    }));\n  }\n  _next(value) {\n    this.lastValue = value;\n    this.hasValue = true;\n  }\n  notifyNext() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.lastValue);\n    }\n  }\n}\nfunction dispatchNotification(state) {\n  let {\n    subscriber,\n    period\n  } = state;\n  subscriber.notifyNext();\n  this.schedule(state, period);\n}","map":{"version":3,"names":["Subscriber","async","sampleTime","period","scheduler","source","lift","SampleTimeOperator","constructor","call","subscriber","subscribe","SampleTimeSubscriber","destination","hasValue","add","schedule","dispatchNotification","_next","value","lastValue","notifyNext","next","state"],"sources":["C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\node_modules\\rxjs\\src\\internal\\operators\\sampleTime.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { async } from '../scheduler/async';\nimport { MonoTypeOperatorFunction, SchedulerAction, SchedulerLike, TeardownLogic } from '../types';\n\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * ![](sampleTime.png)\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * ## Example\n * Every second, emit the most recent click at most once\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { sampleTime } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(sampleTime(1000));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nexport function sampleTime<T>(period: number, scheduler: SchedulerLike = async): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SampleTimeOperator(period, scheduler));\n}\n\nclass SampleTimeOperator<T> implements Operator<T, T> {\n  constructor(private period: number,\n              private scheduler: SchedulerLike) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleTimeSubscriber<T> extends Subscriber<T> {\n  lastValue: T;\n  hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private period: number,\n              private scheduler: SchedulerLike) {\n    super(destination);\n    this.add(scheduler.schedule(dispatchNotification, period, { subscriber: this, period }));\n  }\n\n  protected _next(value: T) {\n    this.lastValue = value;\n    this.hasValue = true;\n  }\n\n  notifyNext() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.lastValue);\n    }\n  }\n}\n\nfunction dispatchNotification<T>(this: SchedulerAction<any>, state: any) {\n  let { subscriber, period } = state;\n  subscriber.notifyNext();\n  this.schedule(state, period);\n}\n"],"mappings":"AAEA,SAASA,UAAU,QAAQ,eAAe;AAC1C,SAASC,KAAK,QAAQ,oBAAoB;AA6C1C,OAAM,SAAUC,UAAUA,CAAIC,MAAc,EAAEC,SAAA,GAA2BH,KAAK;EAC5E,OAAQI,MAAqB,IAAKA,MAAM,CAACC,IAAI,CAAC,IAAIC,kBAAkB,CAACJ,MAAM,EAAEC,SAAS,CAAC,CAAC;AAC1F;AAEA,MAAMG,kBAAkB;EACtBC,YAAoBL,MAAc,EACdC,SAAwB;IADxB,KAAAD,MAAM,GAANA,MAAM;IACN,KAAAC,SAAS,GAATA,SAAS;EAC7B;EAEAK,IAAIA,CAACC,UAAyB,EAAEL,MAAW;IACzC,OAAOA,MAAM,CAACM,SAAS,CAAC,IAAIC,oBAAoB,CAACF,UAAU,EAAE,IAAI,CAACP,MAAM,EAAE,IAAI,CAACC,SAAS,CAAC,CAAC;EAC5F;;AAQF,MAAMQ,oBAAwB,SAAQZ,UAAa;EAIjDQ,YAAYK,WAA0B,EAClBV,MAAc,EACdC,SAAwB;IAC1C,KAAK,CAACS,WAAW,CAAC;IAFA,KAAAV,MAAM,GAANA,MAAM;IACN,KAAAC,SAAS,GAATA,SAAS;IAJ7B,KAAAU,QAAQ,GAAY,KAAK;IAMvB,IAAI,CAACC,GAAG,CAACX,SAAS,CAACY,QAAQ,CAACC,oBAAoB,EAAEd,MAAM,EAAE;MAAEO,UAAU,EAAE,IAAI;MAAEP;IAAM,CAAE,CAAC,CAAC;EAC1F;EAEUe,KAAKA,CAACC,KAAQ;IACtB,IAAI,CAACC,SAAS,GAAGD,KAAK;IACtB,IAAI,CAACL,QAAQ,GAAG,IAAI;EACtB;EAEAO,UAAUA,CAAA;IACR,IAAI,IAAI,CAACP,QAAQ,EAAE;MACjB,IAAI,CAACA,QAAQ,GAAG,KAAK;MACrB,IAAI,CAACD,WAAW,CAACS,IAAI,CAAC,IAAI,CAACF,SAAS,CAAC;;EAEzC;;AAGF,SAASH,oBAAoBA,CAAgCM,KAAU;EACrE,IAAI;IAAEb,UAAU;IAAEP;EAAM,CAAE,GAAGoB,KAAK;EAClCb,UAAU,CAACW,UAAU,EAAE;EACvB,IAAI,CAACL,QAAQ,CAACO,KAAK,EAAEpB,MAAM,CAAC;AAC9B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}