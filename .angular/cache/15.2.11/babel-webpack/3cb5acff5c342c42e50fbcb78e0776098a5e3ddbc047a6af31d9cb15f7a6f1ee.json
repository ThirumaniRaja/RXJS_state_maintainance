{"ast":null,"code":"import { Subscriber } from '../Subscriber';\nexport function takeWhile(predicate, inclusive = false) {\n  return source => source.lift(new TakeWhileOperator(predicate, inclusive));\n}\nclass TakeWhileOperator {\n  constructor(predicate, inclusive) {\n    this.predicate = predicate;\n    this.inclusive = inclusive;\n  }\n  call(subscriber, source) {\n    return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate, this.inclusive));\n  }\n}\nclass TakeWhileSubscriber extends Subscriber {\n  constructor(destination, predicate, inclusive) {\n    super(destination);\n    this.predicate = predicate;\n    this.inclusive = inclusive;\n    this.index = 0;\n  }\n  _next(value) {\n    const destination = this.destination;\n    let result;\n    try {\n      result = this.predicate(value, this.index++);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this.nextOrComplete(value, result);\n  }\n  nextOrComplete(value, predicateResult) {\n    const destination = this.destination;\n    if (Boolean(predicateResult)) {\n      destination.next(value);\n    } else {\n      if (this.inclusive) {\n        destination.next(value);\n      }\n      destination.complete();\n    }\n  }\n}","map":{"version":3,"names":["Subscriber","takeWhile","predicate","inclusive","source","lift","TakeWhileOperator","constructor","call","subscriber","subscribe","TakeWhileSubscriber","destination","index","_next","value","result","err","error","nextOrComplete","predicateResult","Boolean","next","complete"],"sources":["C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\node_modules\\rxjs\\src\\internal\\operators\\takeWhile.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\nexport function takeWhile<T, S extends T>(predicate: (value: T, index: number) => value is S): OperatorFunction<T, S>;\nexport function takeWhile<T, S extends T>(predicate: (value: T, index: number) => value is S, inclusive: false): OperatorFunction<T, S>;\nexport function takeWhile<T>(predicate: (value: T, index: number) => boolean, inclusive?: boolean): MonoTypeOperatorFunction<T>;\n\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * ![](takeWhile.png)\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * ## Example\n * Emit click events only while the clientX property is greater than 200\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { takeWhile } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(takeWhile(ev => ev.clientX > 200));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @param {boolean} inclusive When set to `true` the value that caused\n * `predicate` to return `false` will also be emitted.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nexport function takeWhile<T>(\n    predicate: (value: T, index: number) => boolean,\n    inclusive = false): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) =>\n             source.lift(new TakeWhileOperator(predicate, inclusive));\n}\n\nclass TakeWhileOperator<T> implements Operator<T, T> {\n  constructor(\n      private predicate: (value: T, index: number) => boolean,\n      private inclusive: boolean) {}\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(\n        new TakeWhileSubscriber(subscriber, this.predicate, this.inclusive));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeWhileSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(\n      destination: Subscriber<T>,\n      private predicate: (value: T, index: number) => boolean,\n      private inclusive: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    let result: boolean;\n    try {\n      result = this.predicate(value, this.index++);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this.nextOrComplete(value, result);\n  }\n\n  private nextOrComplete(value: T, predicateResult: boolean): void {\n    const destination = this.destination;\n    if (Boolean(predicateResult)) {\n      destination.next(value);\n    } else {\n      if (this.inclusive) {\n        destination.next(value);\n      }\n      destination.complete();\n    }\n  }\n}\n"],"mappings":"AAEA,SAASA,UAAU,QAAQ,eAAe;AAmD1C,OAAM,SAAUC,SAASA,CACrBC,SAA+C,EAC/CC,SAAS,GAAG,KAAK;EACnB,OAAQC,MAAqB,IAClBA,MAAM,CAACC,IAAI,CAAC,IAAIC,iBAAiB,CAACJ,SAAS,EAAEC,SAAS,CAAC,CAAC;AACrE;AAEA,MAAMG,iBAAiB;EACrBC,YACYL,SAA+C,EAC/CC,SAAkB;IADlB,KAAAD,SAAS,GAATA,SAAS;IACT,KAAAC,SAAS,GAATA,SAAS;EAAY;EAEjCK,IAAIA,CAACC,UAAyB,EAAEL,MAAW;IACzC,OAAOA,MAAM,CAACM,SAAS,CACnB,IAAIC,mBAAmB,CAACF,UAAU,EAAE,IAAI,CAACP,SAAS,EAAE,IAAI,CAACC,SAAS,CAAC,CAAC;EAC1E;;AAQF,MAAMQ,mBAAuB,SAAQX,UAAa;EAGhDO,YACIK,WAA0B,EAClBV,SAA+C,EAC/CC,SAAkB;IAC5B,KAAK,CAACS,WAAW,CAAC;IAFR,KAAAV,SAAS,GAATA,SAAS;IACT,KAAAC,SAAS,GAATA,SAAS;IALb,KAAAU,KAAK,GAAW,CAAC;EAOzB;EAEUC,KAAKA,CAACC,KAAQ;IACtB,MAAMH,WAAW,GAAG,IAAI,CAACA,WAAW;IACpC,IAAII,MAAe;IACnB,IAAI;MACFA,MAAM,GAAG,IAAI,CAACd,SAAS,CAACa,KAAK,EAAE,IAAI,CAACF,KAAK,EAAE,CAAC;KAC7C,CAAC,OAAOI,GAAG,EAAE;MACZL,WAAW,CAACM,KAAK,CAACD,GAAG,CAAC;MACtB;;IAEF,IAAI,CAACE,cAAc,CAACJ,KAAK,EAAEC,MAAM,CAAC;EACpC;EAEQG,cAAcA,CAACJ,KAAQ,EAAEK,eAAwB;IACvD,MAAMR,WAAW,GAAG,IAAI,CAACA,WAAW;IACpC,IAAIS,OAAO,CAACD,eAAe,CAAC,EAAE;MAC5BR,WAAW,CAACU,IAAI,CAACP,KAAK,CAAC;KACxB,MAAM;MACL,IAAI,IAAI,CAACZ,SAAS,EAAE;QAClBS,WAAW,CAACU,IAAI,CAACP,KAAK,CAAC;;MAEzBH,WAAW,CAACW,QAAQ,EAAE;;EAE1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}