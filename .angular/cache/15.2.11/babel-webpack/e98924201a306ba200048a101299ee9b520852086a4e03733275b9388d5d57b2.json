{"ast":null,"code":"import { Subject } from '../Subject';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function retryWhen(notifier) {\n  return source => source.lift(new RetryWhenOperator(notifier, source));\n}\nclass RetryWhenOperator {\n  constructor(notifier, source) {\n    this.notifier = notifier;\n    this.source = source;\n  }\n  call(subscriber, source) {\n    return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n  }\n}\nclass RetryWhenSubscriber extends SimpleOuterSubscriber {\n  constructor(destination, notifier, source) {\n    super(destination);\n    this.notifier = notifier;\n    this.source = source;\n  }\n  error(err) {\n    if (!this.isStopped) {\n      let errors = this.errors;\n      let retries = this.retries;\n      let retriesSubscription = this.retriesSubscription;\n      if (!retries) {\n        errors = new Subject();\n        try {\n          const {\n            notifier\n          } = this;\n          retries = notifier(errors);\n        } catch (e) {\n          return super.error(e);\n        }\n        retriesSubscription = innerSubscribe(retries, new SimpleInnerSubscriber(this));\n      } else {\n        this.errors = undefined;\n        this.retriesSubscription = undefined;\n      }\n      this._unsubscribeAndRecycle();\n      this.errors = errors;\n      this.retries = retries;\n      this.retriesSubscription = retriesSubscription;\n      errors.next(err);\n    }\n  }\n  _unsubscribe() {\n    const {\n      errors,\n      retriesSubscription\n    } = this;\n    if (errors) {\n      errors.unsubscribe();\n      this.errors = undefined;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = undefined;\n    }\n    this.retries = undefined;\n  }\n  notifyNext() {\n    const {\n      _unsubscribe\n    } = this;\n    this._unsubscribe = null;\n    this._unsubscribeAndRecycle();\n    this._unsubscribe = _unsubscribe;\n    this.source.subscribe(this);\n  }\n}","map":{"version":3,"names":["Subject","SimpleOuterSubscriber","innerSubscribe","SimpleInnerSubscriber","retryWhen","notifier","source","lift","RetryWhenOperator","constructor","call","subscriber","subscribe","RetryWhenSubscriber","destination","error","err","isStopped","errors","retries","retriesSubscription","e","undefined","_unsubscribeAndRecycle","next","_unsubscribe","unsubscribe","notifyNext"],"sources":["C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\node_modules\\rxjs\\src\\internal\\operators\\retryWhen.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\n\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * ![](retryWhen.png)\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nexport function retryWhen<T>(notifier: (errors: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RetryWhenOperator(notifier, source));\n}\n\nclass RetryWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (errors: Observable<any>) => Observable<any>,\n              protected source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetryWhenSubscriber<T, R> extends SimpleOuterSubscriber<T, R> {\n\n  private errors?: Subject<any>;\n  private retries?: Observable<any>;\n  private retriesSubscription?: Subscription;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (errors: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  error(err: any) {\n    if (!this.isStopped) {\n\n      let errors = this.errors;\n      let retries: any = this.retries;\n      let retriesSubscription = this.retriesSubscription;\n\n      if (!retries) {\n        errors = new Subject();\n        try {\n          const { notifier } = this;\n          retries = notifier(errors);\n        } catch (e) {\n          return super.error(e);\n        }\n        retriesSubscription = innerSubscribe(retries, new SimpleInnerSubscriber(this));\n      } else {\n        this.errors = undefined;\n        this.retriesSubscription = undefined;\n      }\n\n      this._unsubscribeAndRecycle();\n\n      this.errors = errors;\n      this.retries = retries;\n      this.retriesSubscription = retriesSubscription;\n\n      errors!.next(err);\n    }\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribe() {\n    const { errors, retriesSubscription } = this;\n    if (errors) {\n      errors.unsubscribe();\n      this.errors = undefined;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = undefined;\n    }\n    this.retries = undefined;\n  }\n\n  notifyNext(): void {\n    const { _unsubscribe } = this;\n\n    this._unsubscribe = null!;\n    this._unsubscribeAndRecycle();\n    this._unsubscribe = _unsubscribe;\n\n    this.source.subscribe(this);\n  }\n}\n"],"mappings":"AAGA,SAASA,OAAO,QAAQ,YAAY;AAIpC,SAASC,qBAAqB,EAAEC,cAAc,EAAEC,qBAAqB,QAAQ,mBAAmB;AAgBhG,OAAM,SAAUC,SAASA,CAAIC,QAAsD;EACjF,OAAQC,MAAqB,IAAKA,MAAM,CAACC,IAAI,CAAC,IAAIC,iBAAiB,CAACH,QAAQ,EAAEC,MAAM,CAAC,CAAC;AACxF;AAEA,MAAME,iBAAiB;EACrBC,YAAsBJ,QAAsD,EACtDC,MAAqB;IADrB,KAAAD,QAAQ,GAARA,QAAQ;IACR,KAAAC,MAAM,GAANA,MAAM;EAC5B;EAEAI,IAAIA,CAACC,UAAyB,EAAEL,MAAW;IACzC,OAAOA,MAAM,CAACM,SAAS,CAAC,IAAIC,mBAAmB,CAACF,UAAU,EAAE,IAAI,CAACN,QAAQ,EAAE,IAAI,CAACC,MAAM,CAAC,CAAC;EAC1F;;AAQF,MAAMO,mBAA0B,SAAQZ,qBAA2B;EAMjEQ,YAAYK,WAA0B,EAClBT,QAAsD,EACtDC,MAAqB;IACvC,KAAK,CAACQ,WAAW,CAAC;IAFA,KAAAT,QAAQ,GAARA,QAAQ;IACR,KAAAC,MAAM,GAANA,MAAM;EAE1B;EAEAS,KAAKA,CAACC,GAAQ;IACZ,IAAI,CAAC,IAAI,CAACC,SAAS,EAAE;MAEnB,IAAIC,MAAM,GAAG,IAAI,CAACA,MAAM;MACxB,IAAIC,OAAO,GAAQ,IAAI,CAACA,OAAO;MAC/B,IAAIC,mBAAmB,GAAG,IAAI,CAACA,mBAAmB;MAElD,IAAI,CAACD,OAAO,EAAE;QACZD,MAAM,GAAG,IAAIlB,OAAO,EAAE;QACtB,IAAI;UACF,MAAM;YAAEK;UAAQ,CAAE,GAAG,IAAI;UACzBc,OAAO,GAAGd,QAAQ,CAACa,MAAM,CAAC;SAC3B,CAAC,OAAOG,CAAC,EAAE;UACV,OAAO,KAAK,CAACN,KAAK,CAACM,CAAC,CAAC;;QAEvBD,mBAAmB,GAAGlB,cAAc,CAACiB,OAAO,EAAE,IAAIhB,qBAAqB,CAAC,IAAI,CAAC,CAAC;OAC/E,MAAM;QACL,IAAI,CAACe,MAAM,GAAGI,SAAS;QACvB,IAAI,CAACF,mBAAmB,GAAGE,SAAS;;MAGtC,IAAI,CAACC,sBAAsB,EAAE;MAE7B,IAAI,CAACL,MAAM,GAAGA,MAAM;MACpB,IAAI,CAACC,OAAO,GAAGA,OAAO;MACtB,IAAI,CAACC,mBAAmB,GAAGA,mBAAmB;MAE9CF,MAAO,CAACM,IAAI,CAACR,GAAG,CAAC;;EAErB;EAGAS,YAAYA,CAAA;IACV,MAAM;MAAEP,MAAM;MAAEE;IAAmB,CAAE,GAAG,IAAI;IAC5C,IAAIF,MAAM,EAAE;MACVA,MAAM,CAACQ,WAAW,EAAE;MACpB,IAAI,CAACR,MAAM,GAAGI,SAAS;;IAEzB,IAAIF,mBAAmB,EAAE;MACvBA,mBAAmB,CAACM,WAAW,EAAE;MACjC,IAAI,CAACN,mBAAmB,GAAGE,SAAS;;IAEtC,IAAI,CAACH,OAAO,GAAGG,SAAS;EAC1B;EAEAK,UAAUA,CAAA;IACR,MAAM;MAAEF;IAAY,CAAE,GAAG,IAAI;IAE7B,IAAI,CAACA,YAAY,GAAG,IAAK;IACzB,IAAI,CAACF,sBAAsB,EAAE;IAC7B,IAAI,CAACE,YAAY,GAAGA,YAAY;IAEhC,IAAI,CAACnB,MAAM,CAACM,SAAS,CAAC,IAAI,CAAC;EAC7B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}