{"ast":null,"code":"import { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function audit(durationSelector) {\n  return function auditOperatorFunction(source) {\n    return source.lift(new AuditOperator(durationSelector));\n  };\n}\nclass AuditOperator {\n  constructor(durationSelector) {\n    this.durationSelector = durationSelector;\n  }\n  call(subscriber, source) {\n    return source.subscribe(new AuditSubscriber(subscriber, this.durationSelector));\n  }\n}\nclass AuditSubscriber extends SimpleOuterSubscriber {\n  constructor(destination, durationSelector) {\n    super(destination);\n    this.durationSelector = durationSelector;\n    this.hasValue = false;\n  }\n  _next(value) {\n    this.value = value;\n    this.hasValue = true;\n    if (!this.throttled) {\n      let duration;\n      try {\n        const {\n          durationSelector\n        } = this;\n        duration = durationSelector(value);\n      } catch (err) {\n        return this.destination.error(err);\n      }\n      const innerSubscription = innerSubscribe(duration, new SimpleInnerSubscriber(this));\n      if (!innerSubscription || innerSubscription.closed) {\n        this.clearThrottle();\n      } else {\n        this.add(this.throttled = innerSubscription);\n      }\n    }\n  }\n  clearThrottle() {\n    const {\n      value,\n      hasValue,\n      throttled\n    } = this;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = undefined;\n      throttled.unsubscribe();\n    }\n    if (hasValue) {\n      this.value = undefined;\n      this.hasValue = false;\n      this.destination.next(value);\n    }\n  }\n  notifyNext() {\n    this.clearThrottle();\n  }\n  notifyComplete() {\n    this.clearThrottle();\n  }\n}","map":{"version":3,"names":["SimpleOuterSubscriber","innerSubscribe","SimpleInnerSubscriber","audit","durationSelector","auditOperatorFunction","source","lift","AuditOperator","constructor","call","subscriber","subscribe","AuditSubscriber","destination","hasValue","_next","value","throttled","duration","err","error","innerSubscription","closed","clearThrottle","add","remove","undefined","unsubscribe","next","notifyNext","notifyComplete"],"sources":["C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\node_modules\\rxjs\\src\\internal\\operators\\audit.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { MonoTypeOperatorFunction, SubscribableOrPromise, TeardownLogic } from '../types';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\n\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * ![](audit.png)\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * ## Example\n *\n * Emit clicks at a rate of at most one click per second\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { audit } from 'rxjs/operators'\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(audit(ev => interval(1000)));\n * result.subscribe(x => console.log(x));\n * ```\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nexport function audit<T>(durationSelector: (value: T) => SubscribableOrPromise<any>): MonoTypeOperatorFunction<T> {\n  return function auditOperatorFunction(source: Observable<T>) {\n    return source.lift(new AuditOperator(durationSelector));\n  };\n}\n\nclass AuditOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new AuditSubscriber<T, T>(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass AuditSubscriber<T, R> extends SimpleOuterSubscriber<T, R> {\n\n  private value?: T;\n  private hasValue: boolean = false;\n  private throttled?: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.value = value;\n    this.hasValue = true;\n    if (!this.throttled) {\n      let duration;\n      try {\n        const { durationSelector } = this;\n        duration = durationSelector(value);\n      } catch (err) {\n        return this.destination.error!(err);\n      }\n      const innerSubscription = innerSubscribe(duration, new SimpleInnerSubscriber(this));\n      if (!innerSubscription || innerSubscription.closed) {\n        this.clearThrottle();\n      } else {\n        this.add(this.throttled = innerSubscription);\n      }\n    }\n  }\n\n  clearThrottle() {\n    const { value, hasValue, throttled } = this;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = undefined;\n      throttled.unsubscribe();\n    }\n    if (hasValue) {\n      this.value = undefined;\n      this.hasValue = false;\n      this.destination.next!(value);\n    }\n  }\n\n  notifyNext(): void {\n    this.clearThrottle();\n  }\n\n  notifyComplete(): void {\n    this.clearThrottle();\n  }\n}\n"],"mappings":"AAKA,SAASA,qBAAqB,EAAEC,cAAc,EAAEC,qBAAqB,QAAQ,mBAAmB;AAgDhG,OAAM,SAAUC,KAAKA,CAAIC,gBAA0D;EACjF,OAAO,SAASC,qBAAqBA,CAACC,MAAqB;IACzD,OAAOA,MAAM,CAACC,IAAI,CAAC,IAAIC,aAAa,CAACJ,gBAAgB,CAAC,CAAC;EACzD,CAAC;AACH;AAEA,MAAMI,aAAa;EACjBC,YAAoBL,gBAA0D;IAA1D,KAAAA,gBAAgB,GAAhBA,gBAAgB;EACpC;EAEAM,IAAIA,CAACC,UAAyB,EAAEL,MAAW;IACzC,OAAOA,MAAM,CAACM,SAAS,CAAC,IAAIC,eAAe,CAAOF,UAAU,EAAE,IAAI,CAACP,gBAAgB,CAAC,CAAC;EACvF;;AAQF,MAAMS,eAAsB,SAAQb,qBAA2B;EAM7DS,YAAYK,WAA0B,EAClBV,gBAA0D;IAC5E,KAAK,CAACU,WAAW,CAAC;IADA,KAAAV,gBAAgB,GAAhBA,gBAAgB;IAJ5B,KAAAW,QAAQ,GAAY,KAAK;EAMjC;EAEUC,KAAKA,CAACC,KAAQ;IACtB,IAAI,CAACA,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACF,QAAQ,GAAG,IAAI;IACpB,IAAI,CAAC,IAAI,CAACG,SAAS,EAAE;MACnB,IAAIC,QAAQ;MACZ,IAAI;QACF,MAAM;UAAEf;QAAgB,CAAE,GAAG,IAAI;QACjCe,QAAQ,GAAGf,gBAAgB,CAACa,KAAK,CAAC;OACnC,CAAC,OAAOG,GAAG,EAAE;QACZ,OAAO,IAAI,CAACN,WAAW,CAACO,KAAM,CAACD,GAAG,CAAC;;MAErC,MAAME,iBAAiB,GAAGrB,cAAc,CAACkB,QAAQ,EAAE,IAAIjB,qBAAqB,CAAC,IAAI,CAAC,CAAC;MACnF,IAAI,CAACoB,iBAAiB,IAAIA,iBAAiB,CAACC,MAAM,EAAE;QAClD,IAAI,CAACC,aAAa,EAAE;OACrB,MAAM;QACL,IAAI,CAACC,GAAG,CAAC,IAAI,CAACP,SAAS,GAAGI,iBAAiB,CAAC;;;EAGlD;EAEAE,aAAaA,CAAA;IACX,MAAM;MAAEP,KAAK;MAAEF,QAAQ;MAAEG;IAAS,CAAE,GAAG,IAAI;IAC3C,IAAIA,SAAS,EAAE;MACb,IAAI,CAACQ,MAAM,CAACR,SAAS,CAAC;MACtB,IAAI,CAACA,SAAS,GAAGS,SAAS;MAC1BT,SAAS,CAACU,WAAW,EAAE;;IAEzB,IAAIb,QAAQ,EAAE;MACZ,IAAI,CAACE,KAAK,GAAGU,SAAS;MACtB,IAAI,CAACZ,QAAQ,GAAG,KAAK;MACrB,IAAI,CAACD,WAAW,CAACe,IAAK,CAACZ,KAAK,CAAC;;EAEjC;EAEAa,UAAUA,CAAA;IACR,IAAI,CAACN,aAAa,EAAE;EACtB;EAEAO,cAAcA,CAAA;IACZ,IAAI,CAACP,aAAa,EAAE;EACtB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}