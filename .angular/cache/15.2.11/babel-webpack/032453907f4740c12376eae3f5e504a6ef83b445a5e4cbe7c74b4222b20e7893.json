{"ast":null,"code":"import { Subscriber } from '../Subscriber';\nexport function count(predicate) {\n  return source => source.lift(new CountOperator(predicate, source));\n}\nclass CountOperator {\n  constructor(predicate, source) {\n    this.predicate = predicate;\n    this.source = source;\n  }\n  call(subscriber, source) {\n    return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n  }\n}\nclass CountSubscriber extends Subscriber {\n  constructor(destination, predicate, source) {\n    super(destination);\n    this.predicate = predicate;\n    this.source = source;\n    this.count = 0;\n    this.index = 0;\n  }\n  _next(value) {\n    if (this.predicate) {\n      this._tryPredicate(value);\n    } else {\n      this.count++;\n    }\n  }\n  _tryPredicate(value) {\n    let result;\n    try {\n      result = this.predicate(value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this.count++;\n    }\n  }\n  _complete() {\n    this.destination.next(this.count);\n    this.destination.complete();\n  }\n}","map":{"version":3,"names":["Subscriber","count","predicate","source","lift","CountOperator","constructor","call","subscriber","subscribe","CountSubscriber","destination","index","_next","value","_tryPredicate","result","err","error","_complete","next","complete"],"sources":["C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\node_modules\\rxjs\\src\\internal\\operators\\count.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Observer, OperatorFunction } from '../types';\nimport { Subscriber } from '../Subscriber';\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * ![](count.png)\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting a value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * ## Examples\n *\n * Counts how many seconds have passed before the first click happened\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { count, takeUntil } from 'rxjs/operators';\n *\n * const seconds = interval(1000);\n * const clicks = fromEvent(document, 'click');\n * const secondsBeforeClick = seconds.pipe(takeUntil(clicks));\n * const result = secondsBeforeClick.pipe(count());\n * result.subscribe(x => console.log(x));\n * ```\n *\n * Counts how many odd numbers are there between 1 and 7\n * ```ts\n * import { range } from 'rxjs';\n * import { count } from 'rxjs/operators';\n *\n * const numbers = range(1, 7);\n * const result = numbers.pipe(count(i => i % 2 === 1));\n * result.subscribe(x => console.log(x));\n * // Results in:\n * // 4\n * ```\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\n\nexport function count<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): OperatorFunction<T, number> {\n  return (source: Observable<T>) => source.lift(new CountOperator(predicate, source));\n}\n\nclass CountOperator<T> implements Operator<T, number> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<number>, source: any): any {\n    return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CountSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n  private index: number = 0;\n\n  constructor(destination: Observer<number>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.predicate) {\n      this._tryPredicate(value);\n    } else {\n      this.count++;\n    }\n  }\n\n  private _tryPredicate(value: T) {\n    let result: any;\n\n    try {\n      result = this.predicate(value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (result) {\n      this.count++;\n    }\n  }\n\n  protected _complete(): void {\n    this.destination.next(this.count);\n    this.destination.complete();\n  }\n}\n"],"mappings":"AAGA,SAASA,UAAU,QAAQ,eAAe;AA6D1C,OAAM,SAAUC,KAAKA,CAAIC,SAAuE;EAC9F,OAAQC,MAAqB,IAAKA,MAAM,CAACC,IAAI,CAAC,IAAIC,aAAa,CAACH,SAAS,EAAEC,MAAM,CAAC,CAAC;AACrF;AAEA,MAAME,aAAa;EACjBC,YAAoBJ,SAAuE,EACvEC,MAAsB;IADtB,KAAAD,SAAS,GAATA,SAAS;IACT,KAAAC,MAAM,GAANA,MAAM;EAC1B;EAEAI,IAAIA,CAACC,UAA8B,EAAEL,MAAW;IAC9C,OAAOA,MAAM,CAACM,SAAS,CAAC,IAAIC,eAAe,CAACF,UAAU,EAAE,IAAI,CAACN,SAAS,EAAE,IAAI,CAACC,MAAM,CAAC,CAAC;EACvF;;AAQF,MAAMO,eAAmB,SAAQV,UAAa;EAI5CM,YAAYK,WAA6B,EACrBT,SAAuE,EACvEC,MAAsB;IACxC,KAAK,CAACQ,WAAW,CAAC;IAFA,KAAAT,SAAS,GAATA,SAAS;IACT,KAAAC,MAAM,GAANA,MAAM;IALlB,KAAAF,KAAK,GAAW,CAAC;IACjB,KAAAW,KAAK,GAAW,CAAC;EAMzB;EAEUC,KAAKA,CAACC,KAAQ;IACtB,IAAI,IAAI,CAACZ,SAAS,EAAE;MAClB,IAAI,CAACa,aAAa,CAACD,KAAK,CAAC;KAC1B,MAAM;MACL,IAAI,CAACb,KAAK,EAAE;;EAEhB;EAEQc,aAAaA,CAACD,KAAQ;IAC5B,IAAIE,MAAW;IAEf,IAAI;MACFA,MAAM,GAAG,IAAI,CAACd,SAAS,CAACY,KAAK,EAAE,IAAI,CAACF,KAAK,EAAE,EAAE,IAAI,CAACT,MAAM,CAAC;KAC1D,CAAC,OAAOc,GAAG,EAAE;MACZ,IAAI,CAACN,WAAW,CAACO,KAAK,CAACD,GAAG,CAAC;MAC3B;;IAGF,IAAID,MAAM,EAAE;MACV,IAAI,CAACf,KAAK,EAAE;;EAEhB;EAEUkB,SAASA,CAAA;IACjB,IAAI,CAACR,WAAW,CAACS,IAAI,CAAC,IAAI,CAACnB,KAAK,CAAC;IACjC,IAAI,CAACU,WAAW,CAACU,QAAQ,EAAE;EAC7B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}