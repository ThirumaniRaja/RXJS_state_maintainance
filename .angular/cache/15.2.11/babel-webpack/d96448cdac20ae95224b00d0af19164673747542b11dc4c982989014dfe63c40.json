{"ast":null,"code":"import { Subscriber } from '../Subscriber';\nexport function every(predicate, thisArg) {\n  return source => source.lift(new EveryOperator(predicate, thisArg, source));\n}\nclass EveryOperator {\n  constructor(predicate, thisArg, source) {\n    this.predicate = predicate;\n    this.thisArg = thisArg;\n    this.source = source;\n  }\n  call(observer, source) {\n    return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n  }\n}\nclass EverySubscriber extends Subscriber {\n  constructor(destination, predicate, thisArg, source) {\n    super(destination);\n    this.predicate = predicate;\n    this.thisArg = thisArg;\n    this.source = source;\n    this.index = 0;\n    this.thisArg = thisArg || this;\n  }\n  notifyComplete(everyValueMatch) {\n    this.destination.next(everyValueMatch);\n    this.destination.complete();\n  }\n  _next(value) {\n    let result = false;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (!result) {\n      this.notifyComplete(false);\n    }\n  }\n  _complete() {\n    this.notifyComplete(true);\n  }\n}","map":{"version":3,"names":["Subscriber","every","predicate","thisArg","source","lift","EveryOperator","constructor","call","observer","subscribe","EverySubscriber","destination","index","notifyComplete","everyValueMatch","next","complete","_next","value","result","err","error","_complete"],"sources":["C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\node_modules\\rxjs\\src\\internal\\operators\\every.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Observer, OperatorFunction } from '../types';\n\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n *\n * ## Example\n * A simple example emitting true if all elements are less than 5, false otherwise\n * ```ts\n * import { of } from 'rxjs';\n * import { every } from 'rxjs/operators';\n *\n *  of(1, 2, 3, 4, 5, 6).pipe(\n *     every(x => x < 5),\n * )\n * .subscribe(x => console.log(x)); // -> false\n * ```\n *\n * @param {function} predicate A function for determining if an item meets a specified condition.\n * @param {any} [thisArg] Optional object to use for `this` in the callback.\n * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nexport function every<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         thisArg?: any): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new EveryOperator(predicate, thisArg, source));\n}\n\nclass EveryOperator<T> implements Operator<T, boolean> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass EverySubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Observer<boolean>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg: any,\n              private source?: Observable<T>) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  private notifyComplete(everyValueMatch: boolean): void {\n    this.destination.next(everyValueMatch);\n    this.destination.complete();\n  }\n\n  protected _next(value: T): void {\n    let result = false;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (!result) {\n      this.notifyComplete(false);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(true);\n  }\n}\n"],"mappings":"AAEA,SAASA,UAAU,QAAQ,eAAe;AAwB1C,OAAM,SAAUC,KAAKA,CAAIC,SAAsE,EACtEC,OAAa;EACpC,OAAQC,MAAqB,IAAKA,MAAM,CAACC,IAAI,CAAC,IAAIC,aAAa,CAACJ,SAAS,EAAEC,OAAO,EAAEC,MAAM,CAAC,CAAC;AAC9F;AAEA,MAAME,aAAa;EACjBC,YAAoBL,SAAsE,EACtEC,OAAa,EACbC,MAAsB;IAFtB,KAAAF,SAAS,GAATA,SAAS;IACT,KAAAC,OAAO,GAAPA,OAAO;IACP,KAAAC,MAAM,GAANA,MAAM;EAC1B;EAEAI,IAAIA,CAACC,QAA6B,EAAEL,MAAW;IAC7C,OAAOA,MAAM,CAACM,SAAS,CAAC,IAAIC,eAAe,CAACF,QAAQ,EAAE,IAAI,CAACP,SAAS,EAAE,IAAI,CAACC,OAAO,EAAE,IAAI,CAACC,MAAM,CAAC,CAAC;EACnG;;AAQF,MAAMO,eAAmB,SAAQX,UAAa;EAG5CO,YAAYK,WAA8B,EACtBV,SAAsE,EACtEC,OAAY,EACZC,MAAsB;IACxC,KAAK,CAACQ,WAAW,CAAC;IAHA,KAAAV,SAAS,GAATA,SAAS;IACT,KAAAC,OAAO,GAAPA,OAAO;IACP,KAAAC,MAAM,GAANA,MAAM;IALlB,KAAAS,KAAK,GAAW,CAAC;IAOvB,IAAI,CAACV,OAAO,GAAGA,OAAO,IAAI,IAAI;EAChC;EAEQW,cAAcA,CAACC,eAAwB;IAC7C,IAAI,CAACH,WAAW,CAACI,IAAI,CAACD,eAAe,CAAC;IACtC,IAAI,CAACH,WAAW,CAACK,QAAQ,EAAE;EAC7B;EAEUC,KAAKA,CAACC,KAAQ;IACtB,IAAIC,MAAM,GAAG,KAAK;IAClB,IAAI;MACFA,MAAM,GAAG,IAAI,CAAClB,SAAS,CAACM,IAAI,CAAC,IAAI,CAACL,OAAO,EAAEgB,KAAK,EAAE,IAAI,CAACN,KAAK,EAAE,EAAE,IAAI,CAACT,MAAM,CAAC;KAC7E,CAAC,OAAOiB,GAAG,EAAE;MACZ,IAAI,CAACT,WAAW,CAACU,KAAK,CAACD,GAAG,CAAC;MAC3B;;IAGF,IAAI,CAACD,MAAM,EAAE;MACX,IAAI,CAACN,cAAc,CAAC,KAAK,CAAC;;EAE9B;EAEUS,SAASA,CAAA;IACjB,IAAI,CAACT,cAAc,CAAC,IAAI,CAAC;EAC3B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}