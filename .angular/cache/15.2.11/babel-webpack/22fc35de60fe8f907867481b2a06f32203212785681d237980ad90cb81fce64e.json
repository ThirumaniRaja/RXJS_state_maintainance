{"ast":null,"code":"import { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function distinct(keySelector, flushes) {\n  return source => source.lift(new DistinctOperator(keySelector, flushes));\n}\nclass DistinctOperator {\n  constructor(keySelector, flushes) {\n    this.keySelector = keySelector;\n    this.flushes = flushes;\n  }\n  call(subscriber, source) {\n    return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));\n  }\n}\nexport class DistinctSubscriber extends SimpleOuterSubscriber {\n  constructor(destination, keySelector, flushes) {\n    super(destination);\n    this.keySelector = keySelector;\n    this.values = new Set();\n    if (flushes) {\n      this.add(innerSubscribe(flushes, new SimpleInnerSubscriber(this)));\n    }\n  }\n  notifyNext() {\n    this.values.clear();\n  }\n  notifyError(error) {\n    this._error(error);\n  }\n  _next(value) {\n    if (this.keySelector) {\n      this._useKeySelector(value);\n    } else {\n      this._finalizeNext(value, value);\n    }\n  }\n  _useKeySelector(value) {\n    let key;\n    const {\n      destination\n    } = this;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this._finalizeNext(key, value);\n  }\n  _finalizeNext(key, value) {\n    const {\n      values\n    } = this;\n    if (!values.has(key)) {\n      values.add(key);\n      this.destination.next(value);\n    }\n  }\n}","map":{"version":3,"names":["SimpleOuterSubscriber","innerSubscribe","SimpleInnerSubscriber","distinct","keySelector","flushes","source","lift","DistinctOperator","constructor","call","subscriber","subscribe","DistinctSubscriber","destination","values","Set","add","notifyNext","clear","notifyError","error","_error","_next","value","_useKeySelector","_finalizeNext","key","err","has","next"],"sources":["C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\node_modules\\rxjs\\src\\internal\\operators\\distinct.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * ## Examples\n * A simple example with numbers\n * ```ts\n * import { of } from 'rxjs';\n * import { distinct } from 'rxjs/operators';\n *\n * of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1).pipe(\n *     distinct(),\n *   )\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n * ```\n *\n * An example using a keySelector function\n * ```typescript\n * import { of } from 'rxjs';\n * import { distinct } from 'rxjs/operators';\n *\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'},\n *   ).pipe(\n *     distinct((p: Person) => p.name),\n *   )\n *   .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * ```\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nexport function distinct<T, K>(keySelector?: (value: T) => K,\n                               flushes?: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DistinctOperator(keySelector, flushes));\n}\n\nclass DistinctOperator<T, K> implements Operator<T, T> {\n  constructor(private keySelector?: (value: T) => K, private flushes?: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class DistinctSubscriber<T, K> extends SimpleOuterSubscriber<T, T> {\n  private values = new Set<K>();\n\n  constructor(destination: Subscriber<T>, private keySelector?: (value: T) => K, flushes?: Observable<any>) {\n    super(destination);\n\n    if (flushes) {\n      this.add(innerSubscribe(flushes, new SimpleInnerSubscriber(this)));\n    }\n  }\n\n  notifyNext(): void {\n    this.values.clear();\n  }\n\n  notifyError(error: any): void {\n    this._error(error);\n  }\n\n  protected _next(value: T): void {\n    if (this.keySelector) {\n      this._useKeySelector(value);\n    } else {\n      this._finalizeNext(value, value);\n    }\n  }\n\n  private _useKeySelector(value: T): void {\n    let key: K;\n    const { destination } = this;\n    try {\n      key = this.keySelector!(value);\n    } catch (err) {\n      destination.error!(err);\n      return;\n    }\n    this._finalizeNext(key, value);\n  }\n\n  private _finalizeNext(key: K|T, value: T) {\n    const { values } = this;\n    if (!values.has(<K>key)) {\n      values.add(<K>key);\n      this.destination.next!(value);\n    }\n  }\n\n}\n"],"mappings":"AAIA,SAASA,qBAAqB,EAAEC,cAAc,EAAEC,qBAAqB,QAAQ,mBAAmB;AA4DhG,OAAM,SAAUC,QAAQA,CAAOC,WAA6B,EAC7BC,OAAyB;EACtD,OAAQC,MAAqB,IAAKA,MAAM,CAACC,IAAI,CAAC,IAAIC,gBAAgB,CAACJ,WAAW,EAAEC,OAAO,CAAC,CAAC;AAC3F;AAEA,MAAMG,gBAAgB;EACpBC,YAAoBL,WAA6B,EAAUC,OAAyB;IAAhE,KAAAD,WAAW,GAAXA,WAAW;IAA4B,KAAAC,OAAO,GAAPA,OAAO;EAClE;EAEAK,IAAIA,CAACC,UAAyB,EAAEL,MAAW;IACzC,OAAOA,MAAM,CAACM,SAAS,CAAC,IAAIC,kBAAkB,CAACF,UAAU,EAAE,IAAI,CAACP,WAAW,EAAE,IAAI,CAACC,OAAO,CAAC,CAAC;EAC7F;;AAQF,OAAM,MAAOQ,kBAAyB,SAAQb,qBAA2B;EAGvES,YAAYK,WAA0B,EAAUV,WAA6B,EAAEC,OAAyB;IACtG,KAAK,CAACS,WAAW,CAAC;IAD4B,KAAAV,WAAW,GAAXA,WAAW;IAFnD,KAAAW,MAAM,GAAG,IAAIC,GAAG,EAAK;IAK3B,IAAIX,OAAO,EAAE;MACX,IAAI,CAACY,GAAG,CAAChB,cAAc,CAACI,OAAO,EAAE,IAAIH,qBAAqB,CAAC,IAAI,CAAC,CAAC,CAAC;;EAEtE;EAEAgB,UAAUA,CAAA;IACR,IAAI,CAACH,MAAM,CAACI,KAAK,EAAE;EACrB;EAEAC,WAAWA,CAACC,KAAU;IACpB,IAAI,CAACC,MAAM,CAACD,KAAK,CAAC;EACpB;EAEUE,KAAKA,CAACC,KAAQ;IACtB,IAAI,IAAI,CAACpB,WAAW,EAAE;MACpB,IAAI,CAACqB,eAAe,CAACD,KAAK,CAAC;KAC5B,MAAM;MACL,IAAI,CAACE,aAAa,CAACF,KAAK,EAAEA,KAAK,CAAC;;EAEpC;EAEQC,eAAeA,CAACD,KAAQ;IAC9B,IAAIG,GAAM;IACV,MAAM;MAAEb;IAAW,CAAE,GAAG,IAAI;IAC5B,IAAI;MACFa,GAAG,GAAG,IAAI,CAACvB,WAAY,CAACoB,KAAK,CAAC;KAC/B,CAAC,OAAOI,GAAG,EAAE;MACZd,WAAW,CAACO,KAAM,CAACO,GAAG,CAAC;MACvB;;IAEF,IAAI,CAACF,aAAa,CAACC,GAAG,EAAEH,KAAK,CAAC;EAChC;EAEQE,aAAaA,CAACC,GAAQ,EAAEH,KAAQ;IACtC,MAAM;MAAET;IAAM,CAAE,GAAG,IAAI;IACvB,IAAI,CAACA,MAAM,CAACc,GAAG,CAAIF,GAAG,CAAC,EAAE;MACvBZ,MAAM,CAACE,GAAG,CAAIU,GAAG,CAAC;MAClB,IAAI,CAACb,WAAW,CAACgB,IAAK,CAACN,KAAK,CAAC;;EAEjC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}