{"ast":null,"code":"import { Subscriber } from '../Subscriber';\nexport function pairwise() {\n  return source => source.lift(new PairwiseOperator());\n}\nclass PairwiseOperator {\n  call(subscriber, source) {\n    return source.subscribe(new PairwiseSubscriber(subscriber));\n  }\n}\nclass PairwiseSubscriber extends Subscriber {\n  constructor(destination) {\n    super(destination);\n    this.hasPrev = false;\n  }\n  _next(value) {\n    let pair;\n    if (this.hasPrev) {\n      pair = [this.prev, value];\n    } else {\n      this.hasPrev = true;\n    }\n    this.prev = value;\n    if (pair) {\n      this.destination.next(pair);\n    }\n  }\n}","map":{"version":3,"names":["Subscriber","pairwise","source","lift","PairwiseOperator","call","subscriber","subscribe","PairwiseSubscriber","constructor","destination","hasPrev","_next","value","pair","prev","next"],"sources":["C:\\Thiru\\Angular\\RXJS_state_maintainance\\app\\node_modules\\rxjs\\src\\internal\\operators\\pairwise.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../types';\n\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * ![](pairwise.png)\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * ## Example\n * On every click (starting from the second), emit the relative distance to the previous click\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { pairwise, map } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const pairs = clicks.pipe(pairwise());\n * const distance = pairs.pipe(\n *   map(pair => {\n *     const x0 = pair[0].clientX;\n *     const y0 = pair[0].clientY;\n *     const x1 = pair[1].clientX;\n *     const y1 = pair[1].clientY;\n *     return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n *   }),\n * );\n * distance.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nexport function pairwise<T>(): OperatorFunction<T, [T, T]> {\n  return (source: Observable<T>) => source.lift(new PairwiseOperator());\n}\n\nclass PairwiseOperator<T> implements Operator<T, [T, T]> {\n  call(subscriber: Subscriber<[T, T]>, source: any): any {\n    return source.subscribe(new PairwiseSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass PairwiseSubscriber<T> extends Subscriber<T> {\n  private prev: T;\n  private hasPrev: boolean = false;\n\n  constructor(destination: Subscriber<[T, T]>) {\n    super(destination);\n  }\n\n  _next(value: T): void {\n    let pair: [T, T] | undefined;\n\n    if (this.hasPrev) {\n      pair = [this.prev, value];\n    } else {\n      this.hasPrev = true;\n    }\n\n    this.prev = value;\n\n    if (pair) {\n      this.destination.next(pair);\n    }\n  }\n}\n"],"mappings":"AAEA,SAASA,UAAU,QAAQ,eAAe;AA8C1C,OAAM,SAAUC,QAAQA,CAAA;EACtB,OAAQC,MAAqB,IAAKA,MAAM,CAACC,IAAI,CAAC,IAAIC,gBAAgB,EAAE,CAAC;AACvE;AAEA,MAAMA,gBAAgB;EACpBC,IAAIA,CAACC,UAA8B,EAAEJ,MAAW;IAC9C,OAAOA,MAAM,CAACK,SAAS,CAAC,IAAIC,kBAAkB,CAACF,UAAU,CAAC,CAAC;EAC7D;;AAQF,MAAME,kBAAsB,SAAQR,UAAa;EAI/CS,YAAYC,WAA+B;IACzC,KAAK,CAACA,WAAW,CAAC;IAHZ,KAAAC,OAAO,GAAY,KAAK;EAIhC;EAEAC,KAAKA,CAACC,KAAQ;IACZ,IAAIC,IAAwB;IAE5B,IAAI,IAAI,CAACH,OAAO,EAAE;MAChBG,IAAI,GAAG,CAAC,IAAI,CAACC,IAAI,EAAEF,KAAK,CAAC;KAC1B,MAAM;MACL,IAAI,CAACF,OAAO,GAAG,IAAI;;IAGrB,IAAI,CAACI,IAAI,GAAGF,KAAK;IAEjB,IAAIC,IAAI,EAAE;MACR,IAAI,CAACJ,WAAW,CAACM,IAAI,CAACF,IAAI,CAAC;;EAE/B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}